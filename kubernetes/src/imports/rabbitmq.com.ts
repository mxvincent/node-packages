// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * Binding is the Schema for the bindings API
 *
 * @schema Binding
 */
export class Binding extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Binding"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'rabbitmq.com/v1beta1',
    kind: 'Binding',
  }

  /**
   * Renders a Kubernetes manifest for "Binding".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: BindingProps = {}): any {
    return {
      ...Binding.GVK,
      ...toJson_BindingProps(props),
    };
  }

  /**
   * Defines a "Binding" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: BindingProps = {}) {
    super(scope, id, {
      ...Binding.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Binding.GVK,
      ...toJson_BindingProps(resolved),
    };
  }
}

/**
 * Binding is the Schema for the bindings API
 *
 * @schema Binding
 */
export interface BindingProps {
  /**
   * @schema Binding#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * BindingSpec defines the desired state of Binding
   *
   * @schema Binding#spec
   */
  readonly spec?: BindingSpec;

}

/**
 * Converts an object of type 'BindingProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BindingProps(obj: BindingProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_BindingSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * BindingSpec defines the desired state of Binding
 *
 * @schema BindingSpec
 */
export interface BindingSpec {
  /**
   * Cannot be updated
   *
   * @schema BindingSpec#arguments
   */
  readonly arguments?: any;

  /**
   * Cannot be updated
   *
   * @schema BindingSpec#destination
   */
  readonly destination?: string;

  /**
   * Cannot be updated
   *
   * @schema BindingSpec#destinationType
   */
  readonly destinationType?: BindingSpecDestinationType;

  /**
   * Reference to the RabbitmqCluster that the binding will be created in.
   * Required property.
   *
   * @schema BindingSpec#rabbitmqClusterReference
   */
  readonly rabbitmqClusterReference: BindingSpecRabbitmqClusterReference;

  /**
   * Cannot be updated
   *
   * @schema BindingSpec#routingKey
   */
  readonly routingKey?: string;

  /**
   * Cannot be updated
   *
   * @schema BindingSpec#source
   */
  readonly source?: string;

  /**
   * Default to vhost '/'; cannot be updated
   *
   * @default vhost '/'; cannot be updated
   * @schema BindingSpec#vhost
   */
  readonly vhost?: string;

}

/**
 * Converts an object of type 'BindingSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BindingSpec(obj: BindingSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'arguments': obj.arguments,
    'destination': obj.destination,
    'destinationType': obj.destinationType,
    'rabbitmqClusterReference': toJson_BindingSpecRabbitmqClusterReference(obj.rabbitmqClusterReference),
    'routingKey': obj.routingKey,
    'source': obj.source,
    'vhost': obj.vhost,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Cannot be updated
 *
 * @schema BindingSpecDestinationType
 */
export enum BindingSpecDestinationType {
  /** exchange */
  EXCHANGE = "exchange",
  /** queue */
  QUEUE = "queue",
}

/**
 * Reference to the RabbitmqCluster that the binding will be created in.
 * Required property.
 *
 * @schema BindingSpecRabbitmqClusterReference
 */
export interface BindingSpecRabbitmqClusterReference {
  /**
   * Secret contains the http management uri for the RabbitMQ cluster.
   * The Secret must contain the key `uri`, `username` and `password` or operator will error.
   * Have to set either name or connectionSecret, but not both.
   *
   * @schema BindingSpecRabbitmqClusterReference#connectionSecret
   */
  readonly connectionSecret?: BindingSpecRabbitmqClusterReferenceConnectionSecret;

  /**
   * The name of the RabbitMQ cluster to reference.
   * Have to set either name or connectionSecret, but not both.
   *
   * @schema BindingSpecRabbitmqClusterReference#name
   */
  readonly name?: string;

  /**
   * The namespace of the RabbitMQ cluster to reference.
   * Defaults to the namespace of the requested resource if omitted.
   *
   * @default the namespace of the requested resource if omitted.
   * @schema BindingSpecRabbitmqClusterReference#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'BindingSpecRabbitmqClusterReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BindingSpecRabbitmqClusterReference(obj: BindingSpecRabbitmqClusterReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectionSecret': toJson_BindingSpecRabbitmqClusterReferenceConnectionSecret(obj.connectionSecret),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Secret contains the http management uri for the RabbitMQ cluster.
 * The Secret must contain the key `uri`, `username` and `password` or operator will error.
 * Have to set either name or connectionSecret, but not both.
 *
 * @schema BindingSpecRabbitmqClusterReferenceConnectionSecret
 */
export interface BindingSpecRabbitmqClusterReferenceConnectionSecret {
  /**
   * Name of the referent.
   * This field is effectively required, but due to backwards compatibility is
   * allowed to be empty. Instances of this type with an empty value here are
   * almost certainly wrong.
   * TODO: Add other useful fields. apiVersion, kind, uid?
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
   *
   * @schema BindingSpecRabbitmqClusterReferenceConnectionSecret#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'BindingSpecRabbitmqClusterReferenceConnectionSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BindingSpecRabbitmqClusterReferenceConnectionSecret(obj: BindingSpecRabbitmqClusterReferenceConnectionSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * Exchange is the Schema for the exchanges API
 *
 * @schema Exchange
 */
export class Exchange extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Exchange"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'rabbitmq.com/v1beta1',
    kind: 'Exchange',
  }

  /**
   * Renders a Kubernetes manifest for "Exchange".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ExchangeProps = {}): any {
    return {
      ...Exchange.GVK,
      ...toJson_ExchangeProps(props),
    };
  }

  /**
   * Defines a "Exchange" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ExchangeProps = {}) {
    super(scope, id, {
      ...Exchange.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Exchange.GVK,
      ...toJson_ExchangeProps(resolved),
    };
  }
}

/**
 * Exchange is the Schema for the exchanges API
 *
 * @schema Exchange
 */
export interface ExchangeProps {
  /**
   * @schema Exchange#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ExchangeSpec defines the desired state of Exchange
   *
   * @schema Exchange#spec
   */
  readonly spec?: ExchangeSpec;

}

/**
 * Converts an object of type 'ExchangeProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ExchangeProps(obj: ExchangeProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ExchangeSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ExchangeSpec defines the desired state of Exchange
 *
 * @schema ExchangeSpec
 */
export interface ExchangeSpec {
  /**
   * @schema ExchangeSpec#arguments
   */
  readonly arguments?: any;

  /**
   * Cannot be updated
   *
   * @schema ExchangeSpec#autoDelete
   */
  readonly autoDelete?: boolean;

  /**
   * Cannot be updated
   *
   * @schema ExchangeSpec#durable
   */
  readonly durable?: boolean;

  /**
   * Required property; cannot be updated
   *
   * @schema ExchangeSpec#name
   */
  readonly name: string;

  /**
   * Reference to the RabbitmqCluster that the exchange will be created in.
   * Required property.
   *
   * @schema ExchangeSpec#rabbitmqClusterReference
   */
  readonly rabbitmqClusterReference: ExchangeSpecRabbitmqClusterReference;

  /**
   * Cannot be updated
   *
   * @schema ExchangeSpec#type
   */
  readonly type?: string;

  /**
   * Default to vhost '/'; cannot be updated
   *
   * @default vhost '/'; cannot be updated
   * @schema ExchangeSpec#vhost
   */
  readonly vhost?: string;

}

/**
 * Converts an object of type 'ExchangeSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ExchangeSpec(obj: ExchangeSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'arguments': obj.arguments,
    'autoDelete': obj.autoDelete,
    'durable': obj.durable,
    'name': obj.name,
    'rabbitmqClusterReference': toJson_ExchangeSpecRabbitmqClusterReference(obj.rabbitmqClusterReference),
    'type': obj.type,
    'vhost': obj.vhost,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to the RabbitmqCluster that the exchange will be created in.
 * Required property.
 *
 * @schema ExchangeSpecRabbitmqClusterReference
 */
export interface ExchangeSpecRabbitmqClusterReference {
  /**
   * Secret contains the http management uri for the RabbitMQ cluster.
   * The Secret must contain the key `uri`, `username` and `password` or operator will error.
   * Have to set either name or connectionSecret, but not both.
   *
   * @schema ExchangeSpecRabbitmqClusterReference#connectionSecret
   */
  readonly connectionSecret?: ExchangeSpecRabbitmqClusterReferenceConnectionSecret;

  /**
   * The name of the RabbitMQ cluster to reference.
   * Have to set either name or connectionSecret, but not both.
   *
   * @schema ExchangeSpecRabbitmqClusterReference#name
   */
  readonly name?: string;

  /**
   * The namespace of the RabbitMQ cluster to reference.
   * Defaults to the namespace of the requested resource if omitted.
   *
   * @default the namespace of the requested resource if omitted.
   * @schema ExchangeSpecRabbitmqClusterReference#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ExchangeSpecRabbitmqClusterReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ExchangeSpecRabbitmqClusterReference(obj: ExchangeSpecRabbitmqClusterReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectionSecret': toJson_ExchangeSpecRabbitmqClusterReferenceConnectionSecret(obj.connectionSecret),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Secret contains the http management uri for the RabbitMQ cluster.
 * The Secret must contain the key `uri`, `username` and `password` or operator will error.
 * Have to set either name or connectionSecret, but not both.
 *
 * @schema ExchangeSpecRabbitmqClusterReferenceConnectionSecret
 */
export interface ExchangeSpecRabbitmqClusterReferenceConnectionSecret {
  /**
   * Name of the referent.
   * This field is effectively required, but due to backwards compatibility is
   * allowed to be empty. Instances of this type with an empty value here are
   * almost certainly wrong.
   * TODO: Add other useful fields. apiVersion, kind, uid?
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
   *
   * @schema ExchangeSpecRabbitmqClusterReferenceConnectionSecret#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'ExchangeSpecRabbitmqClusterReferenceConnectionSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ExchangeSpecRabbitmqClusterReferenceConnectionSecret(obj: ExchangeSpecRabbitmqClusterReferenceConnectionSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * Federation is the Schema for the federations API
 *
 * @schema Federation
 */
export class Federation extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Federation"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'rabbitmq.com/v1beta1',
    kind: 'Federation',
  }

  /**
   * Renders a Kubernetes manifest for "Federation".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: FederationProps = {}): any {
    return {
      ...Federation.GVK,
      ...toJson_FederationProps(props),
    };
  }

  /**
   * Defines a "Federation" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: FederationProps = {}) {
    super(scope, id, {
      ...Federation.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Federation.GVK,
      ...toJson_FederationProps(resolved),
    };
  }
}

/**
 * Federation is the Schema for the federations API
 *
 * @schema Federation
 */
export interface FederationProps {
  /**
   * @schema Federation#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * FederationSpec defines the desired state of Federation
   * For how to configure federation upstreams, see: https://www.rabbitmq.com/federation-reference.html.
   *
   * @schema Federation#spec
   */
  readonly spec?: FederationSpec;

}

/**
 * Converts an object of type 'FederationProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FederationProps(obj: FederationProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_FederationSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * FederationSpec defines the desired state of Federation
 * For how to configure federation upstreams, see: https://www.rabbitmq.com/federation-reference.html.
 *
 * @schema FederationSpec
 */
export interface FederationSpec {
  /**
   * @schema FederationSpec#ackMode
   */
  readonly ackMode?: FederationSpecAckMode;

  /**
   * @schema FederationSpec#exchange
   */
  readonly exchange?: string;

  /**
   * @schema FederationSpec#expires
   */
  readonly expires?: number;

  /**
   * @schema FederationSpec#maxHops
   */
  readonly maxHops?: number;

  /**
   * @schema FederationSpec#messageTTL
   */
  readonly messageTtl?: number;

  /**
   * Required property; cannot be updated
   *
   * @schema FederationSpec#name
   */
  readonly name: string;

  /**
   * @schema FederationSpec#prefetch-count
   */
  readonly prefetchCount?: number;

  /**
   * @schema FederationSpec#queue
   */
  readonly queue?: string;

  /**
   * Reference to the RabbitmqCluster that this federation upstream will be created in.
   * Required property.
   *
   * @schema FederationSpec#rabbitmqClusterReference
   */
  readonly rabbitmqClusterReference: FederationSpecRabbitmqClusterReference;

  /**
   * @schema FederationSpec#reconnectDelay
   */
  readonly reconnectDelay?: number;

  /**
   * @schema FederationSpec#trustUserId
   */
  readonly trustUserId?: boolean;

  /**
   * Secret contains the AMQP URI(s) for the upstream.
   * The Secret must contain the key `uri` or operator will error.
   * `uri` should be one or multiple uris separated by ','.
   * Required property.
   *
   * @schema FederationSpec#uriSecret
   */
  readonly uriSecret: FederationSpecUriSecret;

  /**
   * Default to vhost '/'; cannot be updated
   *
   * @default vhost '/'; cannot be updated
   * @schema FederationSpec#vhost
   */
  readonly vhost?: string;

}

/**
 * Converts an object of type 'FederationSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FederationSpec(obj: FederationSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ackMode': obj.ackMode,
    'exchange': obj.exchange,
    'expires': obj.expires,
    'maxHops': obj.maxHops,
    'messageTTL': obj.messageTtl,
    'name': obj.name,
    'prefetch-count': obj.prefetchCount,
    'queue': obj.queue,
    'rabbitmqClusterReference': toJson_FederationSpecRabbitmqClusterReference(obj.rabbitmqClusterReference),
    'reconnectDelay': obj.reconnectDelay,
    'trustUserId': obj.trustUserId,
    'uriSecret': toJson_FederationSpecUriSecret(obj.uriSecret),
    'vhost': obj.vhost,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema FederationSpecAckMode
 */
export enum FederationSpecAckMode {
  /** on-confirm */
  ON_HYPHEN_CONFIRM = "on-confirm",
  /** on-publish */
  ON_HYPHEN_PUBLISH = "on-publish",
  /** no-ack */
  NO_HYPHEN_ACK = "no-ack",
}

/**
 * Reference to the RabbitmqCluster that this federation upstream will be created in.
 * Required property.
 *
 * @schema FederationSpecRabbitmqClusterReference
 */
export interface FederationSpecRabbitmqClusterReference {
  /**
   * Secret contains the http management uri for the RabbitMQ cluster.
   * The Secret must contain the key `uri`, `username` and `password` or operator will error.
   * Have to set either name or connectionSecret, but not both.
   *
   * @schema FederationSpecRabbitmqClusterReference#connectionSecret
   */
  readonly connectionSecret?: FederationSpecRabbitmqClusterReferenceConnectionSecret;

  /**
   * The name of the RabbitMQ cluster to reference.
   * Have to set either name or connectionSecret, but not both.
   *
   * @schema FederationSpecRabbitmqClusterReference#name
   */
  readonly name?: string;

  /**
   * The namespace of the RabbitMQ cluster to reference.
   * Defaults to the namespace of the requested resource if omitted.
   *
   * @default the namespace of the requested resource if omitted.
   * @schema FederationSpecRabbitmqClusterReference#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'FederationSpecRabbitmqClusterReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FederationSpecRabbitmqClusterReference(obj: FederationSpecRabbitmqClusterReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectionSecret': toJson_FederationSpecRabbitmqClusterReferenceConnectionSecret(obj.connectionSecret),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Secret contains the AMQP URI(s) for the upstream.
 * The Secret must contain the key `uri` or operator will error.
 * `uri` should be one or multiple uris separated by ','.
 * Required property.
 *
 * @schema FederationSpecUriSecret
 */
export interface FederationSpecUriSecret {
  /**
   * Name of the referent.
   * This field is effectively required, but due to backwards compatibility is
   * allowed to be empty. Instances of this type with an empty value here are
   * almost certainly wrong.
   * TODO: Add other useful fields. apiVersion, kind, uid?
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
   *
   * @schema FederationSpecUriSecret#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'FederationSpecUriSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FederationSpecUriSecret(obj: FederationSpecUriSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Secret contains the http management uri for the RabbitMQ cluster.
 * The Secret must contain the key `uri`, `username` and `password` or operator will error.
 * Have to set either name or connectionSecret, but not both.
 *
 * @schema FederationSpecRabbitmqClusterReferenceConnectionSecret
 */
export interface FederationSpecRabbitmqClusterReferenceConnectionSecret {
  /**
   * Name of the referent.
   * This field is effectively required, but due to backwards compatibility is
   * allowed to be empty. Instances of this type with an empty value here are
   * almost certainly wrong.
   * TODO: Add other useful fields. apiVersion, kind, uid?
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
   *
   * @schema FederationSpecRabbitmqClusterReferenceConnectionSecret#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'FederationSpecRabbitmqClusterReferenceConnectionSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FederationSpecRabbitmqClusterReferenceConnectionSecret(obj: FederationSpecRabbitmqClusterReferenceConnectionSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * OperatorPolicy is the Schema for the operator policies API
 *
 * @schema OperatorPolicy
 */
export class OperatorPolicy extends ApiObject {
  /**
   * Returns the apiVersion and kind for "OperatorPolicy"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'rabbitmq.com/v1beta1',
    kind: 'OperatorPolicy',
  }

  /**
   * Renders a Kubernetes manifest for "OperatorPolicy".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: OperatorPolicyProps = {}): any {
    return {
      ...OperatorPolicy.GVK,
      ...toJson_OperatorPolicyProps(props),
    };
  }

  /**
   * Defines a "OperatorPolicy" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: OperatorPolicyProps = {}) {
    super(scope, id, {
      ...OperatorPolicy.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...OperatorPolicy.GVK,
      ...toJson_OperatorPolicyProps(resolved),
    };
  }
}

/**
 * OperatorPolicy is the Schema for the operator policies API
 *
 * @schema OperatorPolicy
 */
export interface OperatorPolicyProps {
  /**
   * @schema OperatorPolicy#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * OperatorPolicySpec defines the desired state of OperatorPolicy
   * https://www.rabbitmq.com/parameters.html#operator-policies
   *
   * @schema OperatorPolicy#spec
   */
  readonly spec?: OperatorPolicySpec;

}

/**
 * Converts an object of type 'OperatorPolicyProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_OperatorPolicyProps(obj: OperatorPolicyProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_OperatorPolicySpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * OperatorPolicySpec defines the desired state of OperatorPolicy
 * https://www.rabbitmq.com/parameters.html#operator-policies
 *
 * @schema OperatorPolicySpec
 */
export interface OperatorPolicySpec {
  /**
   * What this operator policy applies to: 'queues', 'classic_queues', 'quorum_queues', 'streams'.
   * Default to 'queues'.
   *
   * @default queues'.
   * @schema OperatorPolicySpec#applyTo
   */
  readonly applyTo?: OperatorPolicySpecApplyTo;

  /**
   * OperatorPolicy definition. Required property.
   *
   * @schema OperatorPolicySpec#definition
   */
  readonly definition: any;

  /**
   * Required property; cannot be updated
   *
   * @schema OperatorPolicySpec#name
   */
  readonly name: string;

  /**
   * Regular expression pattern used to match queues, e.g. "^my-queue$".
   * Required property.
   *
   * @schema OperatorPolicySpec#pattern
   */
  readonly pattern: string;

  /**
   * Default to '0'.
   * In the event that more than one operator policy can match a given queue, the operator policy with the greatest priority applies.
   *
   * @default 0'.
   * @schema OperatorPolicySpec#priority
   */
  readonly priority?: number;

  /**
   * Reference to the RabbitmqCluster that the operator policy will be created in.
   * Required property.
   *
   * @schema OperatorPolicySpec#rabbitmqClusterReference
   */
  readonly rabbitmqClusterReference: OperatorPolicySpecRabbitmqClusterReference;

  /**
   * Default to vhost '/'; cannot be updated
   *
   * @default vhost '/'; cannot be updated
   * @schema OperatorPolicySpec#vhost
   */
  readonly vhost?: string;

}

/**
 * Converts an object of type 'OperatorPolicySpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_OperatorPolicySpec(obj: OperatorPolicySpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'applyTo': obj.applyTo,
    'definition': obj.definition,
    'name': obj.name,
    'pattern': obj.pattern,
    'priority': obj.priority,
    'rabbitmqClusterReference': toJson_OperatorPolicySpecRabbitmqClusterReference(obj.rabbitmqClusterReference),
    'vhost': obj.vhost,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * What this operator policy applies to: 'queues', 'classic_queues', 'quorum_queues', 'streams'.
 * Default to 'queues'.
 *
 * @default queues'.
 * @schema OperatorPolicySpecApplyTo
 */
export enum OperatorPolicySpecApplyTo {
  /** queues */
  QUEUES = "queues",
  /** classic_queues */
  CLASSIC_UNDERSCORE_QUEUES = "classic_queues",
  /** quorum_queues */
  QUORUM_UNDERSCORE_QUEUES = "quorum_queues",
  /** streams */
  STREAMS = "streams",
}

/**
 * Reference to the RabbitmqCluster that the operator policy will be created in.
 * Required property.
 *
 * @schema OperatorPolicySpecRabbitmqClusterReference
 */
export interface OperatorPolicySpecRabbitmqClusterReference {
  /**
   * Secret contains the http management uri for the RabbitMQ cluster.
   * The Secret must contain the key `uri`, `username` and `password` or operator will error.
   * Have to set either name or connectionSecret, but not both.
   *
   * @schema OperatorPolicySpecRabbitmqClusterReference#connectionSecret
   */
  readonly connectionSecret?: OperatorPolicySpecRabbitmqClusterReferenceConnectionSecret;

  /**
   * The name of the RabbitMQ cluster to reference.
   * Have to set either name or connectionSecret, but not both.
   *
   * @schema OperatorPolicySpecRabbitmqClusterReference#name
   */
  readonly name?: string;

  /**
   * The namespace of the RabbitMQ cluster to reference.
   * Defaults to the namespace of the requested resource if omitted.
   *
   * @default the namespace of the requested resource if omitted.
   * @schema OperatorPolicySpecRabbitmqClusterReference#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'OperatorPolicySpecRabbitmqClusterReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_OperatorPolicySpecRabbitmqClusterReference(obj: OperatorPolicySpecRabbitmqClusterReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectionSecret': toJson_OperatorPolicySpecRabbitmqClusterReferenceConnectionSecret(obj.connectionSecret),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Secret contains the http management uri for the RabbitMQ cluster.
 * The Secret must contain the key `uri`, `username` and `password` or operator will error.
 * Have to set either name or connectionSecret, but not both.
 *
 * @schema OperatorPolicySpecRabbitmqClusterReferenceConnectionSecret
 */
export interface OperatorPolicySpecRabbitmqClusterReferenceConnectionSecret {
  /**
   * Name of the referent.
   * This field is effectively required, but due to backwards compatibility is
   * allowed to be empty. Instances of this type with an empty value here are
   * almost certainly wrong.
   * TODO: Add other useful fields. apiVersion, kind, uid?
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
   *
   * @schema OperatorPolicySpecRabbitmqClusterReferenceConnectionSecret#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'OperatorPolicySpecRabbitmqClusterReferenceConnectionSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_OperatorPolicySpecRabbitmqClusterReferenceConnectionSecret(obj: OperatorPolicySpecRabbitmqClusterReferenceConnectionSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * Permission is the Schema for the permissions API
 *
 * @schema Permission
 */
export class Permission extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Permission"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'rabbitmq.com/v1beta1',
    kind: 'Permission',
  }

  /**
   * Renders a Kubernetes manifest for "Permission".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: PermissionProps = {}): any {
    return {
      ...Permission.GVK,
      ...toJson_PermissionProps(props),
    };
  }

  /**
   * Defines a "Permission" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: PermissionProps = {}) {
    super(scope, id, {
      ...Permission.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Permission.GVK,
      ...toJson_PermissionProps(resolved),
    };
  }
}

/**
 * Permission is the Schema for the permissions API
 *
 * @schema Permission
 */
export interface PermissionProps {
  /**
   * @schema Permission#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * PermissionSpec defines the desired state of Permission
   *
   * @schema Permission#spec
   */
  readonly spec?: PermissionSpec;

}

/**
 * Converts an object of type 'PermissionProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PermissionProps(obj: PermissionProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_PermissionSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PermissionSpec defines the desired state of Permission
 *
 * @schema PermissionSpec
 */
export interface PermissionSpec {
  /**
   * Permissions to grant to the user in the specific vhost; required property.
   * See RabbitMQ doc for more information: https://www.rabbitmq.com/access-control.html#user-management
   *
   * @schema PermissionSpec#permissions
   */
  readonly permissions: PermissionSpecPermissions;

  /**
   * Reference to the RabbitmqCluster that both the provided user and vhost are.
   * Required property.
   *
   * @schema PermissionSpec#rabbitmqClusterReference
   */
  readonly rabbitmqClusterReference: PermissionSpecRabbitmqClusterReference;

  /**
   * Name of an existing user; must provide user or userReference, else create/update will fail; cannot be updated
   *
   * @schema PermissionSpec#user
   */
  readonly user?: string;

  /**
   * Reference to an existing user.rabbitmq.com object; must provide user or userReference, else create/update will fail; cannot be updated
   *
   * @schema PermissionSpec#userReference
   */
  readonly userReference?: PermissionSpecUserReference;

  /**
   * Name of an existing vhost; required property; cannot be updated
   *
   * @schema PermissionSpec#vhost
   */
  readonly vhost: string;

}

/**
 * Converts an object of type 'PermissionSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PermissionSpec(obj: PermissionSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'permissions': toJson_PermissionSpecPermissions(obj.permissions),
    'rabbitmqClusterReference': toJson_PermissionSpecRabbitmqClusterReference(obj.rabbitmqClusterReference),
    'user': obj.user,
    'userReference': toJson_PermissionSpecUserReference(obj.userReference),
    'vhost': obj.vhost,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Permissions to grant to the user in the specific vhost; required property.
 * See RabbitMQ doc for more information: https://www.rabbitmq.com/access-control.html#user-management
 *
 * @schema PermissionSpecPermissions
 */
export interface PermissionSpecPermissions {
  /**
   * @schema PermissionSpecPermissions#configure
   */
  readonly configure?: string;

  /**
   * @schema PermissionSpecPermissions#read
   */
  readonly read?: string;

  /**
   * @schema PermissionSpecPermissions#write
   */
  readonly write?: string;

}

/**
 * Converts an object of type 'PermissionSpecPermissions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PermissionSpecPermissions(obj: PermissionSpecPermissions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configure': obj.configure,
    'read': obj.read,
    'write': obj.write,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to the RabbitmqCluster that both the provided user and vhost are.
 * Required property.
 *
 * @schema PermissionSpecRabbitmqClusterReference
 */
export interface PermissionSpecRabbitmqClusterReference {
  /**
   * Secret contains the http management uri for the RabbitMQ cluster.
   * The Secret must contain the key `uri`, `username` and `password` or operator will error.
   * Have to set either name or connectionSecret, but not both.
   *
   * @schema PermissionSpecRabbitmqClusterReference#connectionSecret
   */
  readonly connectionSecret?: PermissionSpecRabbitmqClusterReferenceConnectionSecret;

  /**
   * The name of the RabbitMQ cluster to reference.
   * Have to set either name or connectionSecret, but not both.
   *
   * @schema PermissionSpecRabbitmqClusterReference#name
   */
  readonly name?: string;

  /**
   * The namespace of the RabbitMQ cluster to reference.
   * Defaults to the namespace of the requested resource if omitted.
   *
   * @default the namespace of the requested resource if omitted.
   * @schema PermissionSpecRabbitmqClusterReference#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'PermissionSpecRabbitmqClusterReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PermissionSpecRabbitmqClusterReference(obj: PermissionSpecRabbitmqClusterReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectionSecret': toJson_PermissionSpecRabbitmqClusterReferenceConnectionSecret(obj.connectionSecret),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to an existing user.rabbitmq.com object; must provide user or userReference, else create/update will fail; cannot be updated
 *
 * @schema PermissionSpecUserReference
 */
export interface PermissionSpecUserReference {
  /**
   * Name of the referent.
   * This field is effectively required, but due to backwards compatibility is
   * allowed to be empty. Instances of this type with an empty value here are
   * almost certainly wrong.
   * TODO: Add other useful fields. apiVersion, kind, uid?
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
   *
   * @schema PermissionSpecUserReference#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'PermissionSpecUserReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PermissionSpecUserReference(obj: PermissionSpecUserReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Secret contains the http management uri for the RabbitMQ cluster.
 * The Secret must contain the key `uri`, `username` and `password` or operator will error.
 * Have to set either name or connectionSecret, but not both.
 *
 * @schema PermissionSpecRabbitmqClusterReferenceConnectionSecret
 */
export interface PermissionSpecRabbitmqClusterReferenceConnectionSecret {
  /**
   * Name of the referent.
   * This field is effectively required, but due to backwards compatibility is
   * allowed to be empty. Instances of this type with an empty value here are
   * almost certainly wrong.
   * TODO: Add other useful fields. apiVersion, kind, uid?
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
   *
   * @schema PermissionSpecRabbitmqClusterReferenceConnectionSecret#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'PermissionSpecRabbitmqClusterReferenceConnectionSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PermissionSpecRabbitmqClusterReferenceConnectionSecret(obj: PermissionSpecRabbitmqClusterReferenceConnectionSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * Policy is the Schema for the policies API
 *
 * @schema Policy
 */
export class Policy extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Policy"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'rabbitmq.com/v1beta1',
    kind: 'Policy',
  }

  /**
   * Renders a Kubernetes manifest for "Policy".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: PolicyProps = {}): any {
    return {
      ...Policy.GVK,
      ...toJson_PolicyProps(props),
    };
  }

  /**
   * Defines a "Policy" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: PolicyProps = {}) {
    super(scope, id, {
      ...Policy.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Policy.GVK,
      ...toJson_PolicyProps(resolved),
    };
  }
}

/**
 * Policy is the Schema for the policies API
 *
 * @schema Policy
 */
export interface PolicyProps {
  /**
   * @schema Policy#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * PolicySpec defines the desired state of Policy
   * https://www.rabbitmq.com/parameters.html#policies
   *
   * @schema Policy#spec
   */
  readonly spec?: PolicySpec;

}

/**
 * Converts an object of type 'PolicyProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PolicyProps(obj: PolicyProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_PolicySpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PolicySpec defines the desired state of Policy
 * https://www.rabbitmq.com/parameters.html#policies
 *
 * @schema PolicySpec
 */
export interface PolicySpec {
  /**
   * What this policy applies to: 'queues', 'classic_queues', 'quorum_queues', 'streams', 'exchanges', or 'all'.
   * Default to 'all'.
   *
   * @default all'.
   * @schema PolicySpec#applyTo
   */
  readonly applyTo?: PolicySpecApplyTo;

  /**
   * Policy definition. Required property.
   *
   * @schema PolicySpec#definition
   */
  readonly definition: any;

  /**
   * Required property; cannot be updated
   *
   * @schema PolicySpec#name
   */
  readonly name: string;

  /**
   * Regular expression pattern used to match queues and exchanges, e.g. "^amq.".
   * Required property.
   *
   * @schema PolicySpec#pattern
   */
  readonly pattern: string;

  /**
   * Default to '0'.
   * In the event that more than one policy can match a given exchange or queue, the policy with the greatest priority applies.
   *
   * @default 0'.
   * @schema PolicySpec#priority
   */
  readonly priority?: number;

  /**
   * Reference to the RabbitmqCluster that the policy will be created in.
   * Required property.
   *
   * @schema PolicySpec#rabbitmqClusterReference
   */
  readonly rabbitmqClusterReference: PolicySpecRabbitmqClusterReference;

  /**
   * Default to vhost '/'; cannot be updated
   *
   * @default vhost '/'; cannot be updated
   * @schema PolicySpec#vhost
   */
  readonly vhost?: string;

}

/**
 * Converts an object of type 'PolicySpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PolicySpec(obj: PolicySpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'applyTo': obj.applyTo,
    'definition': obj.definition,
    'name': obj.name,
    'pattern': obj.pattern,
    'priority': obj.priority,
    'rabbitmqClusterReference': toJson_PolicySpecRabbitmqClusterReference(obj.rabbitmqClusterReference),
    'vhost': obj.vhost,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * What this policy applies to: 'queues', 'classic_queues', 'quorum_queues', 'streams', 'exchanges', or 'all'.
 * Default to 'all'.
 *
 * @default all'.
 * @schema PolicySpecApplyTo
 */
export enum PolicySpecApplyTo {
  /** queues */
  QUEUES = "queues",
  /** classic_queues */
  CLASSIC_UNDERSCORE_QUEUES = "classic_queues",
  /** quorum_queues */
  QUORUM_UNDERSCORE_QUEUES = "quorum_queues",
  /** streams */
  STREAMS = "streams",
  /** exchanges */
  EXCHANGES = "exchanges",
  /** all */
  ALL = "all",
}

/**
 * Reference to the RabbitmqCluster that the policy will be created in.
 * Required property.
 *
 * @schema PolicySpecRabbitmqClusterReference
 */
export interface PolicySpecRabbitmqClusterReference {
  /**
   * Secret contains the http management uri for the RabbitMQ cluster.
   * The Secret must contain the key `uri`, `username` and `password` or operator will error.
   * Have to set either name or connectionSecret, but not both.
   *
   * @schema PolicySpecRabbitmqClusterReference#connectionSecret
   */
  readonly connectionSecret?: PolicySpecRabbitmqClusterReferenceConnectionSecret;

  /**
   * The name of the RabbitMQ cluster to reference.
   * Have to set either name or connectionSecret, but not both.
   *
   * @schema PolicySpecRabbitmqClusterReference#name
   */
  readonly name?: string;

  /**
   * The namespace of the RabbitMQ cluster to reference.
   * Defaults to the namespace of the requested resource if omitted.
   *
   * @default the namespace of the requested resource if omitted.
   * @schema PolicySpecRabbitmqClusterReference#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'PolicySpecRabbitmqClusterReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PolicySpecRabbitmqClusterReference(obj: PolicySpecRabbitmqClusterReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectionSecret': toJson_PolicySpecRabbitmqClusterReferenceConnectionSecret(obj.connectionSecret),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Secret contains the http management uri for the RabbitMQ cluster.
 * The Secret must contain the key `uri`, `username` and `password` or operator will error.
 * Have to set either name or connectionSecret, but not both.
 *
 * @schema PolicySpecRabbitmqClusterReferenceConnectionSecret
 */
export interface PolicySpecRabbitmqClusterReferenceConnectionSecret {
  /**
   * Name of the referent.
   * This field is effectively required, but due to backwards compatibility is
   * allowed to be empty. Instances of this type with an empty value here are
   * almost certainly wrong.
   * TODO: Add other useful fields. apiVersion, kind, uid?
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
   *
   * @schema PolicySpecRabbitmqClusterReferenceConnectionSecret#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'PolicySpecRabbitmqClusterReferenceConnectionSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PolicySpecRabbitmqClusterReferenceConnectionSecret(obj: PolicySpecRabbitmqClusterReferenceConnectionSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * Queue is the Schema for the queues API
 *
 * @schema Queue
 */
export class Queue extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Queue"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'rabbitmq.com/v1beta1',
    kind: 'Queue',
  }

  /**
   * Renders a Kubernetes manifest for "Queue".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: QueueProps = {}): any {
    return {
      ...Queue.GVK,
      ...toJson_QueueProps(props),
    };
  }

  /**
   * Defines a "Queue" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: QueueProps = {}) {
    super(scope, id, {
      ...Queue.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Queue.GVK,
      ...toJson_QueueProps(resolved),
    };
  }
}

/**
 * Queue is the Schema for the queues API
 *
 * @schema Queue
 */
export interface QueueProps {
  /**
   * @schema Queue#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * QueueSpec defines the desired state of Queue
   *
   * @schema Queue#spec
   */
  readonly spec?: QueueSpec;

}

/**
 * Converts an object of type 'QueueProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_QueueProps(obj: QueueProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_QueueSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * QueueSpec defines the desired state of Queue
 *
 * @schema QueueSpec
 */
export interface QueueSpec {
  /**
   * Queue arguments in the format of KEY: VALUE. e.g. x-delivery-limit: 10000.
   * Configuring queues through arguments is not recommended because they cannot be updated once set; we recommend configuring queues through policies instead.
   *
   * @schema QueueSpec#arguments
   */
  readonly arguments?: any;

  /**
   * when set to true, queues that have had at least one consumer before are deleted after the last consumer unsubscribes.
   *
   * @schema QueueSpec#autoDelete
   */
  readonly autoDelete?: boolean;

  /**
   * when set to true, queues are deleted only if empty.
   *
   * @schema QueueSpec#deleteIfEmpty
   */
  readonly deleteIfEmpty?: boolean;

  /**
   * when set to true, queues are delete only if they have no consumer.
   *
   * @schema QueueSpec#deleteIfUnused
   */
  readonly deleteIfUnused?: boolean;

  /**
   * When set to false queues does not survive server restart.
   *
   * @schema QueueSpec#durable
   */
  readonly durable?: boolean;

  /**
   * Name of the queue; required property.
   *
   * @schema QueueSpec#name
   */
  readonly name: string;

  /**
   * Reference to the RabbitmqCluster that the queue will be created in.
   * Required property.
   *
   * @schema QueueSpec#rabbitmqClusterReference
   */
  readonly rabbitmqClusterReference: QueueSpecRabbitmqClusterReference;

  /**
   * @schema QueueSpec#type
   */
  readonly type?: string;

  /**
   * Default to vhost '/'
   *
   * @default vhost '/'
   * @schema QueueSpec#vhost
   */
  readonly vhost?: string;

}

/**
 * Converts an object of type 'QueueSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_QueueSpec(obj: QueueSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'arguments': obj.arguments,
    'autoDelete': obj.autoDelete,
    'deleteIfEmpty': obj.deleteIfEmpty,
    'deleteIfUnused': obj.deleteIfUnused,
    'durable': obj.durable,
    'name': obj.name,
    'rabbitmqClusterReference': toJson_QueueSpecRabbitmqClusterReference(obj.rabbitmqClusterReference),
    'type': obj.type,
    'vhost': obj.vhost,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to the RabbitmqCluster that the queue will be created in.
 * Required property.
 *
 * @schema QueueSpecRabbitmqClusterReference
 */
export interface QueueSpecRabbitmqClusterReference {
  /**
   * Secret contains the http management uri for the RabbitMQ cluster.
   * The Secret must contain the key `uri`, `username` and `password` or operator will error.
   * Have to set either name or connectionSecret, but not both.
   *
   * @schema QueueSpecRabbitmqClusterReference#connectionSecret
   */
  readonly connectionSecret?: QueueSpecRabbitmqClusterReferenceConnectionSecret;

  /**
   * The name of the RabbitMQ cluster to reference.
   * Have to set either name or connectionSecret, but not both.
   *
   * @schema QueueSpecRabbitmqClusterReference#name
   */
  readonly name?: string;

  /**
   * The namespace of the RabbitMQ cluster to reference.
   * Defaults to the namespace of the requested resource if omitted.
   *
   * @default the namespace of the requested resource if omitted.
   * @schema QueueSpecRabbitmqClusterReference#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'QueueSpecRabbitmqClusterReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_QueueSpecRabbitmqClusterReference(obj: QueueSpecRabbitmqClusterReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectionSecret': toJson_QueueSpecRabbitmqClusterReferenceConnectionSecret(obj.connectionSecret),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Secret contains the http management uri for the RabbitMQ cluster.
 * The Secret must contain the key `uri`, `username` and `password` or operator will error.
 * Have to set either name or connectionSecret, but not both.
 *
 * @schema QueueSpecRabbitmqClusterReferenceConnectionSecret
 */
export interface QueueSpecRabbitmqClusterReferenceConnectionSecret {
  /**
   * Name of the referent.
   * This field is effectively required, but due to backwards compatibility is
   * allowed to be empty. Instances of this type with an empty value here are
   * almost certainly wrong.
   * TODO: Add other useful fields. apiVersion, kind, uid?
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
   *
   * @schema QueueSpecRabbitmqClusterReferenceConnectionSecret#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'QueueSpecRabbitmqClusterReferenceConnectionSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_QueueSpecRabbitmqClusterReferenceConnectionSecret(obj: QueueSpecRabbitmqClusterReferenceConnectionSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * RabbitmqCluster is the Schema for the RabbitmqCluster API. Each instance of this object
corresponds to a single RabbitMQ cluster.
 *
 * @schema RabbitmqCluster
 */
export class RabbitmqCluster extends ApiObject {
  /**
   * Returns the apiVersion and kind for "RabbitmqCluster"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'rabbitmq.com/v1beta1',
    kind: 'RabbitmqCluster',
  }

  /**
   * Renders a Kubernetes manifest for "RabbitmqCluster".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: RabbitmqClusterProps = {}): any {
    return {
      ...RabbitmqCluster.GVK,
      ...toJson_RabbitmqClusterProps(props),
    };
  }

  /**
   * Defines a "RabbitmqCluster" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: RabbitmqClusterProps = {}) {
    super(scope, id, {
      ...RabbitmqCluster.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...RabbitmqCluster.GVK,
      ...toJson_RabbitmqClusterProps(resolved),
    };
  }
}

/**
 * RabbitmqCluster is the Schema for the RabbitmqCluster API. Each instance of this object
 * corresponds to a single RabbitMQ cluster.
 *
 * @schema RabbitmqCluster
 */
export interface RabbitmqClusterProps {
  /**
   * @schema RabbitmqCluster#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Spec is the desired state of the RabbitmqCluster Custom Resource.
   *
   * @schema RabbitmqCluster#spec
   */
  readonly spec?: RabbitmqClusterSpec;

}

/**
 * Converts an object of type 'RabbitmqClusterProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterProps(obj: RabbitmqClusterProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_RabbitmqClusterSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Spec is the desired state of the RabbitmqCluster Custom Resource.
 *
 * @schema RabbitmqClusterSpec
 */
export interface RabbitmqClusterSpec {
  /**
   * Affinity scheduling rules to be applied on created Pods.
   *
   * @schema RabbitmqClusterSpec#affinity
   */
  readonly affinity?: RabbitmqClusterSpecAffinity;

  /**
   * DelayStartSeconds is the time the init container (`setup-container`) will sleep before terminating.
   * This effectively delays the time between starting the Pod and starting the `rabbitmq` container.
   * RabbitMQ relies on up-to-date DNS entries early during peer discovery.
   * The purpose of this artificial delay is to ensure that DNS entries are up-to-date when booting RabbitMQ.
   * For more information, see https://github.com/kubernetes/kubernetes/issues/92559
   * If your Kubernetes DNS backend is configured with a low DNS cache value or publishes not ready addresses
   * promptly, you can decrase this value or set it to 0.
   *
   * @schema RabbitmqClusterSpec#delayStartSeconds
   */
  readonly delayStartSeconds?: number;

  /**
   * Image is the name of the RabbitMQ docker image to use for RabbitMQ nodes in the RabbitmqCluster.
   * Must be provided together with ImagePullSecrets in order to use an image in a private registry.
   *
   * @schema RabbitmqClusterSpec#image
   */
  readonly image?: string;

  /**
   * List of Secret resource containing access credentials to the registry for the RabbitMQ image. Required if the docker registry is private.
   *
   * @schema RabbitmqClusterSpec#imagePullSecrets
   */
  readonly imagePullSecrets?: RabbitmqClusterSpecImagePullSecrets[];

  /**
   * @schema RabbitmqClusterSpec#override
   */
  readonly override?: RabbitmqClusterSpecOverride;

  /**
   * The desired persistent storage configuration for each Pod in the cluster.
   *
   * @schema RabbitmqClusterSpec#persistence
   */
  readonly persistence?: RabbitmqClusterSpecPersistence;

  /**
   * Configuration options for RabbitMQ Pods created in the cluster.
   *
   * @schema RabbitmqClusterSpec#rabbitmq
   */
  readonly rabbitmq?: RabbitmqClusterSpecRabbitmq;

  /**
   * Replicas is the number of nodes in the RabbitMQ cluster. Each node is deployed as a Replica in a StatefulSet. Only 1, 3, 5 replicas clusters are tested.
   * This value should be an odd number to ensure the resultant cluster can establish exactly one quorum of nodes
   * in the event of a fragmenting network partition.
   *
   * @schema RabbitmqClusterSpec#replicas
   */
  readonly replicas?: number;

  /**
   * The desired compute resource requirements of Pods in the cluster.
   *
   * @schema RabbitmqClusterSpec#resources
   */
  readonly resources?: RabbitmqClusterSpecResources;

  /**
   * Secret backend configuration for the RabbitmqCluster.
   * Enables to fetch default user credentials and certificates from K8s external secret stores.
   *
   * @schema RabbitmqClusterSpec#secretBackend
   */
  readonly secretBackend?: RabbitmqClusterSpecSecretBackend;

  /**
   * The desired state of the Kubernetes Service to create for the cluster.
   *
   * @schema RabbitmqClusterSpec#service
   */
  readonly service?: RabbitmqClusterSpecService;

  /**
   * If unset, or set to false, the cluster will run `rabbitmq-queues rebalance all` whenever the cluster is updated.
   * Set to true to prevent the operator rebalancing queue leaders after a cluster update.
   * Has no effect if the cluster only consists of one node.
   * For more information, see https://www.rabbitmq.com/rabbitmq-queues.8.html#rebalance
   *
   * @schema RabbitmqClusterSpec#skipPostDeploySteps
   */
  readonly skipPostDeploySteps?: boolean;

  /**
   * TerminationGracePeriodSeconds is the timeout that each rabbitmqcluster pod will have to terminate gracefully.
   * It defaults to 604800 seconds ( a week long) to ensure that the container preStop lifecycle hook can finish running.
   * For more information, see: https://github.com/rabbitmq/cluster-operator/blob/main/docs/design/20200520-graceful-pod-termination.md
   *
   * @schema RabbitmqClusterSpec#terminationGracePeriodSeconds
   */
  readonly terminationGracePeriodSeconds?: number;

  /**
   * TLS-related configuration for the RabbitMQ cluster.
   *
   * @schema RabbitmqClusterSpec#tls
   */
  readonly tls?: RabbitmqClusterSpecTls;

  /**
   * Tolerations is the list of Toleration resources attached to each Pod in the RabbitmqCluster.
   *
   * @schema RabbitmqClusterSpec#tolerations
   */
  readonly tolerations?: RabbitmqClusterSpecTolerations[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpec(obj: RabbitmqClusterSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'affinity': toJson_RabbitmqClusterSpecAffinity(obj.affinity),
    'delayStartSeconds': obj.delayStartSeconds,
    'image': obj.image,
    'imagePullSecrets': obj.imagePullSecrets?.map(y => toJson_RabbitmqClusterSpecImagePullSecrets(y)),
    'override': toJson_RabbitmqClusterSpecOverride(obj.override),
    'persistence': toJson_RabbitmqClusterSpecPersistence(obj.persistence),
    'rabbitmq': toJson_RabbitmqClusterSpecRabbitmq(obj.rabbitmq),
    'replicas': obj.replicas,
    'resources': toJson_RabbitmqClusterSpecResources(obj.resources),
    'secretBackend': toJson_RabbitmqClusterSpecSecretBackend(obj.secretBackend),
    'service': toJson_RabbitmqClusterSpecService(obj.service),
    'skipPostDeploySteps': obj.skipPostDeploySteps,
    'terminationGracePeriodSeconds': obj.terminationGracePeriodSeconds,
    'tls': toJson_RabbitmqClusterSpecTls(obj.tls),
    'tolerations': obj.tolerations?.map(y => toJson_RabbitmqClusterSpecTolerations(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Affinity scheduling rules to be applied on created Pods.
 *
 * @schema RabbitmqClusterSpecAffinity
 */
export interface RabbitmqClusterSpecAffinity {
  /**
   * Describes node affinity scheduling rules for the pod.
   *
   * @schema RabbitmqClusterSpecAffinity#nodeAffinity
   */
  readonly nodeAffinity?: RabbitmqClusterSpecAffinityNodeAffinity;

  /**
   * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
   *
   * @schema RabbitmqClusterSpecAffinity#podAffinity
   */
  readonly podAffinity?: RabbitmqClusterSpecAffinityPodAffinity;

  /**
   * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
   *
   * @schema RabbitmqClusterSpecAffinity#podAntiAffinity
   */
  readonly podAntiAffinity?: RabbitmqClusterSpecAffinityPodAntiAffinity;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinity' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinity(obj: RabbitmqClusterSpecAffinity | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'nodeAffinity': toJson_RabbitmqClusterSpecAffinityNodeAffinity(obj.nodeAffinity),
    'podAffinity': toJson_RabbitmqClusterSpecAffinityPodAffinity(obj.podAffinity),
    'podAntiAffinity': toJson_RabbitmqClusterSpecAffinityPodAntiAffinity(obj.podAntiAffinity),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * LocalObjectReference contains enough information to let you locate the
 * referenced object inside the same namespace.
 *
 * @schema RabbitmqClusterSpecImagePullSecrets
 */
export interface RabbitmqClusterSpecImagePullSecrets {
  /**
   * Name of the referent.
   * This field is effectively required, but due to backwards compatibility is
   * allowed to be empty. Instances of this type with an empty value here are
   * almost certainly wrong.
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema RabbitmqClusterSpecImagePullSecrets#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecImagePullSecrets' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecImagePullSecrets(obj: RabbitmqClusterSpecImagePullSecrets | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverride
 */
export interface RabbitmqClusterSpecOverride {
  /**
   * @schema RabbitmqClusterSpecOverride#service
   */
  readonly service?: RabbitmqClusterSpecOverrideService;

  /**
   * @schema RabbitmqClusterSpecOverride#statefulSet
   */
  readonly statefulSet?: RabbitmqClusterSpecOverrideStatefulSet;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverride' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverride(obj: RabbitmqClusterSpecOverride | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'service': toJson_RabbitmqClusterSpecOverrideService(obj.service),
    'statefulSet': toJson_RabbitmqClusterSpecOverrideStatefulSet(obj.statefulSet),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The desired persistent storage configuration for each Pod in the cluster.
 *
 * @schema RabbitmqClusterSpecPersistence
 */
export interface RabbitmqClusterSpecPersistence {
  /**
   * The requested size of the persistent volume attached to each Pod in the RabbitmqCluster.
   * The format of this field matches that defined by kubernetes/apimachinery.
   * See https://pkg.go.dev/k8s.io/apimachinery/pkg/api/resource#Quantity for more info on the format of this field.
   *
   * @schema RabbitmqClusterSpecPersistence#storage
   */
  readonly storage?: RabbitmqClusterSpecPersistenceStorage;

  /**
   * The name of the StorageClass to claim a PersistentVolume from.
   *
   * @schema RabbitmqClusterSpecPersistence#storageClassName
   */
  readonly storageClassName?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecPersistence' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecPersistence(obj: RabbitmqClusterSpecPersistence | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'storage': obj.storage?.value,
    'storageClassName': obj.storageClassName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration options for RabbitMQ Pods created in the cluster.
 *
 * @schema RabbitmqClusterSpecRabbitmq
 */
export interface RabbitmqClusterSpecRabbitmq {
  /**
   * Modify to add to the rabbitmq.conf file in addition to default configurations set by the operator.
   * Modifying this property on an existing RabbitmqCluster will trigger a StatefulSet rolling restart and will cause rabbitmq downtime.
   * For more information on this config, see https://www.rabbitmq.com/configure.html#config-file
   *
   * @schema RabbitmqClusterSpecRabbitmq#additionalConfig
   */
  readonly additionalConfig?: string;

  /**
   * List of plugins to enable in addition to essential plugins: rabbitmq_management, rabbitmq_prometheus, and rabbitmq_peer_discovery_k8s.
   *
   * @schema RabbitmqClusterSpecRabbitmq#additionalPlugins
   */
  readonly additionalPlugins?: string[];

  /**
   * Specify any rabbitmq advanced.config configurations to apply to the cluster.
   * For more information on advanced config, see https://www.rabbitmq.com/configure.html#advanced-config-file
   *
   * @schema RabbitmqClusterSpecRabbitmq#advancedConfig
   */
  readonly advancedConfig?: string;

  /**
   * Modify to add to the rabbitmq-env.conf file. Modifying this property on an existing RabbitmqCluster will trigger a StatefulSet rolling restart and will cause rabbitmq downtime.
   * For more information on env config, see https://www.rabbitmq.com/man/rabbitmq-env.conf.5.html
   *
   * @schema RabbitmqClusterSpecRabbitmq#envConfig
   */
  readonly envConfig?: string;

  /**
   * Erlang Inet configuration to apply to the Erlang VM running rabbit.
   * See also: https://www.erlang.org/doc/apps/erts/inet_cfg.html
   *
   * @schema RabbitmqClusterSpecRabbitmq#erlangInetConfig
   */
  readonly erlangInetConfig?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecRabbitmq' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecRabbitmq(obj: RabbitmqClusterSpecRabbitmq | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'additionalConfig': obj.additionalConfig,
    'additionalPlugins': obj.additionalPlugins?.map(y => y),
    'advancedConfig': obj.advancedConfig,
    'envConfig': obj.envConfig,
    'erlangInetConfig': obj.erlangInetConfig,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The desired compute resource requirements of Pods in the cluster.
 *
 * @schema RabbitmqClusterSpecResources
 */
export interface RabbitmqClusterSpecResources {
  /**
   * Claims lists the names of resources, defined in spec.resourceClaims,
   * that are used by this container.
   *
   * This is an alpha field and requires enabling the
   * DynamicResourceAllocation feature gate.
   *
   * This field is immutable. It can only be set for containers.
   *
   * @schema RabbitmqClusterSpecResources#claims
   */
  readonly claims?: RabbitmqClusterSpecResourcesClaims[];

  /**
   * Limits describes the maximum amount of compute resources allowed.
   * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
   *
   * @schema RabbitmqClusterSpecResources#limits
   */
  readonly limits?: { [key: string]: RabbitmqClusterSpecResourcesLimits };

  /**
   * Requests describes the minimum amount of compute resources required.
   * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
   * otherwise to an implementation-defined value. Requests cannot exceed Limits.
   * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
   *
   * @schema RabbitmqClusterSpecResources#requests
   */
  readonly requests?: { [key: string]: RabbitmqClusterSpecResourcesRequests };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecResources(obj: RabbitmqClusterSpecResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'claims': obj.claims?.map(y => toJson_RabbitmqClusterSpecResourcesClaims(y)),
    'limits': ((obj.limits) === undefined) ? undefined : (Object.entries(obj.limits).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
    'requests': ((obj.requests) === undefined) ? undefined : (Object.entries(obj.requests).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Secret backend configuration for the RabbitmqCluster.
 * Enables to fetch default user credentials and certificates from K8s external secret stores.
 *
 * @schema RabbitmqClusterSpecSecretBackend
 */
export interface RabbitmqClusterSpecSecretBackend {
  /**
   * LocalObjectReference contains enough information to let you locate the
   * referenced object inside the same namespace.
   *
   * @schema RabbitmqClusterSpecSecretBackend#externalSecret
   */
  readonly externalSecret?: RabbitmqClusterSpecSecretBackendExternalSecret;

  /**
   * VaultSpec will add Vault annotations (see https://www.vaultproject.io/docs/platform/k8s/injector/annotations)
   * to RabbitMQ Pods. It requires a Vault Agent Sidecar Injector (https://www.vaultproject.io/docs/platform/k8s/injector)
   * to be installed in the K8s cluster. The injector is a K8s Mutation Webhook Controller that alters RabbitMQ Pod specifications
   * (based on the added Vault annotations) to include Vault Agent containers that render Vault secrets to the volume.
   *
   * @schema RabbitmqClusterSpecSecretBackend#vault
   */
  readonly vault?: RabbitmqClusterSpecSecretBackendVault;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecSecretBackend' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecSecretBackend(obj: RabbitmqClusterSpecSecretBackend | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'externalSecret': toJson_RabbitmqClusterSpecSecretBackendExternalSecret(obj.externalSecret),
    'vault': toJson_RabbitmqClusterSpecSecretBackendVault(obj.vault),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The desired state of the Kubernetes Service to create for the cluster.
 *
 * @schema RabbitmqClusterSpecService
 */
export interface RabbitmqClusterSpecService {
  /**
   * Annotations to add to the Service.
   *
   * @schema RabbitmqClusterSpecService#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * IPFamilyPolicy represents the dual-stack-ness requested or required by a Service
   * See also: https://pkg.go.dev/k8s.io/api/core/v1#IPFamilyPolicy
   *
   * @schema RabbitmqClusterSpecService#ipFamilyPolicy
   */
  readonly ipFamilyPolicy?: RabbitmqClusterSpecServiceIpFamilyPolicy;

  /**
   * Type of Service to create for the cluster. Must be one of: ClusterIP, LoadBalancer, NodePort.
   * For more info see https://pkg.go.dev/k8s.io/api/core/v1#ServiceType
   *
   * @schema RabbitmqClusterSpecService#type
   */
  readonly type?: RabbitmqClusterSpecServiceType;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecService' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecService(obj: RabbitmqClusterSpecService | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'ipFamilyPolicy': obj.ipFamilyPolicy,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TLS-related configuration for the RabbitMQ cluster.
 *
 * @schema RabbitmqClusterSpecTls
 */
export interface RabbitmqClusterSpecTls {
  /**
   * Name of a Secret in the same Namespace as the RabbitmqCluster, containing the Certificate Authority's public certificate for TLS.
   * The Secret must store this as ca.crt.
   * This Secret can be created by running `kubectl create secret generic ca-secret --from-file=ca.crt=path/to/ca.cert`
   * Used for mTLS, and TLS for rabbitmq_web_stomp and rabbitmq_web_mqtt.
   *
   * @schema RabbitmqClusterSpecTls#caSecretName
   */
  readonly caSecretName?: string;

  /**
   * When set to true, the RabbitmqCluster disables non-TLS listeners for RabbitMQ, management plugin and for any enabled plugins in the following list: stomp, mqtt, web_stomp, web_mqtt.
   * Only TLS-enabled clients will be able to connect.
   *
   * @schema RabbitmqClusterSpecTls#disableNonTLSListeners
   */
  readonly disableNonTlsListeners?: boolean;

  /**
   * Name of a Secret in the same Namespace as the RabbitmqCluster, containing the server's private key & public certificate for TLS.
   * The Secret must store these as tls.key and tls.crt, respectively.
   * This Secret can be created by running `kubectl create secret tls tls-secret --cert=path/to/tls.cert --key=path/to/tls.key`
   *
   * @schema RabbitmqClusterSpecTls#secretName
   */
  readonly secretName?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecTls(obj: RabbitmqClusterSpecTls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'caSecretName': obj.caSecretName,
    'disableNonTLSListeners': obj.disableNonTlsListeners,
    'secretName': obj.secretName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The pod this Toleration is attached to tolerates any taint that matches
 * the triple <key,value,effect> using the matching operator <operator>.
 *
 * @schema RabbitmqClusterSpecTolerations
 */
export interface RabbitmqClusterSpecTolerations {
  /**
   * Effect indicates the taint effect to match. Empty means match all taint effects.
   * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
   *
   * @schema RabbitmqClusterSpecTolerations#effect
   */
  readonly effect?: string;

  /**
   * Key is the taint key that the toleration applies to. Empty means match all taint keys.
   * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
   *
   * @schema RabbitmqClusterSpecTolerations#key
   */
  readonly key?: string;

  /**
   * Operator represents a key's relationship to the value.
   * Valid operators are Exists and Equal. Defaults to Equal.
   * Exists is equivalent to wildcard for value, so that a pod can
   * tolerate all taints of a particular category.
   *
   * @default Equal.
   * @schema RabbitmqClusterSpecTolerations#operator
   */
  readonly operator?: string;

  /**
   * TolerationSeconds represents the period of time the toleration (which must be
   * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
   * it is not set, which means tolerate the taint forever (do not evict). Zero and
   * negative values will be treated as 0 (evict immediately) by the system.
   *
   * @schema RabbitmqClusterSpecTolerations#tolerationSeconds
   */
  readonly tolerationSeconds?: number;

  /**
   * Value is the taint value the toleration matches to.
   * If the operator is Exists, the value should be empty, otherwise just a regular string.
   *
   * @schema RabbitmqClusterSpecTolerations#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecTolerations' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecTolerations(obj: RabbitmqClusterSpecTolerations | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'effect': obj.effect,
    'key': obj.key,
    'operator': obj.operator,
    'tolerationSeconds': obj.tolerationSeconds,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes node affinity scheduling rules for the pod.
 *
 * @schema RabbitmqClusterSpecAffinityNodeAffinity
 */
export interface RabbitmqClusterSpecAffinityNodeAffinity {
  /**
   * The scheduler will prefer to schedule pods to nodes that satisfy
   * the affinity expressions specified by this field, but it may choose
   * a node that violates one or more of the expressions. The node that is
   * most preferred is the one with the greatest sum of weights, i.e.
   * for each node that meets all of the scheduling requirements (resource
   * request, requiredDuringScheduling affinity expressions, etc.),
   * compute a sum by iterating through the elements of this field and adding
   * "weight" to the sum if the node matches the corresponding matchExpressions; the
   * node(s) with the highest sum are the most preferred.
   *
   * @schema RabbitmqClusterSpecAffinityNodeAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * If the affinity requirements specified by this field are not met at
   * scheduling time, the pod will not be scheduled onto the node.
   * If the affinity requirements specified by this field cease to be met
   * at some point during pod execution (e.g. due to an update), the system
   * may or may not try to eventually evict the pod from its node.
   *
   * @schema RabbitmqClusterSpecAffinityNodeAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityNodeAffinity' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityNodeAffinity(obj: RabbitmqClusterSpecAffinityNodeAffinity | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'preferredDuringSchedulingIgnoredDuringExecution': obj.preferredDuringSchedulingIgnoredDuringExecution?.map(y => toJson_RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution(y)),
    'requiredDuringSchedulingIgnoredDuringExecution': toJson_RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(obj.requiredDuringSchedulingIgnoredDuringExecution),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
 *
 * @schema RabbitmqClusterSpecAffinityPodAffinity
 */
export interface RabbitmqClusterSpecAffinityPodAffinity {
  /**
   * The scheduler will prefer to schedule pods to nodes that satisfy
   * the affinity expressions specified by this field, but it may choose
   * a node that violates one or more of the expressions. The node that is
   * most preferred is the one with the greatest sum of weights, i.e.
   * for each node that meets all of the scheduling requirements (resource
   * request, requiredDuringScheduling affinity expressions, etc.),
   * compute a sum by iterating through the elements of this field and adding
   * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
   * node(s) with the highest sum are the most preferred.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * If the affinity requirements specified by this field are not met at
   * scheduling time, the pod will not be scheduled onto the node.
   * If the affinity requirements specified by this field cease to be met
   * at some point during pod execution (e.g. due to a pod label update), the
   * system may or may not try to eventually evict the pod from its node.
   * When there are multiple elements, the lists of nodes corresponding to each
   * podAffinityTerm are intersected, i.e. all terms must be satisfied.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityPodAffinity' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityPodAffinity(obj: RabbitmqClusterSpecAffinityPodAffinity | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'preferredDuringSchedulingIgnoredDuringExecution': obj.preferredDuringSchedulingIgnoredDuringExecution?.map(y => toJson_RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution(y)),
    'requiredDuringSchedulingIgnoredDuringExecution': obj.requiredDuringSchedulingIgnoredDuringExecution?.map(y => toJson_RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
 *
 * @schema RabbitmqClusterSpecAffinityPodAntiAffinity
 */
export interface RabbitmqClusterSpecAffinityPodAntiAffinity {
  /**
   * The scheduler will prefer to schedule pods to nodes that satisfy
   * the anti-affinity expressions specified by this field, but it may choose
   * a node that violates one or more of the expressions. The node that is
   * most preferred is the one with the greatest sum of weights, i.e.
   * for each node that meets all of the scheduling requirements (resource
   * request, requiredDuringScheduling anti-affinity expressions, etc.),
   * compute a sum by iterating through the elements of this field and adding
   * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
   * node(s) with the highest sum are the most preferred.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * If the anti-affinity requirements specified by this field are not met at
   * scheduling time, the pod will not be scheduled onto the node.
   * If the anti-affinity requirements specified by this field cease to be met
   * at some point during pod execution (e.g. due to a pod label update), the
   * system may or may not try to eventually evict the pod from its node.
   * When there are multiple elements, the lists of nodes corresponding to each
   * podAffinityTerm are intersected, i.e. all terms must be satisfied.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityPodAntiAffinity' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityPodAntiAffinity(obj: RabbitmqClusterSpecAffinityPodAntiAffinity | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'preferredDuringSchedulingIgnoredDuringExecution': obj.preferredDuringSchedulingIgnoredDuringExecution?.map(y => toJson_RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution(y)),
    'requiredDuringSchedulingIgnoredDuringExecution': obj.requiredDuringSchedulingIgnoredDuringExecution?.map(y => toJson_RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideService
 */
export interface RabbitmqClusterSpecOverrideService {
  /**
   * @schema RabbitmqClusterSpecOverrideService#metadata
   */
  readonly metadata?: RabbitmqClusterSpecOverrideServiceMetadata;

  /**
   * @schema RabbitmqClusterSpecOverrideService#spec
   */
  readonly spec?: RabbitmqClusterSpecOverrideServiceSpec;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideService' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideService(obj: RabbitmqClusterSpecOverrideService | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': toJson_RabbitmqClusterSpecOverrideServiceMetadata(obj.metadata),
    'spec': toJson_RabbitmqClusterSpecOverrideServiceSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSet
 */
export interface RabbitmqClusterSpecOverrideStatefulSet {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSet#metadata
   */
  readonly metadata?: RabbitmqClusterSpecOverrideStatefulSetMetadata;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSet#spec
   */
  readonly spec?: RabbitmqClusterSpecOverrideStatefulSetSpec;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSet(obj: RabbitmqClusterSpecOverrideStatefulSet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': toJson_RabbitmqClusterSpecOverrideStatefulSetMetadata(obj.metadata),
    'spec': toJson_RabbitmqClusterSpecOverrideStatefulSetSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The requested size of the persistent volume attached to each Pod in the RabbitmqCluster.
 * The format of this field matches that defined by kubernetes/apimachinery.
 * See https://pkg.go.dev/k8s.io/apimachinery/pkg/api/resource#Quantity for more info on the format of this field.
 *
 * @schema RabbitmqClusterSpecPersistenceStorage
 */
export class RabbitmqClusterSpecPersistenceStorage {
  public static fromNumber(value: number): RabbitmqClusterSpecPersistenceStorage {
    return new RabbitmqClusterSpecPersistenceStorage(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecPersistenceStorage {
    return new RabbitmqClusterSpecPersistenceStorage(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * ResourceClaim references one entry in PodSpec.ResourceClaims.
 *
 * @schema RabbitmqClusterSpecResourcesClaims
 */
export interface RabbitmqClusterSpecResourcesClaims {
  /**
   * Name must match the name of one entry in pod.spec.resourceClaims of
   * the Pod where this field is used. It makes that resource available
   * inside a container.
   *
   * @schema RabbitmqClusterSpecResourcesClaims#name
   */
  readonly name: string;

  /**
   * Request is the name chosen for a request in the referenced claim.
   * If empty, everything from the claim is made available, otherwise
   * only the result of this request.
   *
   * @schema RabbitmqClusterSpecResourcesClaims#request
   */
  readonly request?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecResourcesClaims' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecResourcesClaims(obj: RabbitmqClusterSpecResourcesClaims | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'request': obj.request,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecResourcesLimits
 */
export class RabbitmqClusterSpecResourcesLimits {
  public static fromNumber(value: number): RabbitmqClusterSpecResourcesLimits {
    return new RabbitmqClusterSpecResourcesLimits(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecResourcesLimits {
    return new RabbitmqClusterSpecResourcesLimits(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecResourcesRequests
 */
export class RabbitmqClusterSpecResourcesRequests {
  public static fromNumber(value: number): RabbitmqClusterSpecResourcesRequests {
    return new RabbitmqClusterSpecResourcesRequests(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecResourcesRequests {
    return new RabbitmqClusterSpecResourcesRequests(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * LocalObjectReference contains enough information to let you locate the
 * referenced object inside the same namespace.
 *
 * @schema RabbitmqClusterSpecSecretBackendExternalSecret
 */
export interface RabbitmqClusterSpecSecretBackendExternalSecret {
  /**
   * Name of the referent.
   * This field is effectively required, but due to backwards compatibility is
   * allowed to be empty. Instances of this type with an empty value here are
   * almost certainly wrong.
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema RabbitmqClusterSpecSecretBackendExternalSecret#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecSecretBackendExternalSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecSecretBackendExternalSecret(obj: RabbitmqClusterSpecSecretBackendExternalSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * VaultSpec will add Vault annotations (see https://www.vaultproject.io/docs/platform/k8s/injector/annotations)
 * to RabbitMQ Pods. It requires a Vault Agent Sidecar Injector (https://www.vaultproject.io/docs/platform/k8s/injector)
 * to be installed in the K8s cluster. The injector is a K8s Mutation Webhook Controller that alters RabbitMQ Pod specifications
 * (based on the added Vault annotations) to include Vault Agent containers that render Vault secrets to the volume.
 *
 * @schema RabbitmqClusterSpecSecretBackendVault
 */
export interface RabbitmqClusterSpecSecretBackendVault {
  /**
   * Vault annotations that override the Vault annotations set by the cluster-operator.
   * For a list of valid Vault annotations, see https://www.vaultproject.io/docs/platform/k8s/injector/annotations
   *
   * @schema RabbitmqClusterSpecSecretBackendVault#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Path in Vault to access a KV (Key-Value) secret with the fields username and password for the default user.
   * For example "secret/data/rabbitmq/config".
   *
   * @schema RabbitmqClusterSpecSecretBackendVault#defaultUserPath
   */
  readonly defaultUserPath?: string;

  /**
   * Sidecar container that updates the default user's password in RabbitMQ when it changes in Vault.
   * Additionally, it updates /var/lib/rabbitmq/.rabbitmqadmin.conf (used by rabbitmqadmin CLI).
   * Set to empty string to disable the sidecar container.
   *
   * @schema RabbitmqClusterSpecSecretBackendVault#defaultUserUpdaterImage
   */
  readonly defaultUserUpdaterImage?: string;

  /**
   * Role in Vault.
   * If vault.defaultUserPath is set, this role must have capability to read the pre-created default user credential in Vault.
   * If vault.tls is set, this role must have capability to create and update certificates in the Vault PKI engine for the domains
   * "<namespace>" and "<namespace>.svc".
   *
   * @schema RabbitmqClusterSpecSecretBackendVault#role
   */
  readonly role?: string;

  /**
   * @schema RabbitmqClusterSpecSecretBackendVault#tls
   */
  readonly tls?: RabbitmqClusterSpecSecretBackendVaultTls;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecSecretBackendVault' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecSecretBackendVault(obj: RabbitmqClusterSpecSecretBackendVault | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'defaultUserPath': obj.defaultUserPath,
    'defaultUserUpdaterImage': obj.defaultUserUpdaterImage,
    'role': obj.role,
    'tls': toJson_RabbitmqClusterSpecSecretBackendVaultTls(obj.tls),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * IPFamilyPolicy represents the dual-stack-ness requested or required by a Service
 * See also: https://pkg.go.dev/k8s.io/api/core/v1#IPFamilyPolicy
 *
 * @schema RabbitmqClusterSpecServiceIpFamilyPolicy
 */
export enum RabbitmqClusterSpecServiceIpFamilyPolicy {
  /** SingleStack */
  SINGLE_STACK = "SingleStack",
  /** PreferDualStack */
  PREFER_DUAL_STACK = "PreferDualStack",
  /** RequireDualStack */
  REQUIRE_DUAL_STACK = "RequireDualStack",
}

/**
 * Type of Service to create for the cluster. Must be one of: ClusterIP, LoadBalancer, NodePort.
 * For more info see https://pkg.go.dev/k8s.io/api/core/v1#ServiceType
 *
 * @schema RabbitmqClusterSpecServiceType
 */
export enum RabbitmqClusterSpecServiceType {
  /** ClusterIP */
  CLUSTER_IP = "ClusterIP",
  /** LoadBalancer */
  LOAD_BALANCER = "LoadBalancer",
  /** NodePort */
  NODE_PORT = "NodePort",
}

/**
 * An empty preferred scheduling term matches all objects with implicit weight 0
 * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
 *
 * @schema RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * A node selector term, associated with the corresponding weight.
   *
   * @schema RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution#preference
   */
  readonly preference: RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;

  /**
   * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
   *
   * @schema RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight: number;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution(obj: RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'preference': toJson_RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference(obj.preference),
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * If the affinity requirements specified by this field are not met at
 * scheduling time, the pod will not be scheduled onto the node.
 * If the affinity requirements specified by this field cease to be met
 * at some point during pod execution (e.g. due to an update), the system
 * may or may not try to eventually evict the pod from its node.
 *
 * @schema RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * Required. A list of node selector terms. The terms are ORed.
   *
   * @schema RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution#nodeSelectorTerms
   */
  readonly nodeSelectorTerms: RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(obj: RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'nodeSelectorTerms': obj.nodeSelectorTerms?.map(y => toJson_RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
 *
 * @schema RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * Required. A pod affinity term, associated with the corresponding weight.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution#podAffinityTerm
   */
  readonly podAffinityTerm: RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;

  /**
   * weight associated with matching the corresponding podAffinityTerm,
   * in the range 1-100.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight: number;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution(obj: RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'podAffinityTerm': toJson_RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(obj.podAffinityTerm),
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Defines a set of pods (namely those matching the labelSelector
 * relative to the given namespace(s)) that this pod should be
 * co-located (affinity) or not co-located (anti-affinity) with,
 * where co-located is defined as running on a node whose value of
 * the label with key <topologyKey> matches that of any node on which
 * a pod of the set of pods is running
 *
 * @schema RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * A label query over a set of resources, in this case pods.
   * If it's null, this PodAffinityTerm matches with no Pods.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#labelSelector
   */
  readonly labelSelector?: RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;

  /**
   * MatchLabelKeys is a set of pod label keys to select which pods will
   * be taken into consideration. The keys are used to lookup values from the
   * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
   * to select the group of existing pods which pods will be taken into consideration
   * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
   * pod labels will be ignored. The default value is empty.
   * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
   * Also, matchLabelKeys cannot be set when labelSelector isn't set.
   * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#matchLabelKeys
   */
  readonly matchLabelKeys?: string[];

  /**
   * MismatchLabelKeys is a set of pod label keys to select which pods will
   * be taken into consideration. The keys are used to lookup values from the
   * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
   * to select the group of existing pods which pods will be taken into consideration
   * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
   * pod labels will be ignored. The default value is empty.
   * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
   * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
   * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#mismatchLabelKeys
   */
  readonly mismatchLabelKeys?: string[];

  /**
   * A label query over the set of namespaces that the term applies to.
   * The term is applied to the union of the namespaces selected by this field
   * and the ones listed in the namespaces field.
   * null selector and null or empty namespaces list means "this pod's namespace".
   * An empty selector ({}) matches all namespaces.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaceSelector
   */
  readonly namespaceSelector?: RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;

  /**
   * namespaces specifies a static list of namespace names that the term applies to.
   * The term is applied to the union of the namespaces listed in this field
   * and the ones selected by namespaceSelector.
   * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaces
   */
  readonly namespaces?: string[];

  /**
   * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
   * the labelSelector in the specified namespaces, where co-located is defined as running on a node
   * whose value of the label with key topologyKey matches that of any node on which any of the
   * selected pods is running.
   * Empty topologyKey is not allowed.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#topologyKey
   */
  readonly topologyKey: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution(obj: RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'labelSelector': toJson_RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(obj.labelSelector),
    'matchLabelKeys': obj.matchLabelKeys?.map(y => y),
    'mismatchLabelKeys': obj.mismatchLabelKeys?.map(y => y),
    'namespaceSelector': toJson_RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector(obj.namespaceSelector),
    'namespaces': obj.namespaces?.map(y => y),
    'topologyKey': obj.topologyKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
 *
 * @schema RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * Required. A pod affinity term, associated with the corresponding weight.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution#podAffinityTerm
   */
  readonly podAffinityTerm: RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;

  /**
   * weight associated with matching the corresponding podAffinityTerm,
   * in the range 1-100.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight: number;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution(obj: RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'podAffinityTerm': toJson_RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(obj.podAffinityTerm),
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Defines a set of pods (namely those matching the labelSelector
 * relative to the given namespace(s)) that this pod should be
 * co-located (affinity) or not co-located (anti-affinity) with,
 * where co-located is defined as running on a node whose value of
 * the label with key <topologyKey> matches that of any node on which
 * a pod of the set of pods is running
 *
 * @schema RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * A label query over a set of resources, in this case pods.
   * If it's null, this PodAffinityTerm matches with no Pods.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#labelSelector
   */
  readonly labelSelector?: RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;

  /**
   * MatchLabelKeys is a set of pod label keys to select which pods will
   * be taken into consideration. The keys are used to lookup values from the
   * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
   * to select the group of existing pods which pods will be taken into consideration
   * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
   * pod labels will be ignored. The default value is empty.
   * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
   * Also, matchLabelKeys cannot be set when labelSelector isn't set.
   * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#matchLabelKeys
   */
  readonly matchLabelKeys?: string[];

  /**
   * MismatchLabelKeys is a set of pod label keys to select which pods will
   * be taken into consideration. The keys are used to lookup values from the
   * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
   * to select the group of existing pods which pods will be taken into consideration
   * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
   * pod labels will be ignored. The default value is empty.
   * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
   * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
   * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#mismatchLabelKeys
   */
  readonly mismatchLabelKeys?: string[];

  /**
   * A label query over the set of namespaces that the term applies to.
   * The term is applied to the union of the namespaces selected by this field
   * and the ones listed in the namespaces field.
   * null selector and null or empty namespaces list means "this pod's namespace".
   * An empty selector ({}) matches all namespaces.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaceSelector
   */
  readonly namespaceSelector?: RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;

  /**
   * namespaces specifies a static list of namespace names that the term applies to.
   * The term is applied to the union of the namespaces listed in this field
   * and the ones selected by namespaceSelector.
   * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaces
   */
  readonly namespaces?: string[];

  /**
   * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
   * the labelSelector in the specified namespaces, where co-located is defined as running on a node
   * whose value of the label with key topologyKey matches that of any node on which any of the
   * selected pods is running.
   * Empty topologyKey is not allowed.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#topologyKey
   */
  readonly topologyKey: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution(obj: RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'labelSelector': toJson_RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(obj.labelSelector),
    'matchLabelKeys': obj.matchLabelKeys?.map(y => y),
    'mismatchLabelKeys': obj.mismatchLabelKeys?.map(y => y),
    'namespaceSelector': toJson_RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector(obj.namespaceSelector),
    'namespaces': obj.namespaces?.map(y => y),
    'topologyKey': obj.topologyKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideServiceMetadata
 */
export interface RabbitmqClusterSpecOverrideServiceMetadata {
  /**
   * @schema RabbitmqClusterSpecOverrideServiceMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema RabbitmqClusterSpecOverrideServiceMetadata#labels
   */
  readonly labels?: { [key: string]: string };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideServiceMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideServiceMetadata(obj: RabbitmqClusterSpecOverrideServiceMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideServiceSpec
 */
export interface RabbitmqClusterSpecOverrideServiceSpec {
  /**
   * @schema RabbitmqClusterSpecOverrideServiceSpec#allocateLoadBalancerNodePorts
   */
  readonly allocateLoadBalancerNodePorts?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideServiceSpec#clusterIP
   */
  readonly clusterIp?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideServiceSpec#clusterIPs
   */
  readonly clusterIPs?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideServiceSpec#externalIPs
   */
  readonly externalIPs?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideServiceSpec#externalName
   */
  readonly externalName?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideServiceSpec#externalTrafficPolicy
   */
  readonly externalTrafficPolicy?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideServiceSpec#healthCheckNodePort
   */
  readonly healthCheckNodePort?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideServiceSpec#internalTrafficPolicy
   */
  readonly internalTrafficPolicy?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideServiceSpec#ipFamilies
   */
  readonly ipFamilies?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideServiceSpec#ipFamilyPolicy
   */
  readonly ipFamilyPolicy?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideServiceSpec#loadBalancerClass
   */
  readonly loadBalancerClass?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideServiceSpec#loadBalancerIP
   */
  readonly loadBalancerIp?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideServiceSpec#loadBalancerSourceRanges
   */
  readonly loadBalancerSourceRanges?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideServiceSpec#ports
   */
  readonly ports?: RabbitmqClusterSpecOverrideServiceSpecPorts[];

  /**
   * @schema RabbitmqClusterSpecOverrideServiceSpec#publishNotReadyAddresses
   */
  readonly publishNotReadyAddresses?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideServiceSpec#selector
   */
  readonly selector?: { [key: string]: string };

  /**
   * @schema RabbitmqClusterSpecOverrideServiceSpec#sessionAffinity
   */
  readonly sessionAffinity?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideServiceSpec#sessionAffinityConfig
   */
  readonly sessionAffinityConfig?: RabbitmqClusterSpecOverrideServiceSpecSessionAffinityConfig;

  /**
   * @schema RabbitmqClusterSpecOverrideServiceSpec#trafficDistribution
   */
  readonly trafficDistribution?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideServiceSpec#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideServiceSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideServiceSpec(obj: RabbitmqClusterSpecOverrideServiceSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allocateLoadBalancerNodePorts': obj.allocateLoadBalancerNodePorts,
    'clusterIP': obj.clusterIp,
    'clusterIPs': obj.clusterIPs?.map(y => y),
    'externalIPs': obj.externalIPs?.map(y => y),
    'externalName': obj.externalName,
    'externalTrafficPolicy': obj.externalTrafficPolicy,
    'healthCheckNodePort': obj.healthCheckNodePort,
    'internalTrafficPolicy': obj.internalTrafficPolicy,
    'ipFamilies': obj.ipFamilies?.map(y => y),
    'ipFamilyPolicy': obj.ipFamilyPolicy,
    'loadBalancerClass': obj.loadBalancerClass,
    'loadBalancerIP': obj.loadBalancerIp,
    'loadBalancerSourceRanges': obj.loadBalancerSourceRanges?.map(y => y),
    'ports': obj.ports?.map(y => toJson_RabbitmqClusterSpecOverrideServiceSpecPorts(y)),
    'publishNotReadyAddresses': obj.publishNotReadyAddresses,
    'selector': ((obj.selector) === undefined) ? undefined : (Object.entries(obj.selector).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'sessionAffinity': obj.sessionAffinity,
    'sessionAffinityConfig': toJson_RabbitmqClusterSpecOverrideServiceSpecSessionAffinityConfig(obj.sessionAffinityConfig),
    'trafficDistribution': obj.trafficDistribution,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetMetadata
 */
export interface RabbitmqClusterSpecOverrideStatefulSetMetadata {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetMetadata#labels
   */
  readonly labels?: { [key: string]: string };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetMetadata(obj: RabbitmqClusterSpecOverrideStatefulSetMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpec
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpec {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpec#minReadySeconds
   */
  readonly minReadySeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpec#persistentVolumeClaimRetentionPolicy
   */
  readonly persistentVolumeClaimRetentionPolicy?: RabbitmqClusterSpecOverrideStatefulSetSpecPersistentVolumeClaimRetentionPolicy;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpec#podManagementPolicy
   */
  readonly podManagementPolicy?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpec#replicas
   */
  readonly replicas?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpec#selector
   */
  readonly selector?: RabbitmqClusterSpecOverrideStatefulSetSpecSelector;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpec#serviceName
   */
  readonly serviceName?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpec#template
   */
  readonly template?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplate;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpec#updateStrategy
   */
  readonly updateStrategy?: RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategy;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpec#volumeClaimTemplates
   */
  readonly volumeClaimTemplates?: RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplates[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpec(obj: RabbitmqClusterSpecOverrideStatefulSetSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'minReadySeconds': obj.minReadySeconds,
    'persistentVolumeClaimRetentionPolicy': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecPersistentVolumeClaimRetentionPolicy(obj.persistentVolumeClaimRetentionPolicy),
    'podManagementPolicy': obj.podManagementPolicy,
    'replicas': obj.replicas,
    'selector': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecSelector(obj.selector),
    'serviceName': obj.serviceName,
    'template': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplate(obj.template),
    'updateStrategy': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategy(obj.updateStrategy),
    'volumeClaimTemplates': obj.volumeClaimTemplates?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplates(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecSecretBackendVaultTls
 */
export interface RabbitmqClusterSpecSecretBackendVaultTls {
  /**
   * Specifies the requested Subject Alternative Names (SANs), in a comma-delimited list.
   * These will be appended to the SANs added by the cluster-operator.
   * The cluster-operator will add SANs:
   * "<RabbitmqCluster name>-server-<index>.<RabbitmqCluster name>-nodes.<namespace>" for each pod,
   * e.g. "myrabbit-server-0.myrabbit-nodes.default".
   *
   * @schema RabbitmqClusterSpecSecretBackendVaultTls#altNames
   */
  readonly altNames?: string;

  /**
   * Specifies the requested certificate Common Name (CN).
   * Defaults to <serviceName>.<namespace>.svc if not provided.
   *
   * @default serviceName>.<namespace>.svc if not provided.
   * @schema RabbitmqClusterSpecSecretBackendVaultTls#commonName
   */
  readonly commonName?: string;

  /**
   * Specifies the requested IP Subject Alternative Names, in a comma-delimited list.
   *
   * @schema RabbitmqClusterSpecSecretBackendVaultTls#ipSans
   */
  readonly ipSans?: string;

  /**
   * Path in Vault PKI engine.
   * For example "pki/issue/hashicorp-com".
   * required
   *
   * @schema RabbitmqClusterSpecSecretBackendVaultTls#pkiIssuerPath
   */
  readonly pkiIssuerPath?: string;

  /**
   * Specifies an optional path to retrieve the root CA from vault.  Useful if certificates are issued by an intermediate CA
   *
   * @schema RabbitmqClusterSpecSecretBackendVaultTls#pkiRootPath
   */
  readonly pkiRootPath?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecSecretBackendVaultTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecSecretBackendVaultTls(obj: RabbitmqClusterSpecSecretBackendVaultTls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'altNames': obj.altNames,
    'commonName': obj.commonName,
    'ipSans': obj.ipSans,
    'pkiIssuerPath': obj.pkiIssuerPath,
    'pkiRootPath': obj.pkiRootPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A node selector term, associated with the corresponding weight.
 *
 * @schema RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference
 */
export interface RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
  /**
   * A list of node selector requirements by node's labels.
   *
   * @schema RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference#matchExpressions
   */
  readonly matchExpressions?: RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];

  /**
   * A list of node selector requirements by node's fields.
   *
   * @schema RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference#matchFields
   */
  readonly matchFields?: RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference(obj: RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions(y)),
    'matchFields': obj.matchFields?.map(y => toJson_RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A null or empty node selector term matches no objects. The requirements of
 * them are ANDed.
 * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
 *
 * @schema RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms
 */
export interface RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
  /**
   * A list of node selector requirements by node's labels.
   *
   * @schema RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms#matchExpressions
   */
  readonly matchExpressions?: RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];

  /**
   * A list of node selector requirements by node's fields.
   *
   * @schema RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms#matchFields
   */
  readonly matchFields?: RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms(obj: RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions(y)),
    'matchFields': obj.matchFields?.map(y => toJson_RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Required. A pod affinity term, associated with the corresponding weight.
 *
 * @schema RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm
 */
export interface RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
  /**
   * A label query over a set of resources, in this case pods.
   * If it's null, this PodAffinityTerm matches with no Pods.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#labelSelector
   */
  readonly labelSelector?: RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;

  /**
   * MatchLabelKeys is a set of pod label keys to select which pods will
   * be taken into consideration. The keys are used to lookup values from the
   * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
   * to select the group of existing pods which pods will be taken into consideration
   * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
   * pod labels will be ignored. The default value is empty.
   * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
   * Also, matchLabelKeys cannot be set when labelSelector isn't set.
   * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#matchLabelKeys
   */
  readonly matchLabelKeys?: string[];

  /**
   * MismatchLabelKeys is a set of pod label keys to select which pods will
   * be taken into consideration. The keys are used to lookup values from the
   * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
   * to select the group of existing pods which pods will be taken into consideration
   * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
   * pod labels will be ignored. The default value is empty.
   * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
   * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
   * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#mismatchLabelKeys
   */
  readonly mismatchLabelKeys?: string[];

  /**
   * A label query over the set of namespaces that the term applies to.
   * The term is applied to the union of the namespaces selected by this field
   * and the ones listed in the namespaces field.
   * null selector and null or empty namespaces list means "this pod's namespace".
   * An empty selector ({}) matches all namespaces.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaceSelector
   */
  readonly namespaceSelector?: RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;

  /**
   * namespaces specifies a static list of namespace names that the term applies to.
   * The term is applied to the union of the namespaces listed in this field
   * and the ones selected by namespaceSelector.
   * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaces
   */
  readonly namespaces?: string[];

  /**
   * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
   * the labelSelector in the specified namespaces, where co-located is defined as running on a node
   * whose value of the label with key topologyKey matches that of any node on which any of the
   * selected pods is running.
   * Empty topologyKey is not allowed.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#topologyKey
   */
  readonly topologyKey: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(obj: RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'labelSelector': toJson_RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(obj.labelSelector),
    'matchLabelKeys': obj.matchLabelKeys?.map(y => y),
    'mismatchLabelKeys': obj.mismatchLabelKeys?.map(y => y),
    'namespaceSelector': toJson_RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector(obj.namespaceSelector),
    'namespaces': obj.namespaces?.map(y => y),
    'topologyKey': obj.topologyKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label query over a set of resources, in this case pods.
 * If it's null, this PodAffinityTerm matches with no Pods.
 *
 * @schema RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector
 */
export interface RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchExpressions
   */
  readonly matchExpressions?: RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
   * map is equivalent to an element of matchExpressions, whose key field is "key", the
   * operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(obj: RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label query over the set of namespaces that the term applies to.
 * The term is applied to the union of the namespaces selected by this field
 * and the ones listed in the namespaces field.
 * null selector and null or empty namespaces list means "this pod's namespace".
 * An empty selector ({}) matches all namespaces.
 *
 * @schema RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector
 */
export interface RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector#matchExpressions
   */
  readonly matchExpressions?: RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
   * map is equivalent to an element of matchExpressions, whose key field is "key", the
   * operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector(obj: RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Required. A pod affinity term, associated with the corresponding weight.
 *
 * @schema RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm
 */
export interface RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
  /**
   * A label query over a set of resources, in this case pods.
   * If it's null, this PodAffinityTerm matches with no Pods.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#labelSelector
   */
  readonly labelSelector?: RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;

  /**
   * MatchLabelKeys is a set of pod label keys to select which pods will
   * be taken into consideration. The keys are used to lookup values from the
   * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
   * to select the group of existing pods which pods will be taken into consideration
   * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
   * pod labels will be ignored. The default value is empty.
   * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
   * Also, matchLabelKeys cannot be set when labelSelector isn't set.
   * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#matchLabelKeys
   */
  readonly matchLabelKeys?: string[];

  /**
   * MismatchLabelKeys is a set of pod label keys to select which pods will
   * be taken into consideration. The keys are used to lookup values from the
   * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
   * to select the group of existing pods which pods will be taken into consideration
   * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
   * pod labels will be ignored. The default value is empty.
   * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
   * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
   * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#mismatchLabelKeys
   */
  readonly mismatchLabelKeys?: string[];

  /**
   * A label query over the set of namespaces that the term applies to.
   * The term is applied to the union of the namespaces selected by this field
   * and the ones listed in the namespaces field.
   * null selector and null or empty namespaces list means "this pod's namespace".
   * An empty selector ({}) matches all namespaces.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaceSelector
   */
  readonly namespaceSelector?: RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;

  /**
   * namespaces specifies a static list of namespace names that the term applies to.
   * The term is applied to the union of the namespaces listed in this field
   * and the ones selected by namespaceSelector.
   * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaces
   */
  readonly namespaces?: string[];

  /**
   * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
   * the labelSelector in the specified namespaces, where co-located is defined as running on a node
   * whose value of the label with key topologyKey matches that of any node on which any of the
   * selected pods is running.
   * Empty topologyKey is not allowed.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#topologyKey
   */
  readonly topologyKey: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(obj: RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'labelSelector': toJson_RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(obj.labelSelector),
    'matchLabelKeys': obj.matchLabelKeys?.map(y => y),
    'mismatchLabelKeys': obj.mismatchLabelKeys?.map(y => y),
    'namespaceSelector': toJson_RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector(obj.namespaceSelector),
    'namespaces': obj.namespaces?.map(y => y),
    'topologyKey': obj.topologyKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label query over a set of resources, in this case pods.
 * If it's null, this PodAffinityTerm matches with no Pods.
 *
 * @schema RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector
 */
export interface RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchExpressions
   */
  readonly matchExpressions?: RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
   * map is equivalent to an element of matchExpressions, whose key field is "key", the
   * operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(obj: RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label query over the set of namespaces that the term applies to.
 * The term is applied to the union of the namespaces selected by this field
 * and the ones listed in the namespaces field.
 * null selector and null or empty namespaces list means "this pod's namespace".
 * An empty selector ({}) matches all namespaces.
 *
 * @schema RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector
 */
export interface RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector#matchExpressions
   */
  readonly matchExpressions?: RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
   * map is equivalent to an element of matchExpressions, whose key field is "key", the
   * operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector(obj: RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideServiceSpecPorts
 */
export interface RabbitmqClusterSpecOverrideServiceSpecPorts {
  /**
   * @schema RabbitmqClusterSpecOverrideServiceSpecPorts#appProtocol
   */
  readonly appProtocol?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideServiceSpecPorts#name
   */
  readonly name?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideServiceSpecPorts#nodePort
   */
  readonly nodePort?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideServiceSpecPorts#port
   */
  readonly port: number;

  /**
   * @schema RabbitmqClusterSpecOverrideServiceSpecPorts#protocol
   */
  readonly protocol?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideServiceSpecPorts#targetPort
   */
  readonly targetPort?: RabbitmqClusterSpecOverrideServiceSpecPortsTargetPort;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideServiceSpecPorts' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideServiceSpecPorts(obj: RabbitmqClusterSpecOverrideServiceSpecPorts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'appProtocol': obj.appProtocol,
    'name': obj.name,
    'nodePort': obj.nodePort,
    'port': obj.port,
    'protocol': obj.protocol,
    'targetPort': obj.targetPort?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideServiceSpecSessionAffinityConfig
 */
export interface RabbitmqClusterSpecOverrideServiceSpecSessionAffinityConfig {
  /**
   * @schema RabbitmqClusterSpecOverrideServiceSpecSessionAffinityConfig#clientIP
   */
  readonly clientIp?: RabbitmqClusterSpecOverrideServiceSpecSessionAffinityConfigClientIp;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideServiceSpecSessionAffinityConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideServiceSpecSessionAffinityConfig(obj: RabbitmqClusterSpecOverrideServiceSpecSessionAffinityConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clientIP': toJson_RabbitmqClusterSpecOverrideServiceSpecSessionAffinityConfigClientIp(obj.clientIp),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecPersistentVolumeClaimRetentionPolicy
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecPersistentVolumeClaimRetentionPolicy {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecPersistentVolumeClaimRetentionPolicy#whenDeleted
   */
  readonly whenDeleted?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecPersistentVolumeClaimRetentionPolicy#whenScaled
   */
  readonly whenScaled?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecPersistentVolumeClaimRetentionPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecPersistentVolumeClaimRetentionPolicy(obj: RabbitmqClusterSpecOverrideStatefulSetSpecPersistentVolumeClaimRetentionPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'whenDeleted': obj.whenDeleted,
    'whenScaled': obj.whenScaled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecSelector
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecSelector {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecSelector#matchExpressions
   */
  readonly matchExpressions?: RabbitmqClusterSpecOverrideStatefulSetSpecSelectorMatchExpressions[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecSelector(obj: RabbitmqClusterSpecOverrideStatefulSetSpecSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplate
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplate {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplate#metadata
   */
  readonly metadata?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateMetadata;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplate#spec
   */
  readonly spec?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplate(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateMetadata(obj.metadata),
    'spec': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategy
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategy {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategy#rollingUpdate
   */
  readonly rollingUpdate?: RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategyRollingUpdate;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategy#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategy(obj: RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'rollingUpdate': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategyRollingUpdate(obj.rollingUpdate),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplates
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplates {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplates#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplates#kind
   */
  readonly kind?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplates#metadata
   */
  readonly metadata?: RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesMetadata;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplates#spec
   */
  readonly spec?: RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpec;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplates' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplates(obj: RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplates | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'metadata': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesMetadata(obj.metadata),
    'spec': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A node selector requirement is a selector that contains values, a key, and an operator
 * that relates the key and values.
 *
 * @schema RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions
 */
export interface RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
  /**
   * The label key that the selector applies to.
   *
   * @schema RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#key
   */
  readonly key: string;

  /**
   * Represents a key's relationship to a set of values.
   * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
   *
   * @schema RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * An array of string values. If the operator is In or NotIn,
   * the values array must be non-empty. If the operator is Exists or DoesNotExist,
   * the values array must be empty. If the operator is Gt or Lt, the values
   * array must have a single element, which will be interpreted as an integer.
   * This array is replaced during a strategic merge patch.
   *
   * @schema RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions(obj: RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A node selector requirement is a selector that contains values, a key, and an operator
 * that relates the key and values.
 *
 * @schema RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields
 */
export interface RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
  /**
   * The label key that the selector applies to.
   *
   * @schema RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#key
   */
  readonly key: string;

  /**
   * Represents a key's relationship to a set of values.
   * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
   *
   * @schema RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#operator
   */
  readonly operator: string;

  /**
   * An array of string values. If the operator is In or NotIn,
   * the values array must be non-empty. If the operator is Exists or DoesNotExist,
   * the values array must be empty. If the operator is Gt or Lt, the values
   * array must have a single element, which will be interpreted as an integer.
   * This array is replaced during a strategic merge patch.
   *
   * @schema RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields(obj: RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A node selector requirement is a selector that contains values, a key, and an operator
 * that relates the key and values.
 *
 * @schema RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions
 */
export interface RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
  /**
   * The label key that the selector applies to.
   *
   * @schema RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#key
   */
  readonly key: string;

  /**
   * Represents a key's relationship to a set of values.
   * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
   *
   * @schema RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * An array of string values. If the operator is In or NotIn,
   * the values array must be non-empty. If the operator is Exists or DoesNotExist,
   * the values array must be empty. If the operator is Gt or Lt, the values
   * array must have a single element, which will be interpreted as an integer.
   * This array is replaced during a strategic merge patch.
   *
   * @schema RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions(obj: RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A node selector requirement is a selector that contains values, a key, and an operator
 * that relates the key and values.
 *
 * @schema RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields
 */
export interface RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
  /**
   * The label key that the selector applies to.
   *
   * @schema RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#key
   */
  readonly key: string;

  /**
   * Represents a key's relationship to a set of values.
   * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
   *
   * @schema RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#operator
   */
  readonly operator: string;

  /**
   * An array of string values. If the operator is In or NotIn,
   * the values array must be non-empty. If the operator is Exists or DoesNotExist,
   * the values array must be empty. If the operator is Gt or Lt, the values
   * array must have a single element, which will be interpreted as an integer.
   * This array is replaced during a strategic merge patch.
   *
   * @schema RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields(obj: RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label query over a set of resources, in this case pods.
 * If it's null, this PodAffinityTerm matches with no Pods.
 *
 * @schema RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector
 */
export interface RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchExpressions
   */
  readonly matchExpressions?: RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
   * map is equivalent to an element of matchExpressions, whose key field is "key", the
   * operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(obj: RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label query over the set of namespaces that the term applies to.
 * The term is applied to the union of the namespaces selected by this field
 * and the ones listed in the namespaces field.
 * null selector and null or empty namespaces list means "this pod's namespace".
 * An empty selector ({}) matches all namespaces.
 *
 * @schema RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector
 */
export interface RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector#matchExpressions
   */
  readonly matchExpressions?: RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
   * map is equivalent to an element of matchExpressions, whose key field is "key", the
   * operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector(obj: RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that
 * relates the key and values.
 *
 * @schema RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions
 */
export interface RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values.
   * Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn,
   * the values array must be non-empty. If the operator is Exists or DoesNotExist,
   * the values array must be empty. This array is replaced during a strategic
   * merge patch.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(obj: RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that
 * relates the key and values.
 *
 * @schema RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions
 */
export interface RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values.
   * Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn,
   * the values array must be non-empty. If the operator is Exists or DoesNotExist,
   * the values array must be empty. This array is replaced during a strategic
   * merge patch.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions(obj: RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label query over a set of resources, in this case pods.
 * If it's null, this PodAffinityTerm matches with no Pods.
 *
 * @schema RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector
 */
export interface RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchExpressions
   */
  readonly matchExpressions?: RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
   * map is equivalent to an element of matchExpressions, whose key field is "key", the
   * operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(obj: RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label query over the set of namespaces that the term applies to.
 * The term is applied to the union of the namespaces selected by this field
 * and the ones listed in the namespaces field.
 * null selector and null or empty namespaces list means "this pod's namespace".
 * An empty selector ({}) matches all namespaces.
 *
 * @schema RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector
 */
export interface RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector#matchExpressions
   */
  readonly matchExpressions?: RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
   * map is equivalent to an element of matchExpressions, whose key field is "key", the
   * operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector(obj: RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that
 * relates the key and values.
 *
 * @schema RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions
 */
export interface RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values.
   * Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn,
   * the values array must be non-empty. If the operator is Exists or DoesNotExist,
   * the values array must be empty. This array is replaced during a strategic
   * merge patch.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(obj: RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that
 * relates the key and values.
 *
 * @schema RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions
 */
export interface RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values.
   * Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn,
   * the values array must be non-empty. If the operator is Exists or DoesNotExist,
   * the values array must be empty. This array is replaced during a strategic
   * merge patch.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions(obj: RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideServiceSpecPortsTargetPort
 */
export class RabbitmqClusterSpecOverrideServiceSpecPortsTargetPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideServiceSpecPortsTargetPort {
    return new RabbitmqClusterSpecOverrideServiceSpecPortsTargetPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideServiceSpecPortsTargetPort {
    return new RabbitmqClusterSpecOverrideServiceSpecPortsTargetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideServiceSpecSessionAffinityConfigClientIp
 */
export interface RabbitmqClusterSpecOverrideServiceSpecSessionAffinityConfigClientIp {
  /**
   * @schema RabbitmqClusterSpecOverrideServiceSpecSessionAffinityConfigClientIp#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideServiceSpecSessionAffinityConfigClientIp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideServiceSpecSessionAffinityConfigClientIp(obj: RabbitmqClusterSpecOverrideServiceSpecSessionAffinityConfigClientIp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'timeoutSeconds': obj.timeoutSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecSelectorMatchExpressions
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecSelectorMatchExpressions {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecSelectorMatchExpressions(obj: RabbitmqClusterSpecOverrideStatefulSetSpecSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateMetadata
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateMetadata {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateMetadata#name
   */
  readonly name?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateMetadata#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateMetadata(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#activeDeadlineSeconds
   */
  readonly activeDeadlineSeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#affinity
   */
  readonly affinity?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinity;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#automountServiceAccountToken
   */
  readonly automountServiceAccountToken?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#containers
   */
  readonly containers: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#dnsConfig
   */
  readonly dnsConfig?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecDnsConfig;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#dnsPolicy
   */
  readonly dnsPolicy?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#enableServiceLinks
   */
  readonly enableServiceLinks?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#ephemeralContainers
   */
  readonly ephemeralContainers?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#hostAliases
   */
  readonly hostAliases?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecHostAliases[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#hostIPC
   */
  readonly hostIpc?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#hostNetwork
   */
  readonly hostNetwork?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#hostPID
   */
  readonly hostPid?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#hostUsers
   */
  readonly hostUsers?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#hostname
   */
  readonly hostname?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#imagePullSecrets
   */
  readonly imagePullSecrets?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecImagePullSecrets[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#initContainers
   */
  readonly initContainers?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#nodeName
   */
  readonly nodeName?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#nodeSelector
   */
  readonly nodeSelector?: { [key: string]: string };

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#os
   */
  readonly os?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecOs;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#overhead
   */
  readonly overhead?: { [key: string]: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecOverhead };

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#preemptionPolicy
   */
  readonly preemptionPolicy?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#priority
   */
  readonly priority?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#priorityClassName
   */
  readonly priorityClassName?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#readinessGates
   */
  readonly readinessGates?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecReadinessGates[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#resourceClaims
   */
  readonly resourceClaims?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecResourceClaims[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#restartPolicy
   */
  readonly restartPolicy?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#runtimeClassName
   */
  readonly runtimeClassName?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#schedulerName
   */
  readonly schedulerName?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#schedulingGates
   */
  readonly schedulingGates?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSchedulingGates[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#securityContext
   */
  readonly securityContext?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContext;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#serviceAccount
   */
  readonly serviceAccount?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#serviceAccountName
   */
  readonly serviceAccountName?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#setHostnameAsFQDN
   */
  readonly setHostnameAsFqdn?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#shareProcessNamespace
   */
  readonly shareProcessNamespace?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#subdomain
   */
  readonly subdomain?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#terminationGracePeriodSeconds
   */
  readonly terminationGracePeriodSeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#tolerations
   */
  readonly tolerations?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTolerations[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#topologySpreadConstraints
   */
  readonly topologySpreadConstraints?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraints[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec#volumes
   */
  readonly volumes?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'activeDeadlineSeconds': obj.activeDeadlineSeconds,
    'affinity': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinity(obj.affinity),
    'automountServiceAccountToken': obj.automountServiceAccountToken,
    'containers': obj.containers?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers(y)),
    'dnsConfig': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecDnsConfig(obj.dnsConfig),
    'dnsPolicy': obj.dnsPolicy,
    'enableServiceLinks': obj.enableServiceLinks,
    'ephemeralContainers': obj.ephemeralContainers?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers(y)),
    'hostAliases': obj.hostAliases?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecHostAliases(y)),
    'hostIPC': obj.hostIpc,
    'hostNetwork': obj.hostNetwork,
    'hostPID': obj.hostPid,
    'hostUsers': obj.hostUsers,
    'hostname': obj.hostname,
    'imagePullSecrets': obj.imagePullSecrets?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecImagePullSecrets(y)),
    'initContainers': obj.initContainers?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers(y)),
    'nodeName': obj.nodeName,
    'nodeSelector': ((obj.nodeSelector) === undefined) ? undefined : (Object.entries(obj.nodeSelector).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'os': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecOs(obj.os),
    'overhead': ((obj.overhead) === undefined) ? undefined : (Object.entries(obj.overhead).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
    'preemptionPolicy': obj.preemptionPolicy,
    'priority': obj.priority,
    'priorityClassName': obj.priorityClassName,
    'readinessGates': obj.readinessGates?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecReadinessGates(y)),
    'resourceClaims': obj.resourceClaims?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecResourceClaims(y)),
    'restartPolicy': obj.restartPolicy,
    'runtimeClassName': obj.runtimeClassName,
    'schedulerName': obj.schedulerName,
    'schedulingGates': obj.schedulingGates?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSchedulingGates(y)),
    'securityContext': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContext(obj.securityContext),
    'serviceAccount': obj.serviceAccount,
    'serviceAccountName': obj.serviceAccountName,
    'setHostnameAsFQDN': obj.setHostnameAsFqdn,
    'shareProcessNamespace': obj.shareProcessNamespace,
    'subdomain': obj.subdomain,
    'terminationGracePeriodSeconds': obj.terminationGracePeriodSeconds,
    'tolerations': obj.tolerations?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTolerations(y)),
    'topologySpreadConstraints': obj.topologySpreadConstraints?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraints(y)),
    'volumes': obj.volumes?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategyRollingUpdate
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategyRollingUpdate {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategyRollingUpdate#maxUnavailable
   */
  readonly maxUnavailable?: RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategyRollingUpdateMaxUnavailable;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategyRollingUpdate#partition
   */
  readonly partition?: number;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategyRollingUpdate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategyRollingUpdate(obj: RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategyRollingUpdate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'maxUnavailable': obj.maxUnavailable?.value,
    'partition': obj.partition,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesMetadata
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesMetadata {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesMetadata#name
   */
  readonly name?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesMetadata#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesMetadata(obj: RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpec
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpec {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpec#accessModes
   */
  readonly accessModes?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpec#dataSource
   */
  readonly dataSource?: RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecDataSource;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpec#dataSourceRef
   */
  readonly dataSourceRef?: RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecDataSourceRef;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpec#resources
   */
  readonly resources?: RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResources;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpec#selector
   */
  readonly selector?: RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecSelector;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpec#storageClassName
   */
  readonly storageClassName?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpec#volumeAttributesClassName
   */
  readonly volumeAttributesClassName?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpec#volumeMode
   */
  readonly volumeMode?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpec#volumeName
   */
  readonly volumeName?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpec(obj: RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'accessModes': obj.accessModes?.map(y => y),
    'dataSource': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecDataSource(obj.dataSource),
    'dataSourceRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecDataSourceRef(obj.dataSourceRef),
    'resources': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResources(obj.resources),
    'selector': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecSelector(obj.selector),
    'storageClassName': obj.storageClassName,
    'volumeAttributesClassName': obj.volumeAttributesClassName,
    'volumeMode': obj.volumeMode,
    'volumeName': obj.volumeName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that
 * relates the key and values.
 *
 * @schema RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions
 */
export interface RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values.
   * Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn,
   * the values array must be non-empty. If the operator is Exists or DoesNotExist,
   * the values array must be empty. This array is replaced during a strategic
   * merge patch.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(obj: RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that
 * relates the key and values.
 *
 * @schema RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions
 */
export interface RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values.
   * Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn,
   * the values array must be non-empty. If the operator is Exists or DoesNotExist,
   * the values array must be empty. This array is replaced during a strategic
   * merge patch.
   *
   * @schema RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions(obj: RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that
 * relates the key and values.
 *
 * @schema RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions
 */
export interface RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values.
   * Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn,
   * the values array must be non-empty. If the operator is Exists or DoesNotExist,
   * the values array must be empty. This array is replaced during a strategic
   * merge patch.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(obj: RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that
 * relates the key and values.
 *
 * @schema RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions
 */
export interface RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values.
   * Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn,
   * the values array must be non-empty. If the operator is Exists or DoesNotExist,
   * the values array must be empty. This array is replaced during a strategic
   * merge patch.
   *
   * @schema RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions(obj: RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinity
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinity {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinity#nodeAffinity
   */
  readonly nodeAffinity?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinity;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinity#podAffinity
   */
  readonly podAffinity?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinity;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinity#podAntiAffinity
   */
  readonly podAntiAffinity?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinity;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinity' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinity(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinity | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'nodeAffinity': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinity(obj.nodeAffinity),
    'podAffinity': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinity(obj.podAffinity),
    'podAntiAffinity': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinity(obj.podAntiAffinity),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers#args
   */
  readonly args?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers#command
   */
  readonly command?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers#env
   */
  readonly env?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnv[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers#envFrom
   */
  readonly envFrom?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFrom[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers#image
   */
  readonly image?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers#imagePullPolicy
   */
  readonly imagePullPolicy?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers#lifecycle
   */
  readonly lifecycle?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecycle;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers#livenessProbe
   */
  readonly livenessProbe?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbe;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers#ports
   */
  readonly ports?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersPorts[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers#readinessProbe
   */
  readonly readinessProbe?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbe;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers#resizePolicy
   */
  readonly resizePolicy?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResizePolicy[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers#resources
   */
  readonly resources?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResources;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers#restartPolicy
   */
  readonly restartPolicy?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers#securityContext
   */
  readonly securityContext?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContext;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers#startupProbe
   */
  readonly startupProbe?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbe;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers#stdin
   */
  readonly stdin?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers#stdinOnce
   */
  readonly stdinOnce?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers#terminationMessagePath
   */
  readonly terminationMessagePath?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers#terminationMessagePolicy
   */
  readonly terminationMessagePolicy?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers#tty
   */
  readonly tty?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers#volumeDevices
   */
  readonly volumeDevices?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersVolumeDevices[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers#volumeMounts
   */
  readonly volumeMounts?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersVolumeMounts[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers#workingDir
   */
  readonly workingDir?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'args': obj.args?.map(y => y),
    'command': obj.command?.map(y => y),
    'env': obj.env?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnv(y)),
    'envFrom': obj.envFrom?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFrom(y)),
    'image': obj.image,
    'imagePullPolicy': obj.imagePullPolicy,
    'lifecycle': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecycle(obj.lifecycle),
    'livenessProbe': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbe(obj.livenessProbe),
    'name': obj.name,
    'ports': obj.ports?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersPorts(y)),
    'readinessProbe': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbe(obj.readinessProbe),
    'resizePolicy': obj.resizePolicy?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResizePolicy(y)),
    'resources': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResources(obj.resources),
    'restartPolicy': obj.restartPolicy,
    'securityContext': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContext(obj.securityContext),
    'startupProbe': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbe(obj.startupProbe),
    'stdin': obj.stdin,
    'stdinOnce': obj.stdinOnce,
    'terminationMessagePath': obj.terminationMessagePath,
    'terminationMessagePolicy': obj.terminationMessagePolicy,
    'tty': obj.tty,
    'volumeDevices': obj.volumeDevices?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersVolumeDevices(y)),
    'volumeMounts': obj.volumeMounts?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersVolumeMounts(y)),
    'workingDir': obj.workingDir,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecDnsConfig
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecDnsConfig {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecDnsConfig#nameservers
   */
  readonly nameservers?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecDnsConfig#options
   */
  readonly options?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecDnsConfigOptions[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecDnsConfig#searches
   */
  readonly searches?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecDnsConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecDnsConfig(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecDnsConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'nameservers': obj.nameservers?.map(y => y),
    'options': obj.options?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecDnsConfigOptions(y)),
    'searches': obj.searches?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers#args
   */
  readonly args?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers#command
   */
  readonly command?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers#env
   */
  readonly env?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnv[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers#envFrom
   */
  readonly envFrom?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFrom[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers#image
   */
  readonly image?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers#imagePullPolicy
   */
  readonly imagePullPolicy?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers#lifecycle
   */
  readonly lifecycle?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecycle;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers#livenessProbe
   */
  readonly livenessProbe?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbe;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers#ports
   */
  readonly ports?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersPorts[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers#readinessProbe
   */
  readonly readinessProbe?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbe;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers#resizePolicy
   */
  readonly resizePolicy?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResizePolicy[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers#resources
   */
  readonly resources?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResources;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers#restartPolicy
   */
  readonly restartPolicy?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers#securityContext
   */
  readonly securityContext?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContext;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers#startupProbe
   */
  readonly startupProbe?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbe;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers#stdin
   */
  readonly stdin?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers#stdinOnce
   */
  readonly stdinOnce?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers#targetContainerName
   */
  readonly targetContainerName?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers#terminationMessagePath
   */
  readonly terminationMessagePath?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers#terminationMessagePolicy
   */
  readonly terminationMessagePolicy?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers#tty
   */
  readonly tty?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers#volumeDevices
   */
  readonly volumeDevices?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersVolumeDevices[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers#volumeMounts
   */
  readonly volumeMounts?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersVolumeMounts[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers#workingDir
   */
  readonly workingDir?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'args': obj.args?.map(y => y),
    'command': obj.command?.map(y => y),
    'env': obj.env?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnv(y)),
    'envFrom': obj.envFrom?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFrom(y)),
    'image': obj.image,
    'imagePullPolicy': obj.imagePullPolicy,
    'lifecycle': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecycle(obj.lifecycle),
    'livenessProbe': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbe(obj.livenessProbe),
    'name': obj.name,
    'ports': obj.ports?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersPorts(y)),
    'readinessProbe': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbe(obj.readinessProbe),
    'resizePolicy': obj.resizePolicy?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResizePolicy(y)),
    'resources': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResources(obj.resources),
    'restartPolicy': obj.restartPolicy,
    'securityContext': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContext(obj.securityContext),
    'startupProbe': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbe(obj.startupProbe),
    'stdin': obj.stdin,
    'stdinOnce': obj.stdinOnce,
    'targetContainerName': obj.targetContainerName,
    'terminationMessagePath': obj.terminationMessagePath,
    'terminationMessagePolicy': obj.terminationMessagePolicy,
    'tty': obj.tty,
    'volumeDevices': obj.volumeDevices?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersVolumeDevices(y)),
    'volumeMounts': obj.volumeMounts?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersVolumeMounts(y)),
    'workingDir': obj.workingDir,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecHostAliases
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecHostAliases {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecHostAliases#hostnames
   */
  readonly hostnames?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecHostAliases#ip
   */
  readonly ip: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecHostAliases' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecHostAliases(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecHostAliases | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hostnames': obj.hostnames?.map(y => y),
    'ip': obj.ip,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecImagePullSecrets
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecImagePullSecrets {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecImagePullSecrets#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecImagePullSecrets' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecImagePullSecrets(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecImagePullSecrets | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers#args
   */
  readonly args?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers#command
   */
  readonly command?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers#env
   */
  readonly env?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnv[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers#envFrom
   */
  readonly envFrom?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFrom[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers#image
   */
  readonly image?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers#imagePullPolicy
   */
  readonly imagePullPolicy?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers#lifecycle
   */
  readonly lifecycle?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecycle;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers#livenessProbe
   */
  readonly livenessProbe?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbe;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers#ports
   */
  readonly ports?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersPorts[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers#readinessProbe
   */
  readonly readinessProbe?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbe;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers#resizePolicy
   */
  readonly resizePolicy?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResizePolicy[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers#resources
   */
  readonly resources?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResources;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers#restartPolicy
   */
  readonly restartPolicy?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers#securityContext
   */
  readonly securityContext?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContext;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers#startupProbe
   */
  readonly startupProbe?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbe;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers#stdin
   */
  readonly stdin?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers#stdinOnce
   */
  readonly stdinOnce?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers#terminationMessagePath
   */
  readonly terminationMessagePath?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers#terminationMessagePolicy
   */
  readonly terminationMessagePolicy?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers#tty
   */
  readonly tty?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers#volumeDevices
   */
  readonly volumeDevices?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersVolumeDevices[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers#volumeMounts
   */
  readonly volumeMounts?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersVolumeMounts[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers#workingDir
   */
  readonly workingDir?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'args': obj.args?.map(y => y),
    'command': obj.command?.map(y => y),
    'env': obj.env?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnv(y)),
    'envFrom': obj.envFrom?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFrom(y)),
    'image': obj.image,
    'imagePullPolicy': obj.imagePullPolicy,
    'lifecycle': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecycle(obj.lifecycle),
    'livenessProbe': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbe(obj.livenessProbe),
    'name': obj.name,
    'ports': obj.ports?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersPorts(y)),
    'readinessProbe': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbe(obj.readinessProbe),
    'resizePolicy': obj.resizePolicy?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResizePolicy(y)),
    'resources': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResources(obj.resources),
    'restartPolicy': obj.restartPolicy,
    'securityContext': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContext(obj.securityContext),
    'startupProbe': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbe(obj.startupProbe),
    'stdin': obj.stdin,
    'stdinOnce': obj.stdinOnce,
    'terminationMessagePath': obj.terminationMessagePath,
    'terminationMessagePolicy': obj.terminationMessagePolicy,
    'tty': obj.tty,
    'volumeDevices': obj.volumeDevices?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersVolumeDevices(y)),
    'volumeMounts': obj.volumeMounts?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersVolumeMounts(y)),
    'workingDir': obj.workingDir,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecOs
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecOs {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecOs#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecOs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecOs(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecOs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecOverhead
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecOverhead {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecOverhead {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecOverhead(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecOverhead {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecOverhead(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecReadinessGates
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecReadinessGates {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecReadinessGates#conditionType
   */
  readonly conditionType: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecReadinessGates' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecReadinessGates(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecReadinessGates | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'conditionType': obj.conditionType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecResourceClaims
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecResourceClaims {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecResourceClaims#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecResourceClaims#resourceClaimName
   */
  readonly resourceClaimName?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecResourceClaims#resourceClaimTemplateName
   */
  readonly resourceClaimTemplateName?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecResourceClaims' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecResourceClaims(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecResourceClaims | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'resourceClaimName': obj.resourceClaimName,
    'resourceClaimTemplateName': obj.resourceClaimTemplateName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSchedulingGates
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSchedulingGates {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSchedulingGates#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSchedulingGates' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSchedulingGates(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSchedulingGates | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContext
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContext {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContext#appArmorProfile
   */
  readonly appArmorProfile?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextAppArmorProfile;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContext#fsGroup
   */
  readonly fsGroup?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContext#fsGroupChangePolicy
   */
  readonly fsGroupChangePolicy?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContext#runAsGroup
   */
  readonly runAsGroup?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContext#runAsNonRoot
   */
  readonly runAsNonRoot?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContext#runAsUser
   */
  readonly runAsUser?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContext#seLinuxOptions
   */
  readonly seLinuxOptions?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSeLinuxOptions;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContext#seccompProfile
   */
  readonly seccompProfile?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSeccompProfile;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContext#supplementalGroups
   */
  readonly supplementalGroups?: number[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContext#supplementalGroupsPolicy
   */
  readonly supplementalGroupsPolicy?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContext#sysctls
   */
  readonly sysctls?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSysctls[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContext#windowsOptions
   */
  readonly windowsOptions?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextWindowsOptions;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContext' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContext(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContext | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'appArmorProfile': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextAppArmorProfile(obj.appArmorProfile),
    'fsGroup': obj.fsGroup,
    'fsGroupChangePolicy': obj.fsGroupChangePolicy,
    'runAsGroup': obj.runAsGroup,
    'runAsNonRoot': obj.runAsNonRoot,
    'runAsUser': obj.runAsUser,
    'seLinuxOptions': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSeLinuxOptions(obj.seLinuxOptions),
    'seccompProfile': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSeccompProfile(obj.seccompProfile),
    'supplementalGroups': obj.supplementalGroups?.map(y => y),
    'supplementalGroupsPolicy': obj.supplementalGroupsPolicy,
    'sysctls': obj.sysctls?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSysctls(y)),
    'windowsOptions': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextWindowsOptions(obj.windowsOptions),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTolerations
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTolerations {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTolerations#effect
   */
  readonly effect?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTolerations#key
   */
  readonly key?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTolerations#operator
   */
  readonly operator?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTolerations#tolerationSeconds
   */
  readonly tolerationSeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTolerations#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTolerations' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTolerations(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTolerations | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'effect': obj.effect,
    'key': obj.key,
    'operator': obj.operator,
    'tolerationSeconds': obj.tolerationSeconds,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraints
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraints {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraints#labelSelector
   */
  readonly labelSelector?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraintsLabelSelector;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraints#matchLabelKeys
   */
  readonly matchLabelKeys?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraints#maxSkew
   */
  readonly maxSkew: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraints#minDomains
   */
  readonly minDomains?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraints#nodeAffinityPolicy
   */
  readonly nodeAffinityPolicy?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraints#nodeTaintsPolicy
   */
  readonly nodeTaintsPolicy?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraints#topologyKey
   */
  readonly topologyKey: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraints#whenUnsatisfiable
   */
  readonly whenUnsatisfiable: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraints(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'labelSelector': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraintsLabelSelector(obj.labelSelector),
    'matchLabelKeys': obj.matchLabelKeys?.map(y => y),
    'maxSkew': obj.maxSkew,
    'minDomains': obj.minDomains,
    'nodeAffinityPolicy': obj.nodeAffinityPolicy,
    'nodeTaintsPolicy': obj.nodeTaintsPolicy,
    'topologyKey': obj.topologyKey,
    'whenUnsatisfiable': obj.whenUnsatisfiable,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#awsElasticBlockStore
   */
  readonly awsElasticBlockStore?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAwsElasticBlockStore;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#azureDisk
   */
  readonly azureDisk?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAzureDisk;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#azureFile
   */
  readonly azureFile?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAzureFile;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#cephfs
   */
  readonly cephfs?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCephfs;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#cinder
   */
  readonly cinder?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCinder;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#configMap
   */
  readonly configMap?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesConfigMap;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#csi
   */
  readonly csi?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCsi;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#downwardAPI
   */
  readonly downwardApi?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApi;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#emptyDir
   */
  readonly emptyDir?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEmptyDir;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#ephemeral
   */
  readonly ephemeral?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeral;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#fc
   */
  readonly fc?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFc;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#flexVolume
   */
  readonly flexVolume?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlexVolume;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#flocker
   */
  readonly flocker?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlocker;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#gcePersistentDisk
   */
  readonly gcePersistentDisk?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGcePersistentDisk;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#gitRepo
   */
  readonly gitRepo?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGitRepo;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#glusterfs
   */
  readonly glusterfs?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGlusterfs;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#hostPath
   */
  readonly hostPath?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesHostPath;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#image
   */
  readonly image?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesImage;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#iscsi
   */
  readonly iscsi?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsi;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#nfs
   */
  readonly nfs?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesNfs;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#persistentVolumeClaim
   */
  readonly persistentVolumeClaim?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPersistentVolumeClaim;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#photonPersistentDisk
   */
  readonly photonPersistentDisk?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPhotonPersistentDisk;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#portworxVolume
   */
  readonly portworxVolume?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPortworxVolume;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#projected
   */
  readonly projected?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjected;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#quobyte
   */
  readonly quobyte?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesQuobyte;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#rbd
   */
  readonly rbd?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesRbd;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#scaleIO
   */
  readonly scaleIo?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIo;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#secret
   */
  readonly secret?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesSecret;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#storageos
   */
  readonly storageos?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesStorageos;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes#vsphereVolume
   */
  readonly vsphereVolume?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesVsphereVolume;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'awsElasticBlockStore': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAwsElasticBlockStore(obj.awsElasticBlockStore),
    'azureDisk': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAzureDisk(obj.azureDisk),
    'azureFile': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAzureFile(obj.azureFile),
    'cephfs': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCephfs(obj.cephfs),
    'cinder': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCinder(obj.cinder),
    'configMap': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesConfigMap(obj.configMap),
    'csi': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCsi(obj.csi),
    'downwardAPI': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApi(obj.downwardApi),
    'emptyDir': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEmptyDir(obj.emptyDir),
    'ephemeral': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeral(obj.ephemeral),
    'fc': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFc(obj.fc),
    'flexVolume': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlexVolume(obj.flexVolume),
    'flocker': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlocker(obj.flocker),
    'gcePersistentDisk': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGcePersistentDisk(obj.gcePersistentDisk),
    'gitRepo': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGitRepo(obj.gitRepo),
    'glusterfs': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGlusterfs(obj.glusterfs),
    'hostPath': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesHostPath(obj.hostPath),
    'image': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesImage(obj.image),
    'iscsi': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsi(obj.iscsi),
    'name': obj.name,
    'nfs': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesNfs(obj.nfs),
    'persistentVolumeClaim': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPersistentVolumeClaim(obj.persistentVolumeClaim),
    'photonPersistentDisk': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPhotonPersistentDisk(obj.photonPersistentDisk),
    'portworxVolume': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPortworxVolume(obj.portworxVolume),
    'projected': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjected(obj.projected),
    'quobyte': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesQuobyte(obj.quobyte),
    'rbd': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesRbd(obj.rbd),
    'scaleIO': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIo(obj.scaleIo),
    'secret': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesSecret(obj.secret),
    'storageos': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesStorageos(obj.storageos),
    'vsphereVolume': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesVsphereVolume(obj.vsphereVolume),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategyRollingUpdateMaxUnavailable
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategyRollingUpdateMaxUnavailable {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategyRollingUpdateMaxUnavailable {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategyRollingUpdateMaxUnavailable(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategyRollingUpdateMaxUnavailable {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategyRollingUpdateMaxUnavailable(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecDataSource
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecDataSource {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecDataSource#apiGroup
   */
  readonly apiGroup?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecDataSource#kind
   */
  readonly kind: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecDataSource#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecDataSource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecDataSource(obj: RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecDataSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiGroup': obj.apiGroup,
    'kind': obj.kind,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecDataSourceRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecDataSourceRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecDataSourceRef#apiGroup
   */
  readonly apiGroup?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecDataSourceRef#kind
   */
  readonly kind: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecDataSourceRef#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecDataSourceRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecDataSourceRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecDataSourceRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecDataSourceRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiGroup': obj.apiGroup,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResources
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResources {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResources#limits
   */
  readonly limits?: { [key: string]: RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResourcesLimits };

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResources#requests
   */
  readonly requests?: { [key: string]: RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResourcesRequests };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResources(obj: RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'limits': ((obj.limits) === undefined) ? undefined : (Object.entries(obj.limits).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
    'requests': ((obj.requests) === undefined) ? undefined : (Object.entries(obj.requests).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecSelector
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecSelector {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecSelector#matchExpressions
   */
  readonly matchExpressions?: RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecSelectorMatchExpressions[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecSelector(obj: RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinity
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinity {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinity' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinity(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinity | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'preferredDuringSchedulingIgnoredDuringExecution': obj.preferredDuringSchedulingIgnoredDuringExecution?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution(y)),
    'requiredDuringSchedulingIgnoredDuringExecution': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(obj.requiredDuringSchedulingIgnoredDuringExecution),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinity
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinity {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinity' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinity(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinity | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'preferredDuringSchedulingIgnoredDuringExecution': obj.preferredDuringSchedulingIgnoredDuringExecution?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution(y)),
    'requiredDuringSchedulingIgnoredDuringExecution': obj.requiredDuringSchedulingIgnoredDuringExecution?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinity
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinity {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinity' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinity(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinity | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'preferredDuringSchedulingIgnoredDuringExecution': obj.preferredDuringSchedulingIgnoredDuringExecution?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution(y)),
    'requiredDuringSchedulingIgnoredDuringExecution': obj.requiredDuringSchedulingIgnoredDuringExecution?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnv
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnv {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnv#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnv#value
   */
  readonly value?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnv#valueFrom
   */
  readonly valueFrom?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFrom;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnv' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnv(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnv | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
    'valueFrom': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFrom
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFrom {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFrom#configMapRef
   */
  readonly configMapRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFromConfigMapRef;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFrom#prefix
   */
  readonly prefix?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFrom#secretRef
   */
  readonly secretRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFromSecretRef;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFrom(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configMapRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFromConfigMapRef(obj.configMapRef),
    'prefix': obj.prefix,
    'secretRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFromSecretRef(obj.secretRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecycle
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecycle {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecycle#postStart
   */
  readonly postStart?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStart;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecycle#preStop
   */
  readonly preStop?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStop;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecycle' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecycle(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecycle | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'postStart': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStart(obj.postStart),
    'preStop': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStop(obj.preStop),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbe
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbe {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbe#exec
   */
  readonly exec?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeExec;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbe#grpc
   */
  readonly grpc?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeGrpc;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbe#httpGet
   */
  readonly httpGet?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGet;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbe#tcpSocket
   */
  readonly tcpSocket?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeTcpSocket;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbe#terminationGracePeriodSeconds
   */
  readonly terminationGracePeriodSeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbe' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbe(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbe | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeExec(obj.exec),
    'failureThreshold': obj.failureThreshold,
    'grpc': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeGrpc(obj.grpc),
    'httpGet': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGet(obj.httpGet),
    'initialDelaySeconds': obj.initialDelaySeconds,
    'periodSeconds': obj.periodSeconds,
    'successThreshold': obj.successThreshold,
    'tcpSocket': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeTcpSocket(obj.tcpSocket),
    'terminationGracePeriodSeconds': obj.terminationGracePeriodSeconds,
    'timeoutSeconds': obj.timeoutSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersPorts
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersPorts {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersPorts#containerPort
   */
  readonly containerPort: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersPorts#hostIP
   */
  readonly hostIp?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersPorts#hostPort
   */
  readonly hostPort?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersPorts#name
   */
  readonly name?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersPorts#protocol
   */
  readonly protocol?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersPorts' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersPorts(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersPorts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerPort': obj.containerPort,
    'hostIP': obj.hostIp,
    'hostPort': obj.hostPort,
    'name': obj.name,
    'protocol': obj.protocol,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbe
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbe {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbe#exec
   */
  readonly exec?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeExec;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbe#grpc
   */
  readonly grpc?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeGrpc;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbe#httpGet
   */
  readonly httpGet?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGet;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbe#tcpSocket
   */
  readonly tcpSocket?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeTcpSocket;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbe#terminationGracePeriodSeconds
   */
  readonly terminationGracePeriodSeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbe' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbe(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbe | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeExec(obj.exec),
    'failureThreshold': obj.failureThreshold,
    'grpc': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeGrpc(obj.grpc),
    'httpGet': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGet(obj.httpGet),
    'initialDelaySeconds': obj.initialDelaySeconds,
    'periodSeconds': obj.periodSeconds,
    'successThreshold': obj.successThreshold,
    'tcpSocket': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeTcpSocket(obj.tcpSocket),
    'terminationGracePeriodSeconds': obj.terminationGracePeriodSeconds,
    'timeoutSeconds': obj.timeoutSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResizePolicy
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResizePolicy {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResizePolicy#resourceName
   */
  readonly resourceName: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResizePolicy#restartPolicy
   */
  readonly restartPolicy: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResizePolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResizePolicy(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResizePolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resourceName': obj.resourceName,
    'restartPolicy': obj.restartPolicy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResources
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResources {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResources#claims
   */
  readonly claims?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResourcesClaims[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResources#limits
   */
  readonly limits?: { [key: string]: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResourcesLimits };

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResources#requests
   */
  readonly requests?: { [key: string]: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResourcesRequests };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResources(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'claims': obj.claims?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResourcesClaims(y)),
    'limits': ((obj.limits) === undefined) ? undefined : (Object.entries(obj.limits).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
    'requests': ((obj.requests) === undefined) ? undefined : (Object.entries(obj.requests).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContext
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContext {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContext#allowPrivilegeEscalation
   */
  readonly allowPrivilegeEscalation?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContext#appArmorProfile
   */
  readonly appArmorProfile?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextAppArmorProfile;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContext#capabilities
   */
  readonly capabilities?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextCapabilities;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContext#privileged
   */
  readonly privileged?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContext#procMount
   */
  readonly procMount?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContext#readOnlyRootFilesystem
   */
  readonly readOnlyRootFilesystem?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContext#runAsGroup
   */
  readonly runAsGroup?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContext#runAsNonRoot
   */
  readonly runAsNonRoot?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContext#runAsUser
   */
  readonly runAsUser?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContext#seLinuxOptions
   */
  readonly seLinuxOptions?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextSeLinuxOptions;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContext#seccompProfile
   */
  readonly seccompProfile?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextSeccompProfile;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContext#windowsOptions
   */
  readonly windowsOptions?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextWindowsOptions;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContext' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContext(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContext | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowPrivilegeEscalation': obj.allowPrivilegeEscalation,
    'appArmorProfile': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextAppArmorProfile(obj.appArmorProfile),
    'capabilities': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextCapabilities(obj.capabilities),
    'privileged': obj.privileged,
    'procMount': obj.procMount,
    'readOnlyRootFilesystem': obj.readOnlyRootFilesystem,
    'runAsGroup': obj.runAsGroup,
    'runAsNonRoot': obj.runAsNonRoot,
    'runAsUser': obj.runAsUser,
    'seLinuxOptions': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextSeLinuxOptions(obj.seLinuxOptions),
    'seccompProfile': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextSeccompProfile(obj.seccompProfile),
    'windowsOptions': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextWindowsOptions(obj.windowsOptions),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbe
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbe {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbe#exec
   */
  readonly exec?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeExec;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbe#grpc
   */
  readonly grpc?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeGrpc;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbe#httpGet
   */
  readonly httpGet?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGet;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbe#tcpSocket
   */
  readonly tcpSocket?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeTcpSocket;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbe#terminationGracePeriodSeconds
   */
  readonly terminationGracePeriodSeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbe' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbe(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbe | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeExec(obj.exec),
    'failureThreshold': obj.failureThreshold,
    'grpc': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeGrpc(obj.grpc),
    'httpGet': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGet(obj.httpGet),
    'initialDelaySeconds': obj.initialDelaySeconds,
    'periodSeconds': obj.periodSeconds,
    'successThreshold': obj.successThreshold,
    'tcpSocket': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeTcpSocket(obj.tcpSocket),
    'terminationGracePeriodSeconds': obj.terminationGracePeriodSeconds,
    'timeoutSeconds': obj.timeoutSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersVolumeDevices
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersVolumeDevices {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersVolumeDevices#devicePath
   */
  readonly devicePath: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersVolumeDevices#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersVolumeDevices' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersVolumeDevices(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersVolumeDevices | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'devicePath': obj.devicePath,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersVolumeMounts
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersVolumeMounts {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersVolumeMounts#mountPath
   */
  readonly mountPath: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersVolumeMounts#mountPropagation
   */
  readonly mountPropagation?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersVolumeMounts#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersVolumeMounts#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersVolumeMounts#recursiveReadOnly
   */
  readonly recursiveReadOnly?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersVolumeMounts#subPath
   */
  readonly subPath?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersVolumeMounts#subPathExpr
   */
  readonly subPathExpr?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersVolumeMounts' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersVolumeMounts(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersVolumeMounts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'mountPath': obj.mountPath,
    'mountPropagation': obj.mountPropagation,
    'name': obj.name,
    'readOnly': obj.readOnly,
    'recursiveReadOnly': obj.recursiveReadOnly,
    'subPath': obj.subPath,
    'subPathExpr': obj.subPathExpr,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecDnsConfigOptions
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecDnsConfigOptions {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecDnsConfigOptions#name
   */
  readonly name?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecDnsConfigOptions#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecDnsConfigOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecDnsConfigOptions(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecDnsConfigOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnv
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnv {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnv#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnv#value
   */
  readonly value?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnv#valueFrom
   */
  readonly valueFrom?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFrom;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnv' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnv(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnv | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
    'valueFrom': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFrom
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFrom {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFrom#configMapRef
   */
  readonly configMapRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFromConfigMapRef;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFrom#prefix
   */
  readonly prefix?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFrom#secretRef
   */
  readonly secretRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFromSecretRef;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFrom(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configMapRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFromConfigMapRef(obj.configMapRef),
    'prefix': obj.prefix,
    'secretRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFromSecretRef(obj.secretRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecycle
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecycle {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecycle#postStart
   */
  readonly postStart?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStart;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecycle#preStop
   */
  readonly preStop?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStop;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecycle' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecycle(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecycle | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'postStart': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStart(obj.postStart),
    'preStop': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStop(obj.preStop),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbe
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbe {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbe#exec
   */
  readonly exec?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeExec;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbe#grpc
   */
  readonly grpc?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeGrpc;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbe#httpGet
   */
  readonly httpGet?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGet;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbe#tcpSocket
   */
  readonly tcpSocket?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocket;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbe#terminationGracePeriodSeconds
   */
  readonly terminationGracePeriodSeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbe' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbe(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbe | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeExec(obj.exec),
    'failureThreshold': obj.failureThreshold,
    'grpc': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeGrpc(obj.grpc),
    'httpGet': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGet(obj.httpGet),
    'initialDelaySeconds': obj.initialDelaySeconds,
    'periodSeconds': obj.periodSeconds,
    'successThreshold': obj.successThreshold,
    'tcpSocket': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocket(obj.tcpSocket),
    'terminationGracePeriodSeconds': obj.terminationGracePeriodSeconds,
    'timeoutSeconds': obj.timeoutSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersPorts
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersPorts {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersPorts#containerPort
   */
  readonly containerPort: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersPorts#hostIP
   */
  readonly hostIp?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersPorts#hostPort
   */
  readonly hostPort?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersPorts#name
   */
  readonly name?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersPorts#protocol
   */
  readonly protocol?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersPorts' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersPorts(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersPorts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerPort': obj.containerPort,
    'hostIP': obj.hostIp,
    'hostPort': obj.hostPort,
    'name': obj.name,
    'protocol': obj.protocol,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbe
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbe {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbe#exec
   */
  readonly exec?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeExec;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbe#grpc
   */
  readonly grpc?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeGrpc;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbe#httpGet
   */
  readonly httpGet?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGet;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbe#tcpSocket
   */
  readonly tcpSocket?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocket;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbe#terminationGracePeriodSeconds
   */
  readonly terminationGracePeriodSeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbe' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbe(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbe | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeExec(obj.exec),
    'failureThreshold': obj.failureThreshold,
    'grpc': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeGrpc(obj.grpc),
    'httpGet': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGet(obj.httpGet),
    'initialDelaySeconds': obj.initialDelaySeconds,
    'periodSeconds': obj.periodSeconds,
    'successThreshold': obj.successThreshold,
    'tcpSocket': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocket(obj.tcpSocket),
    'terminationGracePeriodSeconds': obj.terminationGracePeriodSeconds,
    'timeoutSeconds': obj.timeoutSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResizePolicy
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResizePolicy {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResizePolicy#resourceName
   */
  readonly resourceName: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResizePolicy#restartPolicy
   */
  readonly restartPolicy: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResizePolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResizePolicy(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResizePolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resourceName': obj.resourceName,
    'restartPolicy': obj.restartPolicy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResources
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResources {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResources#claims
   */
  readonly claims?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResourcesClaims[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResources#limits
   */
  readonly limits?: { [key: string]: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResourcesLimits };

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResources#requests
   */
  readonly requests?: { [key: string]: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResourcesRequests };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResources(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'claims': obj.claims?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResourcesClaims(y)),
    'limits': ((obj.limits) === undefined) ? undefined : (Object.entries(obj.limits).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
    'requests': ((obj.requests) === undefined) ? undefined : (Object.entries(obj.requests).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContext
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContext {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContext#allowPrivilegeEscalation
   */
  readonly allowPrivilegeEscalation?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContext#appArmorProfile
   */
  readonly appArmorProfile?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextAppArmorProfile;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContext#capabilities
   */
  readonly capabilities?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextCapabilities;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContext#privileged
   */
  readonly privileged?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContext#procMount
   */
  readonly procMount?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContext#readOnlyRootFilesystem
   */
  readonly readOnlyRootFilesystem?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContext#runAsGroup
   */
  readonly runAsGroup?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContext#runAsNonRoot
   */
  readonly runAsNonRoot?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContext#runAsUser
   */
  readonly runAsUser?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContext#seLinuxOptions
   */
  readonly seLinuxOptions?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContext#seccompProfile
   */
  readonly seccompProfile?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfile;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContext#windowsOptions
   */
  readonly windowsOptions?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptions;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContext' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContext(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContext | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowPrivilegeEscalation': obj.allowPrivilegeEscalation,
    'appArmorProfile': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextAppArmorProfile(obj.appArmorProfile),
    'capabilities': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextCapabilities(obj.capabilities),
    'privileged': obj.privileged,
    'procMount': obj.procMount,
    'readOnlyRootFilesystem': obj.readOnlyRootFilesystem,
    'runAsGroup': obj.runAsGroup,
    'runAsNonRoot': obj.runAsNonRoot,
    'runAsUser': obj.runAsUser,
    'seLinuxOptions': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions(obj.seLinuxOptions),
    'seccompProfile': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfile(obj.seccompProfile),
    'windowsOptions': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptions(obj.windowsOptions),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbe
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbe {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbe#exec
   */
  readonly exec?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeExec;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbe#grpc
   */
  readonly grpc?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeGrpc;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbe#httpGet
   */
  readonly httpGet?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGet;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbe#tcpSocket
   */
  readonly tcpSocket?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocket;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbe#terminationGracePeriodSeconds
   */
  readonly terminationGracePeriodSeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbe' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbe(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbe | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeExec(obj.exec),
    'failureThreshold': obj.failureThreshold,
    'grpc': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeGrpc(obj.grpc),
    'httpGet': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGet(obj.httpGet),
    'initialDelaySeconds': obj.initialDelaySeconds,
    'periodSeconds': obj.periodSeconds,
    'successThreshold': obj.successThreshold,
    'tcpSocket': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocket(obj.tcpSocket),
    'terminationGracePeriodSeconds': obj.terminationGracePeriodSeconds,
    'timeoutSeconds': obj.timeoutSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersVolumeDevices
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersVolumeDevices {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersVolumeDevices#devicePath
   */
  readonly devicePath: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersVolumeDevices#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersVolumeDevices' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersVolumeDevices(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersVolumeDevices | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'devicePath': obj.devicePath,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersVolumeMounts
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersVolumeMounts {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersVolumeMounts#mountPath
   */
  readonly mountPath: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersVolumeMounts#mountPropagation
   */
  readonly mountPropagation?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersVolumeMounts#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersVolumeMounts#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersVolumeMounts#recursiveReadOnly
   */
  readonly recursiveReadOnly?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersVolumeMounts#subPath
   */
  readonly subPath?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersVolumeMounts#subPathExpr
   */
  readonly subPathExpr?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersVolumeMounts' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersVolumeMounts(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersVolumeMounts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'mountPath': obj.mountPath,
    'mountPropagation': obj.mountPropagation,
    'name': obj.name,
    'readOnly': obj.readOnly,
    'recursiveReadOnly': obj.recursiveReadOnly,
    'subPath': obj.subPath,
    'subPathExpr': obj.subPathExpr,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnv
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnv {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnv#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnv#value
   */
  readonly value?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnv#valueFrom
   */
  readonly valueFrom?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFrom;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnv' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnv(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnv | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
    'valueFrom': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFrom
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFrom {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFrom#configMapRef
   */
  readonly configMapRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFromConfigMapRef;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFrom#prefix
   */
  readonly prefix?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFrom#secretRef
   */
  readonly secretRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFromSecretRef;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFrom(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configMapRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFromConfigMapRef(obj.configMapRef),
    'prefix': obj.prefix,
    'secretRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFromSecretRef(obj.secretRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecycle
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecycle {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecycle#postStart
   */
  readonly postStart?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStart;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecycle#preStop
   */
  readonly preStop?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStop;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecycle' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecycle(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecycle | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'postStart': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStart(obj.postStart),
    'preStop': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStop(obj.preStop),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbe
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbe {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbe#exec
   */
  readonly exec?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeExec;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbe#grpc
   */
  readonly grpc?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeGrpc;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbe#httpGet
   */
  readonly httpGet?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGet;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbe#tcpSocket
   */
  readonly tcpSocket?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeTcpSocket;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbe#terminationGracePeriodSeconds
   */
  readonly terminationGracePeriodSeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbe' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbe(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbe | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeExec(obj.exec),
    'failureThreshold': obj.failureThreshold,
    'grpc': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeGrpc(obj.grpc),
    'httpGet': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGet(obj.httpGet),
    'initialDelaySeconds': obj.initialDelaySeconds,
    'periodSeconds': obj.periodSeconds,
    'successThreshold': obj.successThreshold,
    'tcpSocket': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeTcpSocket(obj.tcpSocket),
    'terminationGracePeriodSeconds': obj.terminationGracePeriodSeconds,
    'timeoutSeconds': obj.timeoutSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersPorts
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersPorts {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersPorts#containerPort
   */
  readonly containerPort: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersPorts#hostIP
   */
  readonly hostIp?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersPorts#hostPort
   */
  readonly hostPort?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersPorts#name
   */
  readonly name?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersPorts#protocol
   */
  readonly protocol?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersPorts' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersPorts(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersPorts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerPort': obj.containerPort,
    'hostIP': obj.hostIp,
    'hostPort': obj.hostPort,
    'name': obj.name,
    'protocol': obj.protocol,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbe
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbe {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbe#exec
   */
  readonly exec?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeExec;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbe#grpc
   */
  readonly grpc?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeGrpc;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbe#httpGet
   */
  readonly httpGet?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGet;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbe#tcpSocket
   */
  readonly tcpSocket?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeTcpSocket;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbe#terminationGracePeriodSeconds
   */
  readonly terminationGracePeriodSeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbe' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbe(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbe | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeExec(obj.exec),
    'failureThreshold': obj.failureThreshold,
    'grpc': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeGrpc(obj.grpc),
    'httpGet': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGet(obj.httpGet),
    'initialDelaySeconds': obj.initialDelaySeconds,
    'periodSeconds': obj.periodSeconds,
    'successThreshold': obj.successThreshold,
    'tcpSocket': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeTcpSocket(obj.tcpSocket),
    'terminationGracePeriodSeconds': obj.terminationGracePeriodSeconds,
    'timeoutSeconds': obj.timeoutSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResizePolicy
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResizePolicy {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResizePolicy#resourceName
   */
  readonly resourceName: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResizePolicy#restartPolicy
   */
  readonly restartPolicy: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResizePolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResizePolicy(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResizePolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resourceName': obj.resourceName,
    'restartPolicy': obj.restartPolicy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResources
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResources {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResources#claims
   */
  readonly claims?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResourcesClaims[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResources#limits
   */
  readonly limits?: { [key: string]: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResourcesLimits };

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResources#requests
   */
  readonly requests?: { [key: string]: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResourcesRequests };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResources(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'claims': obj.claims?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResourcesClaims(y)),
    'limits': ((obj.limits) === undefined) ? undefined : (Object.entries(obj.limits).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
    'requests': ((obj.requests) === undefined) ? undefined : (Object.entries(obj.requests).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContext
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContext {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContext#allowPrivilegeEscalation
   */
  readonly allowPrivilegeEscalation?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContext#appArmorProfile
   */
  readonly appArmorProfile?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextAppArmorProfile;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContext#capabilities
   */
  readonly capabilities?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextCapabilities;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContext#privileged
   */
  readonly privileged?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContext#procMount
   */
  readonly procMount?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContext#readOnlyRootFilesystem
   */
  readonly readOnlyRootFilesystem?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContext#runAsGroup
   */
  readonly runAsGroup?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContext#runAsNonRoot
   */
  readonly runAsNonRoot?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContext#runAsUser
   */
  readonly runAsUser?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContext#seLinuxOptions
   */
  readonly seLinuxOptions?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextSeLinuxOptions;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContext#seccompProfile
   */
  readonly seccompProfile?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextSeccompProfile;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContext#windowsOptions
   */
  readonly windowsOptions?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextWindowsOptions;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContext' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContext(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContext | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowPrivilegeEscalation': obj.allowPrivilegeEscalation,
    'appArmorProfile': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextAppArmorProfile(obj.appArmorProfile),
    'capabilities': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextCapabilities(obj.capabilities),
    'privileged': obj.privileged,
    'procMount': obj.procMount,
    'readOnlyRootFilesystem': obj.readOnlyRootFilesystem,
    'runAsGroup': obj.runAsGroup,
    'runAsNonRoot': obj.runAsNonRoot,
    'runAsUser': obj.runAsUser,
    'seLinuxOptions': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextSeLinuxOptions(obj.seLinuxOptions),
    'seccompProfile': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextSeccompProfile(obj.seccompProfile),
    'windowsOptions': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextWindowsOptions(obj.windowsOptions),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbe
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbe {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbe#exec
   */
  readonly exec?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeExec;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbe#grpc
   */
  readonly grpc?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeGrpc;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbe#httpGet
   */
  readonly httpGet?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGet;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbe#tcpSocket
   */
  readonly tcpSocket?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeTcpSocket;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbe#terminationGracePeriodSeconds
   */
  readonly terminationGracePeriodSeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbe' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbe(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbe | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeExec(obj.exec),
    'failureThreshold': obj.failureThreshold,
    'grpc': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeGrpc(obj.grpc),
    'httpGet': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGet(obj.httpGet),
    'initialDelaySeconds': obj.initialDelaySeconds,
    'periodSeconds': obj.periodSeconds,
    'successThreshold': obj.successThreshold,
    'tcpSocket': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeTcpSocket(obj.tcpSocket),
    'terminationGracePeriodSeconds': obj.terminationGracePeriodSeconds,
    'timeoutSeconds': obj.timeoutSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersVolumeDevices
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersVolumeDevices {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersVolumeDevices#devicePath
   */
  readonly devicePath: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersVolumeDevices#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersVolumeDevices' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersVolumeDevices(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersVolumeDevices | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'devicePath': obj.devicePath,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersVolumeMounts
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersVolumeMounts {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersVolumeMounts#mountPath
   */
  readonly mountPath: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersVolumeMounts#mountPropagation
   */
  readonly mountPropagation?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersVolumeMounts#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersVolumeMounts#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersVolumeMounts#recursiveReadOnly
   */
  readonly recursiveReadOnly?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersVolumeMounts#subPath
   */
  readonly subPath?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersVolumeMounts#subPathExpr
   */
  readonly subPathExpr?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersVolumeMounts' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersVolumeMounts(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersVolumeMounts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'mountPath': obj.mountPath,
    'mountPropagation': obj.mountPropagation,
    'name': obj.name,
    'readOnly': obj.readOnly,
    'recursiveReadOnly': obj.recursiveReadOnly,
    'subPath': obj.subPath,
    'subPathExpr': obj.subPathExpr,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextAppArmorProfile
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextAppArmorProfile {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextAppArmorProfile#localhostProfile
   */
  readonly localhostProfile?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextAppArmorProfile#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextAppArmorProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextAppArmorProfile(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextAppArmorProfile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'localhostProfile': obj.localhostProfile,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSeLinuxOptions
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSeLinuxOptions {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSeLinuxOptions#level
   */
  readonly level?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSeLinuxOptions#role
   */
  readonly role?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSeLinuxOptions#type
   */
  readonly type?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSeLinuxOptions#user
   */
  readonly user?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSeLinuxOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSeLinuxOptions(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSeLinuxOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'level': obj.level,
    'role': obj.role,
    'type': obj.type,
    'user': obj.user,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSeccompProfile
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSeccompProfile {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSeccompProfile#localhostProfile
   */
  readonly localhostProfile?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSeccompProfile#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSeccompProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSeccompProfile(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSeccompProfile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'localhostProfile': obj.localhostProfile,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSysctls
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSysctls {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSysctls#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSysctls#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSysctls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSysctls(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSysctls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextWindowsOptions
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextWindowsOptions {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextWindowsOptions#gmsaCredentialSpec
   */
  readonly gmsaCredentialSpec?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextWindowsOptions#gmsaCredentialSpecName
   */
  readonly gmsaCredentialSpecName?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextWindowsOptions#hostProcess
   */
  readonly hostProcess?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextWindowsOptions#runAsUserName
   */
  readonly runAsUserName?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextWindowsOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextWindowsOptions(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextWindowsOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'gmsaCredentialSpec': obj.gmsaCredentialSpec,
    'gmsaCredentialSpecName': obj.gmsaCredentialSpecName,
    'hostProcess': obj.hostProcess,
    'runAsUserName': obj.runAsUserName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraintsLabelSelector
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraintsLabelSelector {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraintsLabelSelector#matchExpressions
   */
  readonly matchExpressions?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraintsLabelSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraintsLabelSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraintsLabelSelector(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraintsLabelSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAwsElasticBlockStore
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAwsElasticBlockStore {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAwsElasticBlockStore#fsType
   */
  readonly fsType?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAwsElasticBlockStore#partition
   */
  readonly partition?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAwsElasticBlockStore#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAwsElasticBlockStore#volumeID
   */
  readonly volumeId: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAwsElasticBlockStore' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAwsElasticBlockStore(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAwsElasticBlockStore | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fsType': obj.fsType,
    'partition': obj.partition,
    'readOnly': obj.readOnly,
    'volumeID': obj.volumeId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAzureDisk
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAzureDisk {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAzureDisk#cachingMode
   */
  readonly cachingMode?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAzureDisk#diskName
   */
  readonly diskName: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAzureDisk#diskURI
   */
  readonly diskUri: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAzureDisk#fsType
   */
  readonly fsType?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAzureDisk#kind
   */
  readonly kind?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAzureDisk#readOnly
   */
  readonly readOnly?: boolean;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAzureDisk' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAzureDisk(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAzureDisk | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cachingMode': obj.cachingMode,
    'diskName': obj.diskName,
    'diskURI': obj.diskUri,
    'fsType': obj.fsType,
    'kind': obj.kind,
    'readOnly': obj.readOnly,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAzureFile
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAzureFile {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAzureFile#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAzureFile#secretName
   */
  readonly secretName: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAzureFile#shareName
   */
  readonly shareName: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAzureFile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAzureFile(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAzureFile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'readOnly': obj.readOnly,
    'secretName': obj.secretName,
    'shareName': obj.shareName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCephfs
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCephfs {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCephfs#monitors
   */
  readonly monitors: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCephfs#path
   */
  readonly path?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCephfs#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCephfs#secretFile
   */
  readonly secretFile?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCephfs#secretRef
   */
  readonly secretRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCephfsSecretRef;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCephfs#user
   */
  readonly user?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCephfs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCephfs(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCephfs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'monitors': obj.monitors?.map(y => y),
    'path': obj.path,
    'readOnly': obj.readOnly,
    'secretFile': obj.secretFile,
    'secretRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCephfsSecretRef(obj.secretRef),
    'user': obj.user,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCinder
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCinder {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCinder#fsType
   */
  readonly fsType?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCinder#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCinder#secretRef
   */
  readonly secretRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCinderSecretRef;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCinder#volumeID
   */
  readonly volumeId: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCinder' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCinder(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCinder | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fsType': obj.fsType,
    'readOnly': obj.readOnly,
    'secretRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCinderSecretRef(obj.secretRef),
    'volumeID': obj.volumeId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesConfigMap
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesConfigMap {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesConfigMap#defaultMode
   */
  readonly defaultMode?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesConfigMap#items
   */
  readonly items?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesConfigMapItems[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesConfigMap#name
   */
  readonly name?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesConfigMap#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesConfigMap' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesConfigMap(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesConfigMap | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'defaultMode': obj.defaultMode,
    'items': obj.items?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesConfigMapItems(y)),
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCsi
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCsi {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCsi#driver
   */
  readonly driver: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCsi#fsType
   */
  readonly fsType?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCsi#nodePublishSecretRef
   */
  readonly nodePublishSecretRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCsiNodePublishSecretRef;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCsi#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCsi#volumeAttributes
   */
  readonly volumeAttributes?: { [key: string]: string };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCsi' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCsi(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCsi | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'driver': obj.driver,
    'fsType': obj.fsType,
    'nodePublishSecretRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCsiNodePublishSecretRef(obj.nodePublishSecretRef),
    'readOnly': obj.readOnly,
    'volumeAttributes': ((obj.volumeAttributes) === undefined) ? undefined : (Object.entries(obj.volumeAttributes).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApi
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApi {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApi#defaultMode
   */
  readonly defaultMode?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApi#items
   */
  readonly items?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItems[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApi' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApi(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApi | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'defaultMode': obj.defaultMode,
    'items': obj.items?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItems(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEmptyDir
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEmptyDir {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEmptyDir#medium
   */
  readonly medium?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEmptyDir#sizeLimit
   */
  readonly sizeLimit?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEmptyDirSizeLimit;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEmptyDir' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEmptyDir(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEmptyDir | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'medium': obj.medium,
    'sizeLimit': obj.sizeLimit?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeral
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeral {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeral#volumeClaimTemplate
   */
  readonly volumeClaimTemplate?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplate;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeral' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeral(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeral | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'volumeClaimTemplate': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplate(obj.volumeClaimTemplate),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFc
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFc {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFc#fsType
   */
  readonly fsType?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFc#lun
   */
  readonly lun?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFc#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFc#targetWWNs
   */
  readonly targetWwNs?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFc#wwids
   */
  readonly wwids?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFc' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFc(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFc | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fsType': obj.fsType,
    'lun': obj.lun,
    'readOnly': obj.readOnly,
    'targetWWNs': obj.targetWwNs?.map(y => y),
    'wwids': obj.wwids?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlexVolume
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlexVolume {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlexVolume#driver
   */
  readonly driver: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlexVolume#fsType
   */
  readonly fsType?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlexVolume#options
   */
  readonly options?: { [key: string]: string };

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlexVolume#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlexVolume#secretRef
   */
  readonly secretRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlexVolumeSecretRef;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlexVolume' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlexVolume(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlexVolume | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'driver': obj.driver,
    'fsType': obj.fsType,
    'options': ((obj.options) === undefined) ? undefined : (Object.entries(obj.options).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'readOnly': obj.readOnly,
    'secretRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlexVolumeSecretRef(obj.secretRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlocker
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlocker {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlocker#datasetName
   */
  readonly datasetName?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlocker#datasetUUID
   */
  readonly datasetUuid?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlocker' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlocker(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlocker | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'datasetName': obj.datasetName,
    'datasetUUID': obj.datasetUuid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGcePersistentDisk
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGcePersistentDisk {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGcePersistentDisk#fsType
   */
  readonly fsType?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGcePersistentDisk#partition
   */
  readonly partition?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGcePersistentDisk#pdName
   */
  readonly pdName: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGcePersistentDisk#readOnly
   */
  readonly readOnly?: boolean;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGcePersistentDisk' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGcePersistentDisk(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGcePersistentDisk | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fsType': obj.fsType,
    'partition': obj.partition,
    'pdName': obj.pdName,
    'readOnly': obj.readOnly,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGitRepo
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGitRepo {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGitRepo#directory
   */
  readonly directory?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGitRepo#repository
   */
  readonly repository: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGitRepo#revision
   */
  readonly revision?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGitRepo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGitRepo(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGitRepo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'directory': obj.directory,
    'repository': obj.repository,
    'revision': obj.revision,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGlusterfs
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGlusterfs {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGlusterfs#endpoints
   */
  readonly endpoints: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGlusterfs#path
   */
  readonly path: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGlusterfs#readOnly
   */
  readonly readOnly?: boolean;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGlusterfs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGlusterfs(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGlusterfs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'endpoints': obj.endpoints,
    'path': obj.path,
    'readOnly': obj.readOnly,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesHostPath
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesHostPath {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesHostPath#path
   */
  readonly path: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesHostPath#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesHostPath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesHostPath(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesHostPath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'path': obj.path,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesImage
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesImage {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesImage#pullPolicy
   */
  readonly pullPolicy?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesImage#reference
   */
  readonly reference?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesImage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesImage(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesImage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'pullPolicy': obj.pullPolicy,
    'reference': obj.reference,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsi
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsi {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsi#chapAuthDiscovery
   */
  readonly chapAuthDiscovery?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsi#chapAuthSession
   */
  readonly chapAuthSession?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsi#fsType
   */
  readonly fsType?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsi#initiatorName
   */
  readonly initiatorName?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsi#iqn
   */
  readonly iqn: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsi#iscsiInterface
   */
  readonly iscsiInterface?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsi#lun
   */
  readonly lun: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsi#portals
   */
  readonly portals?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsi#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsi#secretRef
   */
  readonly secretRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsiSecretRef;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsi#targetPortal
   */
  readonly targetPortal: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsi' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsi(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsi | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'chapAuthDiscovery': obj.chapAuthDiscovery,
    'chapAuthSession': obj.chapAuthSession,
    'fsType': obj.fsType,
    'initiatorName': obj.initiatorName,
    'iqn': obj.iqn,
    'iscsiInterface': obj.iscsiInterface,
    'lun': obj.lun,
    'portals': obj.portals?.map(y => y),
    'readOnly': obj.readOnly,
    'secretRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsiSecretRef(obj.secretRef),
    'targetPortal': obj.targetPortal,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesNfs
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesNfs {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesNfs#path
   */
  readonly path: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesNfs#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesNfs#server
   */
  readonly server: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesNfs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesNfs(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesNfs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'path': obj.path,
    'readOnly': obj.readOnly,
    'server': obj.server,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPersistentVolumeClaim
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPersistentVolumeClaim {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPersistentVolumeClaim#claimName
   */
  readonly claimName: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPersistentVolumeClaim#readOnly
   */
  readonly readOnly?: boolean;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPersistentVolumeClaim' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPersistentVolumeClaim(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPersistentVolumeClaim | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'claimName': obj.claimName,
    'readOnly': obj.readOnly,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPhotonPersistentDisk
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPhotonPersistentDisk {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPhotonPersistentDisk#fsType
   */
  readonly fsType?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPhotonPersistentDisk#pdID
   */
  readonly pdId: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPhotonPersistentDisk' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPhotonPersistentDisk(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPhotonPersistentDisk | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fsType': obj.fsType,
    'pdID': obj.pdId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPortworxVolume
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPortworxVolume {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPortworxVolume#fsType
   */
  readonly fsType?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPortworxVolume#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPortworxVolume#volumeID
   */
  readonly volumeId: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPortworxVolume' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPortworxVolume(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPortworxVolume | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fsType': obj.fsType,
    'readOnly': obj.readOnly,
    'volumeID': obj.volumeId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjected
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjected {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjected#defaultMode
   */
  readonly defaultMode?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjected#sources
   */
  readonly sources?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSources[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjected' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjected(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjected | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'defaultMode': obj.defaultMode,
    'sources': obj.sources?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSources(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesQuobyte
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesQuobyte {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesQuobyte#group
   */
  readonly group?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesQuobyte#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesQuobyte#registry
   */
  readonly registry: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesQuobyte#tenant
   */
  readonly tenant?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesQuobyte#user
   */
  readonly user?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesQuobyte#volume
   */
  readonly volume: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesQuobyte' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesQuobyte(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesQuobyte | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'readOnly': obj.readOnly,
    'registry': obj.registry,
    'tenant': obj.tenant,
    'user': obj.user,
    'volume': obj.volume,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesRbd
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesRbd {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesRbd#fsType
   */
  readonly fsType?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesRbd#image
   */
  readonly image: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesRbd#keyring
   */
  readonly keyring?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesRbd#monitors
   */
  readonly monitors: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesRbd#pool
   */
  readonly pool?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesRbd#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesRbd#secretRef
   */
  readonly secretRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesRbdSecretRef;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesRbd#user
   */
  readonly user?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesRbd' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesRbd(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesRbd | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fsType': obj.fsType,
    'image': obj.image,
    'keyring': obj.keyring,
    'monitors': obj.monitors?.map(y => y),
    'pool': obj.pool,
    'readOnly': obj.readOnly,
    'secretRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesRbdSecretRef(obj.secretRef),
    'user': obj.user,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIo
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIo {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIo#fsType
   */
  readonly fsType?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIo#gateway
   */
  readonly gateway: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIo#protectionDomain
   */
  readonly protectionDomain?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIo#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIo#secretRef
   */
  readonly secretRef: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIoSecretRef;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIo#sslEnabled
   */
  readonly sslEnabled?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIo#storageMode
   */
  readonly storageMode?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIo#storagePool
   */
  readonly storagePool?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIo#system
   */
  readonly system: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIo#volumeName
   */
  readonly volumeName?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIo(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fsType': obj.fsType,
    'gateway': obj.gateway,
    'protectionDomain': obj.protectionDomain,
    'readOnly': obj.readOnly,
    'secretRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIoSecretRef(obj.secretRef),
    'sslEnabled': obj.sslEnabled,
    'storageMode': obj.storageMode,
    'storagePool': obj.storagePool,
    'system': obj.system,
    'volumeName': obj.volumeName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesSecret
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesSecret {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesSecret#defaultMode
   */
  readonly defaultMode?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesSecret#items
   */
  readonly items?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesSecretItems[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesSecret#optional
   */
  readonly optional?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesSecret#secretName
   */
  readonly secretName?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesSecret(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'defaultMode': obj.defaultMode,
    'items': obj.items?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesSecretItems(y)),
    'optional': obj.optional,
    'secretName': obj.secretName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesStorageos
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesStorageos {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesStorageos#fsType
   */
  readonly fsType?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesStorageos#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesStorageos#secretRef
   */
  readonly secretRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesStorageosSecretRef;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesStorageos#volumeName
   */
  readonly volumeName?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesStorageos#volumeNamespace
   */
  readonly volumeNamespace?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesStorageos' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesStorageos(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesStorageos | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fsType': obj.fsType,
    'readOnly': obj.readOnly,
    'secretRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesStorageosSecretRef(obj.secretRef),
    'volumeName': obj.volumeName,
    'volumeNamespace': obj.volumeNamespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesVsphereVolume
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesVsphereVolume {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesVsphereVolume#fsType
   */
  readonly fsType?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesVsphereVolume#storagePolicyID
   */
  readonly storagePolicyId?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesVsphereVolume#storagePolicyName
   */
  readonly storagePolicyName?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesVsphereVolume#volumePath
   */
  readonly volumePath: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesVsphereVolume' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesVsphereVolume(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesVsphereVolume | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fsType': obj.fsType,
    'storagePolicyID': obj.storagePolicyId,
    'storagePolicyName': obj.storagePolicyName,
    'volumePath': obj.volumePath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResourcesLimits
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResourcesLimits {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResourcesLimits {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResourcesLimits(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResourcesLimits {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResourcesLimits(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResourcesRequests
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResourcesRequests {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResourcesRequests {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResourcesRequests(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResourcesRequests {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResourcesRequests(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecSelectorMatchExpressions
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecSelectorMatchExpressions {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecSelectorMatchExpressions(obj: RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution#preference
   */
  readonly preference: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight: number;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'preference': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference(obj.preference),
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution#nodeSelectorTerms
   */
  readonly nodeSelectorTerms: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'nodeSelectorTerms': obj.nodeSelectorTerms?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution#podAffinityTerm
   */
  readonly podAffinityTerm: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight: number;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'podAffinityTerm': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(obj.podAffinityTerm),
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#labelSelector
   */
  readonly labelSelector?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#matchLabelKeys
   */
  readonly matchLabelKeys?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#mismatchLabelKeys
   */
  readonly mismatchLabelKeys?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaceSelector
   */
  readonly namespaceSelector?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaces
   */
  readonly namespaces?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#topologyKey
   */
  readonly topologyKey: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'labelSelector': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(obj.labelSelector),
    'matchLabelKeys': obj.matchLabelKeys?.map(y => y),
    'mismatchLabelKeys': obj.mismatchLabelKeys?.map(y => y),
    'namespaceSelector': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector(obj.namespaceSelector),
    'namespaces': obj.namespaces?.map(y => y),
    'topologyKey': obj.topologyKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution#podAffinityTerm
   */
  readonly podAffinityTerm: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight: number;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'podAffinityTerm': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(obj.podAffinityTerm),
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#labelSelector
   */
  readonly labelSelector?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#matchLabelKeys
   */
  readonly matchLabelKeys?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#mismatchLabelKeys
   */
  readonly mismatchLabelKeys?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaceSelector
   */
  readonly namespaceSelector?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaces
   */
  readonly namespaces?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#topologyKey
   */
  readonly topologyKey: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'labelSelector': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(obj.labelSelector),
    'matchLabelKeys': obj.matchLabelKeys?.map(y => y),
    'mismatchLabelKeys': obj.mismatchLabelKeys?.map(y => y),
    'namespaceSelector': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector(obj.namespaceSelector),
    'namespaces': obj.namespaces?.map(y => y),
    'topologyKey': obj.topologyKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFrom
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFrom {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFrom#configMapKeyRef
   */
  readonly configMapKeyRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFrom#fieldRef
   */
  readonly fieldRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromFieldRef;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFrom#resourceFieldRef
   */
  readonly resourceFieldRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromResourceFieldRef;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFrom#secretKeyRef
   */
  readonly secretKeyRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromSecretKeyRef;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFrom(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configMapKeyRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef(obj.configMapKeyRef),
    'fieldRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromFieldRef(obj.fieldRef),
    'resourceFieldRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromResourceFieldRef(obj.resourceFieldRef),
    'secretKeyRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromSecretKeyRef(obj.secretKeyRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFromConfigMapRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFromConfigMapRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFromConfigMapRef#name
   */
  readonly name?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFromConfigMapRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFromConfigMapRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFromConfigMapRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFromConfigMapRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFromSecretRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFromSecretRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFromSecretRef#name
   */
  readonly name?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFromSecretRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFromSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFromSecretRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFromSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStart
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStart {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStart#exec
   */
  readonly exec?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartExec;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStart#httpGet
   */
  readonly httpGet?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGet;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStart#sleep
   */
  readonly sleep?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartSleep;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStart#tcpSocket
   */
  readonly tcpSocket?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartTcpSocket;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStart' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStart(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStart | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartExec(obj.exec),
    'httpGet': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGet(obj.httpGet),
    'sleep': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartSleep(obj.sleep),
    'tcpSocket': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartTcpSocket(obj.tcpSocket),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStop
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStop {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStop#exec
   */
  readonly exec?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopExec;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStop#httpGet
   */
  readonly httpGet?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGet;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStop#sleep
   */
  readonly sleep?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopSleep;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStop#tcpSocket
   */
  readonly tcpSocket?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopTcpSocket;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStop' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStop(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStop | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopExec(obj.exec),
    'httpGet': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGet(obj.httpGet),
    'sleep': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopSleep(obj.sleep),
    'tcpSocket': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopTcpSocket(obj.tcpSocket),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeExec
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeExec {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeExec(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeGrpc
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeGrpc {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeGrpc#port
   */
  readonly port: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeGrpc#service
   */
  readonly service?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeGrpc' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeGrpc(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeGrpc | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'port': obj.port,
    'service': obj.service,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGet
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGet {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGet#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGet#httpHeaders
   */
  readonly httpHeaders?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeaders[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGet#path
   */
  readonly path?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGet#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGetPort;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGet(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeTcpSocket
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeTcpSocket {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeTcpSocket#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeTcpSocket#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeTcpSocketPort;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeTcpSocket(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeExec
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeExec {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeExec(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeGrpc
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeGrpc {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeGrpc#port
   */
  readonly port: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeGrpc#service
   */
  readonly service?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeGrpc' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeGrpc(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeGrpc | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'port': obj.port,
    'service': obj.service,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGet
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGet {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGet#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGet#httpHeaders
   */
  readonly httpHeaders?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeaders[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGet#path
   */
  readonly path?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGet#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGetPort;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGet(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeTcpSocket
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeTcpSocket {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeTcpSocket#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeTcpSocket#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeTcpSocketPort;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeTcpSocket(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResourcesClaims
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResourcesClaims {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResourcesClaims#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResourcesClaims#request
   */
  readonly request?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResourcesClaims' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResourcesClaims(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResourcesClaims | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'request': obj.request,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResourcesLimits
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResourcesLimits {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResourcesLimits {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResourcesLimits(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResourcesLimits {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResourcesLimits(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResourcesRequests
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResourcesRequests {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResourcesRequests {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResourcesRequests(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResourcesRequests {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResourcesRequests(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextAppArmorProfile
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextAppArmorProfile {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextAppArmorProfile#localhostProfile
   */
  readonly localhostProfile?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextAppArmorProfile#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextAppArmorProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextAppArmorProfile(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextAppArmorProfile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'localhostProfile': obj.localhostProfile,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextCapabilities
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextCapabilities {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextCapabilities#add
   */
  readonly add?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextCapabilities#drop
   */
  readonly drop?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextCapabilities' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextCapabilities(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextCapabilities | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'add': obj.add?.map(y => y),
    'drop': obj.drop?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextSeLinuxOptions
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextSeLinuxOptions {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextSeLinuxOptions#level
   */
  readonly level?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextSeLinuxOptions#role
   */
  readonly role?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextSeLinuxOptions#type
   */
  readonly type?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextSeLinuxOptions#user
   */
  readonly user?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextSeLinuxOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextSeLinuxOptions(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextSeLinuxOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'level': obj.level,
    'role': obj.role,
    'type': obj.type,
    'user': obj.user,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextSeccompProfile
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextSeccompProfile {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextSeccompProfile#localhostProfile
   */
  readonly localhostProfile?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextSeccompProfile#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextSeccompProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextSeccompProfile(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextSeccompProfile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'localhostProfile': obj.localhostProfile,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextWindowsOptions
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextWindowsOptions {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextWindowsOptions#gmsaCredentialSpec
   */
  readonly gmsaCredentialSpec?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextWindowsOptions#gmsaCredentialSpecName
   */
  readonly gmsaCredentialSpecName?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextWindowsOptions#hostProcess
   */
  readonly hostProcess?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextWindowsOptions#runAsUserName
   */
  readonly runAsUserName?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextWindowsOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextWindowsOptions(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextWindowsOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'gmsaCredentialSpec': obj.gmsaCredentialSpec,
    'gmsaCredentialSpecName': obj.gmsaCredentialSpecName,
    'hostProcess': obj.hostProcess,
    'runAsUserName': obj.runAsUserName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeExec
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeExec {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeExec(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeGrpc
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeGrpc {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeGrpc#port
   */
  readonly port: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeGrpc#service
   */
  readonly service?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeGrpc' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeGrpc(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeGrpc | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'port': obj.port,
    'service': obj.service,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGet
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGet {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGet#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGet#httpHeaders
   */
  readonly httpHeaders?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGetHttpHeaders[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGet#path
   */
  readonly path?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGet#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGetPort;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGet(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeTcpSocket
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeTcpSocket {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeTcpSocket#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeTcpSocket#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeTcpSocketPort;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeTcpSocket(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFrom
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFrom {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFrom#configMapKeyRef
   */
  readonly configMapKeyRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFrom#fieldRef
   */
  readonly fieldRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromFieldRef;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFrom#resourceFieldRef
   */
  readonly resourceFieldRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFrom#secretKeyRef
   */
  readonly secretKeyRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFrom(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configMapKeyRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef(obj.configMapKeyRef),
    'fieldRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromFieldRef(obj.fieldRef),
    'resourceFieldRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef(obj.resourceFieldRef),
    'secretKeyRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef(obj.secretKeyRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFromConfigMapRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFromConfigMapRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFromConfigMapRef#name
   */
  readonly name?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFromConfigMapRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFromConfigMapRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFromConfigMapRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFromConfigMapRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFromSecretRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFromSecretRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFromSecretRef#name
   */
  readonly name?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFromSecretRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFromSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFromSecretRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFromSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStart
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStart {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStart#exec
   */
  readonly exec?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartExec;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStart#httpGet
   */
  readonly httpGet?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGet;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStart#sleep
   */
  readonly sleep?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartSleep;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStart#tcpSocket
   */
  readonly tcpSocket?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStart' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStart(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStart | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartExec(obj.exec),
    'httpGet': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGet(obj.httpGet),
    'sleep': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartSleep(obj.sleep),
    'tcpSocket': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket(obj.tcpSocket),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStop
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStop {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStop#exec
   */
  readonly exec?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopExec;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStop#httpGet
   */
  readonly httpGet?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGet;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStop#sleep
   */
  readonly sleep?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopSleep;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStop#tcpSocket
   */
  readonly tcpSocket?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStop' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStop(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStop | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopExec(obj.exec),
    'httpGet': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGet(obj.httpGet),
    'sleep': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopSleep(obj.sleep),
    'tcpSocket': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket(obj.tcpSocket),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeExec
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeExec {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeExec(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeGrpc
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeGrpc {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeGrpc#port
   */
  readonly port: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeGrpc#service
   */
  readonly service?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeGrpc' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeGrpc(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeGrpc | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'port': obj.port,
    'service': obj.service,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGet
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGet {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGet#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGet#httpHeaders
   */
  readonly httpHeaders?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGet#path
   */
  readonly path?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGet#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPort;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGet(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocket
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocket {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocket#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocket#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPort;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocket(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeExec
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeExec {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeExec(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeGrpc
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeGrpc {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeGrpc#port
   */
  readonly port: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeGrpc#service
   */
  readonly service?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeGrpc' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeGrpc(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeGrpc | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'port': obj.port,
    'service': obj.service,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGet
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGet {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGet#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGet#httpHeaders
   */
  readonly httpHeaders?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGet#path
   */
  readonly path?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGet#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPort;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGet(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocket
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocket {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocket#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocket#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPort;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocket(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResourcesClaims
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResourcesClaims {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResourcesClaims#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResourcesClaims#request
   */
  readonly request?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResourcesClaims' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResourcesClaims(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResourcesClaims | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'request': obj.request,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResourcesLimits
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResourcesLimits {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResourcesLimits {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResourcesLimits(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResourcesLimits {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResourcesLimits(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResourcesRequests
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResourcesRequests {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResourcesRequests {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResourcesRequests(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResourcesRequests {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResourcesRequests(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextAppArmorProfile
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextAppArmorProfile {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextAppArmorProfile#localhostProfile
   */
  readonly localhostProfile?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextAppArmorProfile#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextAppArmorProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextAppArmorProfile(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextAppArmorProfile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'localhostProfile': obj.localhostProfile,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextCapabilities
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextCapabilities {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextCapabilities#add
   */
  readonly add?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextCapabilities#drop
   */
  readonly drop?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextCapabilities' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextCapabilities(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextCapabilities | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'add': obj.add?.map(y => y),
    'drop': obj.drop?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions#level
   */
  readonly level?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions#role
   */
  readonly role?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions#type
   */
  readonly type?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions#user
   */
  readonly user?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'level': obj.level,
    'role': obj.role,
    'type': obj.type,
    'user': obj.user,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfile
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfile {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfile#localhostProfile
   */
  readonly localhostProfile?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfile#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfile(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'localhostProfile': obj.localhostProfile,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptions
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptions {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptions#gmsaCredentialSpec
   */
  readonly gmsaCredentialSpec?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptions#gmsaCredentialSpecName
   */
  readonly gmsaCredentialSpecName?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptions#hostProcess
   */
  readonly hostProcess?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptions#runAsUserName
   */
  readonly runAsUserName?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptions(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'gmsaCredentialSpec': obj.gmsaCredentialSpec,
    'gmsaCredentialSpecName': obj.gmsaCredentialSpecName,
    'hostProcess': obj.hostProcess,
    'runAsUserName': obj.runAsUserName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeExec
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeExec {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeExec(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeGrpc
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeGrpc {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeGrpc#port
   */
  readonly port: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeGrpc#service
   */
  readonly service?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeGrpc' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeGrpc(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeGrpc | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'port': obj.port,
    'service': obj.service,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGet
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGet {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGet#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGet#httpHeaders
   */
  readonly httpHeaders?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGet#path
   */
  readonly path?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGet#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPort;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGet(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocket
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocket {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocket#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocket#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPort;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocket(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFrom
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFrom {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFrom#configMapKeyRef
   */
  readonly configMapKeyRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRef;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFrom#fieldRef
   */
  readonly fieldRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromFieldRef;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFrom#resourceFieldRef
   */
  readonly resourceFieldRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRef;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFrom#secretKeyRef
   */
  readonly secretKeyRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromSecretKeyRef;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFrom(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configMapKeyRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRef(obj.configMapKeyRef),
    'fieldRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromFieldRef(obj.fieldRef),
    'resourceFieldRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRef(obj.resourceFieldRef),
    'secretKeyRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromSecretKeyRef(obj.secretKeyRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFromConfigMapRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFromConfigMapRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFromConfigMapRef#name
   */
  readonly name?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFromConfigMapRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFromConfigMapRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFromConfigMapRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFromConfigMapRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFromSecretRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFromSecretRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFromSecretRef#name
   */
  readonly name?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFromSecretRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFromSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFromSecretRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFromSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStart
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStart {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStart#exec
   */
  readonly exec?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartExec;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStart#httpGet
   */
  readonly httpGet?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGet;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStart#sleep
   */
  readonly sleep?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartSleep;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStart#tcpSocket
   */
  readonly tcpSocket?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocket;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStart' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStart(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStart | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartExec(obj.exec),
    'httpGet': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGet(obj.httpGet),
    'sleep': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartSleep(obj.sleep),
    'tcpSocket': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocket(obj.tcpSocket),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStop
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStop {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStop#exec
   */
  readonly exec?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopExec;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStop#httpGet
   */
  readonly httpGet?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGet;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStop#sleep
   */
  readonly sleep?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopSleep;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStop#tcpSocket
   */
  readonly tcpSocket?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocket;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStop' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStop(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStop | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopExec(obj.exec),
    'httpGet': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGet(obj.httpGet),
    'sleep': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopSleep(obj.sleep),
    'tcpSocket': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocket(obj.tcpSocket),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeExec
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeExec {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeExec(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeGrpc
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeGrpc {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeGrpc#port
   */
  readonly port: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeGrpc#service
   */
  readonly service?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeGrpc' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeGrpc(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeGrpc | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'port': obj.port,
    'service': obj.service,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGet
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGet {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGet#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGet#httpHeaders
   */
  readonly httpHeaders?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGet#path
   */
  readonly path?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGet#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGetPort;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGet(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeTcpSocket
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeTcpSocket {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeTcpSocket#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeTcpSocket#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeTcpSocketPort;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeTcpSocket(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeExec
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeExec {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeExec(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeGrpc
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeGrpc {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeGrpc#port
   */
  readonly port: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeGrpc#service
   */
  readonly service?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeGrpc' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeGrpc(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeGrpc | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'port': obj.port,
    'service': obj.service,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGet
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGet {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGet#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGet#httpHeaders
   */
  readonly httpHeaders?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGet#path
   */
  readonly path?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGet#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGetPort;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGet(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeTcpSocket
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeTcpSocket {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeTcpSocket#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeTcpSocket#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeTcpSocketPort;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeTcpSocket(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResourcesClaims
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResourcesClaims {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResourcesClaims#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResourcesClaims#request
   */
  readonly request?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResourcesClaims' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResourcesClaims(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResourcesClaims | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'request': obj.request,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResourcesLimits
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResourcesLimits {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResourcesLimits {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResourcesLimits(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResourcesLimits {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResourcesLimits(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResourcesRequests
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResourcesRequests {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResourcesRequests {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResourcesRequests(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResourcesRequests {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResourcesRequests(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextAppArmorProfile
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextAppArmorProfile {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextAppArmorProfile#localhostProfile
   */
  readonly localhostProfile?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextAppArmorProfile#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextAppArmorProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextAppArmorProfile(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextAppArmorProfile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'localhostProfile': obj.localhostProfile,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextCapabilities
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextCapabilities {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextCapabilities#add
   */
  readonly add?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextCapabilities#drop
   */
  readonly drop?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextCapabilities' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextCapabilities(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextCapabilities | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'add': obj.add?.map(y => y),
    'drop': obj.drop?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextSeLinuxOptions
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextSeLinuxOptions {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextSeLinuxOptions#level
   */
  readonly level?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextSeLinuxOptions#role
   */
  readonly role?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextSeLinuxOptions#type
   */
  readonly type?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextSeLinuxOptions#user
   */
  readonly user?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextSeLinuxOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextSeLinuxOptions(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextSeLinuxOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'level': obj.level,
    'role': obj.role,
    'type': obj.type,
    'user': obj.user,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextSeccompProfile
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextSeccompProfile {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextSeccompProfile#localhostProfile
   */
  readonly localhostProfile?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextSeccompProfile#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextSeccompProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextSeccompProfile(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextSeccompProfile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'localhostProfile': obj.localhostProfile,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextWindowsOptions
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextWindowsOptions {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextWindowsOptions#gmsaCredentialSpec
   */
  readonly gmsaCredentialSpec?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextWindowsOptions#gmsaCredentialSpecName
   */
  readonly gmsaCredentialSpecName?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextWindowsOptions#hostProcess
   */
  readonly hostProcess?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextWindowsOptions#runAsUserName
   */
  readonly runAsUserName?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextWindowsOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextWindowsOptions(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextWindowsOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'gmsaCredentialSpec': obj.gmsaCredentialSpec,
    'gmsaCredentialSpecName': obj.gmsaCredentialSpecName,
    'hostProcess': obj.hostProcess,
    'runAsUserName': obj.runAsUserName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeExec
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeExec {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeExec(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeGrpc
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeGrpc {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeGrpc#port
   */
  readonly port: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeGrpc#service
   */
  readonly service?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeGrpc' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeGrpc(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeGrpc | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'port': obj.port,
    'service': obj.service,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGet
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGet {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGet#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGet#httpHeaders
   */
  readonly httpHeaders?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGet#path
   */
  readonly path?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGet#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGetPort;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGet(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeTcpSocket
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeTcpSocket {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeTcpSocket#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeTcpSocket#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeTcpSocketPort;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeTcpSocket(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCephfsSecretRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCephfsSecretRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCephfsSecretRef#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCephfsSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCephfsSecretRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCephfsSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCinderSecretRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCinderSecretRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCinderSecretRef#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCinderSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCinderSecretRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCinderSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesConfigMapItems
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesConfigMapItems {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesConfigMapItems#key
   */
  readonly key: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesConfigMapItems#mode
   */
  readonly mode?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesConfigMapItems#path
   */
  readonly path: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesConfigMapItems' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesConfigMapItems(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesConfigMapItems | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'mode': obj.mode,
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCsiNodePublishSecretRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCsiNodePublishSecretRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCsiNodePublishSecretRef#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCsiNodePublishSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCsiNodePublishSecretRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCsiNodePublishSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItems
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItems {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItems#fieldRef
   */
  readonly fieldRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItemsFieldRef;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItems#mode
   */
  readonly mode?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItems#path
   */
  readonly path: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItems#resourceFieldRef
   */
  readonly resourceFieldRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItemsResourceFieldRef;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItems' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItems(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItems | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItemsFieldRef(obj.fieldRef),
    'mode': obj.mode,
    'path': obj.path,
    'resourceFieldRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItemsResourceFieldRef(obj.resourceFieldRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEmptyDirSizeLimit
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEmptyDirSizeLimit {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEmptyDirSizeLimit {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEmptyDirSizeLimit(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEmptyDirSizeLimit {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEmptyDirSizeLimit(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplate
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplate {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplate#metadata
   */
  readonly metadata?: any;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplate#spec
   */
  readonly spec: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplate(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlexVolumeSecretRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlexVolumeSecretRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlexVolumeSecretRef#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlexVolumeSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlexVolumeSecretRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlexVolumeSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsiSecretRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsiSecretRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsiSecretRef#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsiSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsiSecretRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsiSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSources
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSources {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSources#clusterTrustBundle
   */
  readonly clusterTrustBundle?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundle;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSources#configMap
   */
  readonly configMap?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesConfigMap;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSources#downwardAPI
   */
  readonly downwardApi?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApi;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSources#secret
   */
  readonly secret?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesSecret;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSources#serviceAccountToken
   */
  readonly serviceAccountToken?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesServiceAccountToken;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSources(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clusterTrustBundle': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundle(obj.clusterTrustBundle),
    'configMap': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesConfigMap(obj.configMap),
    'downwardAPI': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApi(obj.downwardApi),
    'secret': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesSecret(obj.secret),
    'serviceAccountToken': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesServiceAccountToken(obj.serviceAccountToken),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesRbdSecretRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesRbdSecretRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesRbdSecretRef#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesRbdSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesRbdSecretRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesRbdSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIoSecretRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIoSecretRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIoSecretRef#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIoSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIoSecretRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIoSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesSecretItems
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesSecretItems {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesSecretItems#key
   */
  readonly key: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesSecretItems#mode
   */
  readonly mode?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesSecretItems#path
   */
  readonly path: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesSecretItems' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesSecretItems(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesSecretItems | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'mode': obj.mode,
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesStorageosSecretRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesStorageosSecretRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesStorageosSecretRef#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesStorageosSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesStorageosSecretRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesStorageosSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference#matchExpressions
   */
  readonly matchExpressions?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference#matchFields
   */
  readonly matchFields?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions(y)),
    'matchFields': obj.matchFields?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms#matchExpressions
   */
  readonly matchExpressions?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms#matchFields
   */
  readonly matchFields?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions(y)),
    'matchFields': obj.matchFields?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#labelSelector
   */
  readonly labelSelector?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#matchLabelKeys
   */
  readonly matchLabelKeys?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#mismatchLabelKeys
   */
  readonly mismatchLabelKeys?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaceSelector
   */
  readonly namespaceSelector?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaces
   */
  readonly namespaces?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#topologyKey
   */
  readonly topologyKey: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'labelSelector': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(obj.labelSelector),
    'matchLabelKeys': obj.matchLabelKeys?.map(y => y),
    'mismatchLabelKeys': obj.mismatchLabelKeys?.map(y => y),
    'namespaceSelector': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector(obj.namespaceSelector),
    'namespaces': obj.namespaces?.map(y => y),
    'topologyKey': obj.topologyKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchExpressions
   */
  readonly matchExpressions?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector#matchExpressions
   */
  readonly matchExpressions?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#labelSelector
   */
  readonly labelSelector?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#matchLabelKeys
   */
  readonly matchLabelKeys?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#mismatchLabelKeys
   */
  readonly mismatchLabelKeys?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaceSelector
   */
  readonly namespaceSelector?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaces
   */
  readonly namespaces?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#topologyKey
   */
  readonly topologyKey: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'labelSelector': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(obj.labelSelector),
    'matchLabelKeys': obj.matchLabelKeys?.map(y => y),
    'mismatchLabelKeys': obj.mismatchLabelKeys?.map(y => y),
    'namespaceSelector': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector(obj.namespaceSelector),
    'namespaces': obj.namespaces?.map(y => y),
    'topologyKey': obj.topologyKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchExpressions
   */
  readonly matchExpressions?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector#matchExpressions
   */
  readonly matchExpressions?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef#key
   */
  readonly key: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef#name
   */
  readonly name?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromFieldRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromFieldRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromFieldRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromFieldRef#fieldPath
   */
  readonly fieldPath: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromFieldRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromFieldRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromFieldRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromResourceFieldRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromResourceFieldRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromResourceFieldRef#containerName
   */
  readonly containerName?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromResourceFieldRef#divisor
   */
  readonly divisor?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromResourceFieldRefDivisor;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromResourceFieldRef#resource
   */
  readonly resource: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromResourceFieldRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromResourceFieldRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromResourceFieldRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerName': obj.containerName,
    'divisor': obj.divisor?.value,
    'resource': obj.resource,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromSecretKeyRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromSecretKeyRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromSecretKeyRef#key
   */
  readonly key: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromSecretKeyRef#name
   */
  readonly name?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromSecretKeyRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromSecretKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromSecretKeyRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromSecretKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartExec
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartExec {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartExec(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGet
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGet {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGet#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGet#httpHeaders
   */
  readonly httpHeaders?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGet#path
   */
  readonly path?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGet#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGetPort;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGet(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartSleep
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartSleep {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartSleep#seconds
   */
  readonly seconds: number;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartSleep' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartSleep(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartSleep | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'seconds': obj.seconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartTcpSocket
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartTcpSocket {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartTcpSocket#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartTcpSocket#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartTcpSocketPort;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartTcpSocket(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopExec
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopExec {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopExec(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGet
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGet {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGet#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGet#httpHeaders
   */
  readonly httpHeaders?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGet#path
   */
  readonly path?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGet#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGetPort;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGet(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopSleep
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopSleep {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopSleep#seconds
   */
  readonly seconds: number;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopSleep' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopSleep(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopSleep | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'seconds': obj.seconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopTcpSocket
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopTcpSocket {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopTcpSocket#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopTcpSocket#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopTcpSocketPort;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopTcpSocket(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeaders
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeaders {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeaders(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGetPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGetPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGetPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeTcpSocketPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeTcpSocketPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeTcpSocketPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeaders
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeaders {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeaders(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGetPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGetPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGetPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeTcpSocketPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeTcpSocketPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeTcpSocketPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGetHttpHeaders
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGetHttpHeaders {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGetHttpHeaders(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGetPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGetPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGetPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeTcpSocketPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeTcpSocketPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeTcpSocketPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef#key
   */
  readonly key: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef#name
   */
  readonly name?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromFieldRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromFieldRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromFieldRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromFieldRef#fieldPath
   */
  readonly fieldPath: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromFieldRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromFieldRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromFieldRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef#containerName
   */
  readonly containerName?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef#divisor
   */
  readonly divisor?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefDivisor;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef#resource
   */
  readonly resource: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerName': obj.containerName,
    'divisor': obj.divisor?.value,
    'resource': obj.resource,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef#key
   */
  readonly key: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef#name
   */
  readonly name?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartExec
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartExec {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartExec(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGet
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGet {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGet#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGet#httpHeaders
   */
  readonly httpHeaders?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGet#path
   */
  readonly path?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGet#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPort;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGet(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartSleep
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartSleep {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartSleep#seconds
   */
  readonly seconds: number;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartSleep' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartSleep(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartSleep | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'seconds': obj.seconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPort;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopExec
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopExec {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopExec(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGet
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGet {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGet#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGet#httpHeaders
   */
  readonly httpHeaders?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGet#path
   */
  readonly path?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGet#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPort;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGet(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopSleep
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopSleep {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopSleep#seconds
   */
  readonly seconds: number;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopSleep' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopSleep(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopSleep | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'seconds': obj.seconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPort;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRef#key
   */
  readonly key: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRef#name
   */
  readonly name?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromFieldRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromFieldRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromFieldRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromFieldRef#fieldPath
   */
  readonly fieldPath: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromFieldRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromFieldRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromFieldRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRef#containerName
   */
  readonly containerName?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRef#divisor
   */
  readonly divisor?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefDivisor;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRef#resource
   */
  readonly resource: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerName': obj.containerName,
    'divisor': obj.divisor?.value,
    'resource': obj.resource,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromSecretKeyRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromSecretKeyRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromSecretKeyRef#key
   */
  readonly key: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromSecretKeyRef#name
   */
  readonly name?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromSecretKeyRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromSecretKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromSecretKeyRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromSecretKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartExec
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartExec {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartExec(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGet
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGet {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGet#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGet#httpHeaders
   */
  readonly httpHeaders?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGet#path
   */
  readonly path?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGet#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPort;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGet(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartSleep
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartSleep {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartSleep#seconds
   */
  readonly seconds: number;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartSleep' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartSleep(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartSleep | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'seconds': obj.seconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocket
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocket {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocket#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocket#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPort;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocket(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopExec
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopExec {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopExec(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGet
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGet {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGet#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGet#httpHeaders
   */
  readonly httpHeaders?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGet#path
   */
  readonly path?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGet#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPort;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGet(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopSleep
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopSleep {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopSleep#seconds
   */
  readonly seconds: number;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopSleep' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopSleep(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopSleep | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'seconds': obj.seconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocket
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocket {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocket#host
   */
  readonly host?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocket#port
   */
  readonly port: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPort;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocket(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGetPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGetPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGetPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeTcpSocketPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeTcpSocketPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeTcpSocketPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGetPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGetPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGetPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeTcpSocketPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeTcpSocketPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeTcpSocketPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGetPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGetPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGetPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeTcpSocketPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeTcpSocketPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeTcpSocketPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItemsFieldRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItemsFieldRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItemsFieldRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItemsFieldRef#fieldPath
   */
  readonly fieldPath: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItemsFieldRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItemsFieldRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItemsFieldRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItemsResourceFieldRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItemsResourceFieldRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItemsResourceFieldRef#containerName
   */
  readonly containerName?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItemsResourceFieldRef#divisor
   */
  readonly divisor?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItemsResourceFieldRefDivisor;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItemsResourceFieldRef#resource
   */
  readonly resource: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItemsResourceFieldRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItemsResourceFieldRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItemsResourceFieldRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerName': obj.containerName,
    'divisor': obj.divisor?.value,
    'resource': obj.resource,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec#accessModes
   */
  readonly accessModes?: string[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec#dataSource
   */
  readonly dataSource?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec#dataSourceRef
   */
  readonly dataSourceRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec#resources
   */
  readonly resources?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResources;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec#selector
   */
  readonly selector?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelector;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec#storageClassName
   */
  readonly storageClassName?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec#volumeAttributesClassName
   */
  readonly volumeAttributesClassName?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec#volumeMode
   */
  readonly volumeMode?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec#volumeName
   */
  readonly volumeName?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'accessModes': obj.accessModes?.map(y => y),
    'dataSource': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource(obj.dataSource),
    'dataSourceRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef(obj.dataSourceRef),
    'resources': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResources(obj.resources),
    'selector': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelector(obj.selector),
    'storageClassName': obj.storageClassName,
    'volumeAttributesClassName': obj.volumeAttributesClassName,
    'volumeMode': obj.volumeMode,
    'volumeName': obj.volumeName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundle
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundle {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundle#labelSelector
   */
  readonly labelSelector?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundle#name
   */
  readonly name?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundle#optional
   */
  readonly optional?: boolean;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundle#path
   */
  readonly path: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundle#signerName
   */
  readonly signerName?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundle' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundle(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundle | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'labelSelector': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector(obj.labelSelector),
    'name': obj.name,
    'optional': obj.optional,
    'path': obj.path,
    'signerName': obj.signerName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesConfigMap
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesConfigMap {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesConfigMap#items
   */
  readonly items?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesConfigMapItems[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesConfigMap#name
   */
  readonly name?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesConfigMap#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesConfigMap' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesConfigMap(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesConfigMap | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesConfigMapItems(y)),
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApi
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApi {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApi#items
   */
  readonly items?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItems[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApi' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApi(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApi | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItems(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesSecret
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesSecret {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesSecret#items
   */
  readonly items?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesSecretItems[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesSecret#name
   */
  readonly name?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesSecret#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesSecret(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesSecretItems(y)),
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesServiceAccountToken
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesServiceAccountToken {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesServiceAccountToken#audience
   */
  readonly audience?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesServiceAccountToken#expirationSeconds
   */
  readonly expirationSeconds?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesServiceAccountToken#path
   */
  readonly path: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesServiceAccountToken' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesServiceAccountToken(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesServiceAccountToken | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'audience': obj.audience,
    'expirationSeconds': obj.expirationSeconds,
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#key
   */
  readonly key: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#key
   */
  readonly key: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#operator
   */
  readonly operator: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#key
   */
  readonly key: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#key
   */
  readonly key: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#operator
   */
  readonly operator: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchExpressions
   */
  readonly matchExpressions?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector#matchExpressions
   */
  readonly matchExpressions?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchExpressions
   */
  readonly matchExpressions?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector#matchExpressions
   */
  readonly matchExpressions?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromResourceFieldRefDivisor
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromResourceFieldRefDivisor {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromResourceFieldRefDivisor {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromResourceFieldRefDivisor(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromResourceFieldRefDivisor {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromResourceFieldRefDivisor(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGetPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGetPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGetPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartTcpSocketPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartTcpSocketPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartTcpSocketPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGetPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGetPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGetPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopTcpSocketPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopTcpSocketPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopTcpSocketPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefDivisor
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefDivisor {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefDivisor {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefDivisor(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefDivisor {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefDivisor(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefDivisor
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefDivisor {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefDivisor {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefDivisor(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefDivisor {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefDivisor(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPort
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPort {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPort(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPort {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItemsResourceFieldRefDivisor
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItemsResourceFieldRefDivisor {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItemsResourceFieldRefDivisor {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItemsResourceFieldRefDivisor(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItemsResourceFieldRefDivisor {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardApiItemsResourceFieldRefDivisor(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource#apiGroup
   */
  readonly apiGroup?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource#kind
   */
  readonly kind: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiGroup': obj.apiGroup,
    'kind': obj.kind,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef#apiGroup
   */
  readonly apiGroup?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef#kind
   */
  readonly kind: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef#name
   */
  readonly name: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiGroup': obj.apiGroup,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResources
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResources {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResources#limits
   */
  readonly limits?: { [key: string]: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesLimits };

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResources#requests
   */
  readonly requests?: { [key: string]: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesRequests };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResources(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'limits': ((obj.limits) === undefined) ? undefined : (Object.entries(obj.limits).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
    'requests': ((obj.requests) === undefined) ? undefined : (Object.entries(obj.requests).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelector
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelector {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelector#matchExpressions
   */
  readonly matchExpressions?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelector(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector#matchExpressions
   */
  readonly matchExpressions?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions[];

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesConfigMapItems
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesConfigMapItems {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesConfigMapItems#key
   */
  readonly key: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesConfigMapItems#mode
   */
  readonly mode?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesConfigMapItems#path
   */
  readonly path: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesConfigMapItems' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesConfigMapItems(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesConfigMapItems | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'mode': obj.mode,
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItems
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItems {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItems#fieldRef
   */
  readonly fieldRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItemsFieldRef;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItems#mode
   */
  readonly mode?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItems#path
   */
  readonly path: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItems#resourceFieldRef
   */
  readonly resourceFieldRef?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRef;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItems' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItems(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItems | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItemsFieldRef(obj.fieldRef),
    'mode': obj.mode,
    'path': obj.path,
    'resourceFieldRef': toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRef(obj.resourceFieldRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesSecretItems
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesSecretItems {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesSecretItems#key
   */
  readonly key: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesSecretItems#mode
   */
  readonly mode?: number;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesSecretItems#path
   */
  readonly path: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesSecretItems' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesSecretItems(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesSecretItems | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'mode': obj.mode,
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesLimits
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesLimits {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesLimits {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesLimits(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesLimits {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesLimits(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesRequests
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesRequests {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesRequests {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesRequests(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesRequests {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesRequests(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItemsFieldRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItemsFieldRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItemsFieldRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItemsFieldRef#fieldPath
   */
  readonly fieldPath: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItemsFieldRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItemsFieldRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItemsFieldRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRef
 */
export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRef {
  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRef#containerName
   */
  readonly containerName?: string;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRef#divisor
   */
  readonly divisor?: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRefDivisor;

  /**
   * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRef#resource
   */
  readonly resource: string;

}

/**
 * Converts an object of type 'RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRef(obj: RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerName': obj.containerName,
    'divisor': obj.divisor?.value,
    'resource': obj.resource,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRefDivisor
 */
export class RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRefDivisor {
  public static fromNumber(value: number): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRefDivisor {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRefDivisor(value);
  }
  public static fromString(value: string): RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRefDivisor {
    return new RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRefDivisor(value);
  }
  private constructor(public readonly value: number | string) {
  }
}


/**
 * SchemaReplication is the Schema for the schemareplications API
This feature requires Tanzu RabbitMQ with schema replication plugin.
For more information, see: https://tanzu.vmware.com/rabbitmq and https://www.rabbitmq.com/definitions-standby.html.
 *
 * @schema SchemaReplication
 */
export class SchemaReplication extends ApiObject {
  /**
   * Returns the apiVersion and kind for "SchemaReplication"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'rabbitmq.com/v1beta1',
    kind: 'SchemaReplication',
  }

  /**
   * Renders a Kubernetes manifest for "SchemaReplication".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: SchemaReplicationProps = {}): any {
    return {
      ...SchemaReplication.GVK,
      ...toJson_SchemaReplicationProps(props),
    };
  }

  /**
   * Defines a "SchemaReplication" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: SchemaReplicationProps = {}) {
    super(scope, id, {
      ...SchemaReplication.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...SchemaReplication.GVK,
      ...toJson_SchemaReplicationProps(resolved),
    };
  }
}

/**
 * SchemaReplication is the Schema for the schemareplications API
 * This feature requires Tanzu RabbitMQ with schema replication plugin.
 * For more information, see: https://tanzu.vmware.com/rabbitmq and https://www.rabbitmq.com/definitions-standby.html.
 *
 * @schema SchemaReplication
 */
export interface SchemaReplicationProps {
  /**
   * @schema SchemaReplication#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * SchemaReplicationSpec defines the desired state of SchemaReplication
   *
   * @schema SchemaReplication#spec
   */
  readonly spec?: SchemaReplicationSpec;

}

/**
 * Converts an object of type 'SchemaReplicationProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SchemaReplicationProps(obj: SchemaReplicationProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_SchemaReplicationSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SchemaReplicationSpec defines the desired state of SchemaReplication
 *
 * @schema SchemaReplicationSpec
 */
export interface SchemaReplicationSpec {
  /**
   * endpoints should be one or multiple endpoints separated by ','.
   * Must provide either spec.endpoints or endpoints in spec.upstreamSecret.
   * When endpoints are provided in both spec.endpoints and spec.upstreamSecret, spec.endpoints takes
   * precedence.
   *
   * @schema SchemaReplicationSpec#endpoints
   */
  readonly endpoints?: string;

  /**
   * Reference to the RabbitmqCluster that schema replication would be set for. Must be an existing cluster.
   *
   * @schema SchemaReplicationSpec#rabbitmqClusterReference
   */
  readonly rabbitmqClusterReference: SchemaReplicationSpecRabbitmqClusterReference;

  /**
   * Set to fetch user credentials from K8s external secret stores to be used for schema replication.
   *
   * @schema SchemaReplicationSpec#secretBackend
   */
  readonly secretBackend?: SchemaReplicationSpecSecretBackend;

  /**
   * Defines a Secret which contains credentials to be used for schema replication.
   * The Secret must contain the keys `username` and `password` in its Data field, or operator will error.
   * Have to set either secretBackend.vault.secretPath or spec.upstreamSecret, but not both.
   *
   * @schema SchemaReplicationSpec#upstreamSecret
   */
  readonly upstreamSecret?: SchemaReplicationSpecUpstreamSecret;

}

/**
 * Converts an object of type 'SchemaReplicationSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SchemaReplicationSpec(obj: SchemaReplicationSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'endpoints': obj.endpoints,
    'rabbitmqClusterReference': toJson_SchemaReplicationSpecRabbitmqClusterReference(obj.rabbitmqClusterReference),
    'secretBackend': toJson_SchemaReplicationSpecSecretBackend(obj.secretBackend),
    'upstreamSecret': toJson_SchemaReplicationSpecUpstreamSecret(obj.upstreamSecret),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to the RabbitmqCluster that schema replication would be set for. Must be an existing cluster.
 *
 * @schema SchemaReplicationSpecRabbitmqClusterReference
 */
export interface SchemaReplicationSpecRabbitmqClusterReference {
  /**
   * Secret contains the http management uri for the RabbitMQ cluster.
   * The Secret must contain the key `uri`, `username` and `password` or operator will error.
   * Have to set either name or connectionSecret, but not both.
   *
   * @schema SchemaReplicationSpecRabbitmqClusterReference#connectionSecret
   */
  readonly connectionSecret?: SchemaReplicationSpecRabbitmqClusterReferenceConnectionSecret;

  /**
   * The name of the RabbitMQ cluster to reference.
   * Have to set either name or connectionSecret, but not both.
   *
   * @schema SchemaReplicationSpecRabbitmqClusterReference#name
   */
  readonly name?: string;

  /**
   * The namespace of the RabbitMQ cluster to reference.
   * Defaults to the namespace of the requested resource if omitted.
   *
   * @default the namespace of the requested resource if omitted.
   * @schema SchemaReplicationSpecRabbitmqClusterReference#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'SchemaReplicationSpecRabbitmqClusterReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SchemaReplicationSpecRabbitmqClusterReference(obj: SchemaReplicationSpecRabbitmqClusterReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectionSecret': toJson_SchemaReplicationSpecRabbitmqClusterReferenceConnectionSecret(obj.connectionSecret),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Set to fetch user credentials from K8s external secret stores to be used for schema replication.
 *
 * @schema SchemaReplicationSpecSecretBackend
 */
export interface SchemaReplicationSpecSecretBackend {
  /**
   * @schema SchemaReplicationSpecSecretBackend#vault
   */
  readonly vault?: SchemaReplicationSpecSecretBackendVault;

}

/**
 * Converts an object of type 'SchemaReplicationSpecSecretBackend' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SchemaReplicationSpecSecretBackend(obj: SchemaReplicationSpecSecretBackend | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'vault': toJson_SchemaReplicationSpecSecretBackendVault(obj.vault),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Defines a Secret which contains credentials to be used for schema replication.
 * The Secret must contain the keys `username` and `password` in its Data field, or operator will error.
 * Have to set either secretBackend.vault.secretPath or spec.upstreamSecret, but not both.
 *
 * @schema SchemaReplicationSpecUpstreamSecret
 */
export interface SchemaReplicationSpecUpstreamSecret {
  /**
   * Name of the referent.
   * This field is effectively required, but due to backwards compatibility is
   * allowed to be empty. Instances of this type with an empty value here are
   * almost certainly wrong.
   * TODO: Add other useful fields. apiVersion, kind, uid?
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
   *
   * @schema SchemaReplicationSpecUpstreamSecret#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'SchemaReplicationSpecUpstreamSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SchemaReplicationSpecUpstreamSecret(obj: SchemaReplicationSpecUpstreamSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Secret contains the http management uri for the RabbitMQ cluster.
 * The Secret must contain the key `uri`, `username` and `password` or operator will error.
 * Have to set either name or connectionSecret, but not both.
 *
 * @schema SchemaReplicationSpecRabbitmqClusterReferenceConnectionSecret
 */
export interface SchemaReplicationSpecRabbitmqClusterReferenceConnectionSecret {
  /**
   * Name of the referent.
   * This field is effectively required, but due to backwards compatibility is
   * allowed to be empty. Instances of this type with an empty value here are
   * almost certainly wrong.
   * TODO: Add other useful fields. apiVersion, kind, uid?
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
   *
   * @schema SchemaReplicationSpecRabbitmqClusterReferenceConnectionSecret#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'SchemaReplicationSpecRabbitmqClusterReferenceConnectionSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SchemaReplicationSpecRabbitmqClusterReferenceConnectionSecret(obj: SchemaReplicationSpecRabbitmqClusterReferenceConnectionSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SchemaReplicationSpecSecretBackendVault
 */
export interface SchemaReplicationSpecSecretBackendVault {
  /**
   * Path in Vault to access a KV (Key-Value) secret with the fields username and password to be used for replication.
   * For example "secret/data/rabbitmq/config".
   * Optional; if not provided, username and password will come from upstreamSecret instead.
   * Have to set either secretBackend.vault.secretPath or upstreamSecret, but not both.
   *
   * @schema SchemaReplicationSpecSecretBackendVault#secretPath
   */
  readonly secretPath?: string;

}

/**
 * Converts an object of type 'SchemaReplicationSpecSecretBackendVault' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SchemaReplicationSpecSecretBackendVault(obj: SchemaReplicationSpecSecretBackendVault | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretPath': obj.secretPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * Shovel is the Schema for the shovels API
 *
 * @schema Shovel
 */
export class Shovel extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Shovel"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'rabbitmq.com/v1beta1',
    kind: 'Shovel',
  }

  /**
   * Renders a Kubernetes manifest for "Shovel".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ShovelProps = {}): any {
    return {
      ...Shovel.GVK,
      ...toJson_ShovelProps(props),
    };
  }

  /**
   * Defines a "Shovel" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ShovelProps = {}) {
    super(scope, id, {
      ...Shovel.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Shovel.GVK,
      ...toJson_ShovelProps(resolved),
    };
  }
}

/**
 * Shovel is the Schema for the shovels API
 *
 * @schema Shovel
 */
export interface ShovelProps {
  /**
   * @schema Shovel#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ShovelSpec defines the desired state of Shovel
   * For how to configure Shovel, see: https://www.rabbitmq.com/shovel.html.
   *
   * @schema Shovel#spec
   */
  readonly spec?: ShovelSpec;

}

/**
 * Converts an object of type 'ShovelProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ShovelProps(obj: ShovelProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ShovelSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ShovelSpec defines the desired state of Shovel
 * For how to configure Shovel, see: https://www.rabbitmq.com/shovel.html.
 *
 * @schema ShovelSpec
 */
export interface ShovelSpec {
  /**
   * @schema ShovelSpec#ackMode
   */
  readonly ackMode?: ShovelSpecAckMode;

  /**
   * @schema ShovelSpec#addForwardHeaders
   */
  readonly addForwardHeaders?: boolean;

  /**
   * @schema ShovelSpec#deleteAfter
   */
  readonly deleteAfter?: string;

  /**
   * @schema ShovelSpec#destAddForwardHeaders
   */
  readonly destAddForwardHeaders?: boolean;

  /**
   * @schema ShovelSpec#destAddTimestampHeader
   */
  readonly destAddTimestampHeader?: boolean;

  /**
   * amqp10 configuration; required if destProtocol is amqp10
   *
   * @schema ShovelSpec#destAddress
   */
  readonly destAddress?: string;

  /**
   * amqp10 configuration
   *
   * @schema ShovelSpec#destApplicationProperties
   */
  readonly destApplicationProperties?: any;

  /**
   * amqp091 configuration
   *
   * @schema ShovelSpec#destExchange
   */
  readonly destExchange?: string;

  /**
   * amqp091 configuration
   *
   * @schema ShovelSpec#destExchangeKey
   */
  readonly destExchangeKey?: string;

  /**
   * amqp10 configuration
   *
   * @schema ShovelSpec#destMessageAnnotations
   */
  readonly destMessageAnnotations?: any;

  /**
   * amqp10 configuration
   *
   * @schema ShovelSpec#destProperties
   */
  readonly destProperties?: any;

  /**
   * @schema ShovelSpec#destProtocol
   */
  readonly destProtocol?: ShovelSpecDestProtocol;

  /**
   * amqp091 configuration
   *
   * @schema ShovelSpec#destPublishProperties
   */
  readonly destPublishProperties?: any;

  /**
   * amqp091 configuration
   *
   * @schema ShovelSpec#destQueue
   */
  readonly destQueue?: string;

  /**
   * Required property; cannot be updated
   *
   * @schema ShovelSpec#name
   */
  readonly name: string;

  /**
   * @schema ShovelSpec#prefetchCount
   */
  readonly prefetchCount?: number;

  /**
   * Reference to the RabbitmqCluster that this Shovel will be created in.
   * Required property.
   *
   * @schema ShovelSpec#rabbitmqClusterReference
   */
  readonly rabbitmqClusterReference: ShovelSpecRabbitmqClusterReference;

  /**
   * @schema ShovelSpec#reconnectDelay
   */
  readonly reconnectDelay?: number;

  /**
   * amqp10 configuration; required if srcProtocol is amqp10
   *
   * @schema ShovelSpec#srcAddress
   */
  readonly srcAddress?: string;

  /**
   * amqp091 configuration
   *
   * @schema ShovelSpec#srcConsumerArgs
   */
  readonly srcConsumerArgs?: any;

  /**
   * @schema ShovelSpec#srcDeleteAfter
   */
  readonly srcDeleteAfter?: string;

  /**
   * amqp091 configuration
   *
   * @schema ShovelSpec#srcExchange
   */
  readonly srcExchange?: string;

  /**
   * amqp091 configuration
   *
   * @schema ShovelSpec#srcExchangeKey
   */
  readonly srcExchangeKey?: string;

  /**
   * @schema ShovelSpec#srcPrefetchCount
   */
  readonly srcPrefetchCount?: number;

  /**
   * @schema ShovelSpec#srcProtocol
   */
  readonly srcProtocol?: ShovelSpecSrcProtocol;

  /**
   * amqp091 configuration
   *
   * @schema ShovelSpec#srcQueue
   */
  readonly srcQueue?: string;

  /**
   * Secret contains the AMQP URI(s) to configure Shovel destination and source.
   * The Secret must contain the key `destUri` and `srcUri` or operator will error.
   * Both fields should be one or multiple uris separated by ','.
   * Required property.
   *
   * @schema ShovelSpec#uriSecret
   */
  readonly uriSecret: ShovelSpecUriSecret;

  /**
   * Default to vhost '/'; cannot be updated
   *
   * @default vhost '/'; cannot be updated
   * @schema ShovelSpec#vhost
   */
  readonly vhost?: string;

}

/**
 * Converts an object of type 'ShovelSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ShovelSpec(obj: ShovelSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ackMode': obj.ackMode,
    'addForwardHeaders': obj.addForwardHeaders,
    'deleteAfter': obj.deleteAfter,
    'destAddForwardHeaders': obj.destAddForwardHeaders,
    'destAddTimestampHeader': obj.destAddTimestampHeader,
    'destAddress': obj.destAddress,
    'destApplicationProperties': obj.destApplicationProperties,
    'destExchange': obj.destExchange,
    'destExchangeKey': obj.destExchangeKey,
    'destMessageAnnotations': obj.destMessageAnnotations,
    'destProperties': obj.destProperties,
    'destProtocol': obj.destProtocol,
    'destPublishProperties': obj.destPublishProperties,
    'destQueue': obj.destQueue,
    'name': obj.name,
    'prefetchCount': obj.prefetchCount,
    'rabbitmqClusterReference': toJson_ShovelSpecRabbitmqClusterReference(obj.rabbitmqClusterReference),
    'reconnectDelay': obj.reconnectDelay,
    'srcAddress': obj.srcAddress,
    'srcConsumerArgs': obj.srcConsumerArgs,
    'srcDeleteAfter': obj.srcDeleteAfter,
    'srcExchange': obj.srcExchange,
    'srcExchangeKey': obj.srcExchangeKey,
    'srcPrefetchCount': obj.srcPrefetchCount,
    'srcProtocol': obj.srcProtocol,
    'srcQueue': obj.srcQueue,
    'uriSecret': toJson_ShovelSpecUriSecret(obj.uriSecret),
    'vhost': obj.vhost,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ShovelSpecAckMode
 */
export enum ShovelSpecAckMode {
  /** on-confirm */
  ON_HYPHEN_CONFIRM = "on-confirm",
  /** on-publish */
  ON_HYPHEN_PUBLISH = "on-publish",
  /** no-ack */
  NO_HYPHEN_ACK = "no-ack",
}

/**
 * @schema ShovelSpecDestProtocol
 */
export enum ShovelSpecDestProtocol {
  /** amqp091 */
  AMQP091 = "amqp091",
  /** amqp10 */
  AMQP10 = "amqp10",
}

/**
 * Reference to the RabbitmqCluster that this Shovel will be created in.
 * Required property.
 *
 * @schema ShovelSpecRabbitmqClusterReference
 */
export interface ShovelSpecRabbitmqClusterReference {
  /**
   * Secret contains the http management uri for the RabbitMQ cluster.
   * The Secret must contain the key `uri`, `username` and `password` or operator will error.
   * Have to set either name or connectionSecret, but not both.
   *
   * @schema ShovelSpecRabbitmqClusterReference#connectionSecret
   */
  readonly connectionSecret?: ShovelSpecRabbitmqClusterReferenceConnectionSecret;

  /**
   * The name of the RabbitMQ cluster to reference.
   * Have to set either name or connectionSecret, but not both.
   *
   * @schema ShovelSpecRabbitmqClusterReference#name
   */
  readonly name?: string;

  /**
   * The namespace of the RabbitMQ cluster to reference.
   * Defaults to the namespace of the requested resource if omitted.
   *
   * @default the namespace of the requested resource if omitted.
   * @schema ShovelSpecRabbitmqClusterReference#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ShovelSpecRabbitmqClusterReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ShovelSpecRabbitmqClusterReference(obj: ShovelSpecRabbitmqClusterReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectionSecret': toJson_ShovelSpecRabbitmqClusterReferenceConnectionSecret(obj.connectionSecret),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ShovelSpecSrcProtocol
 */
export enum ShovelSpecSrcProtocol {
  /** amqp091 */
  AMQP091 = "amqp091",
  /** amqp10 */
  AMQP10 = "amqp10",
}

/**
 * Secret contains the AMQP URI(s) to configure Shovel destination and source.
 * The Secret must contain the key `destUri` and `srcUri` or operator will error.
 * Both fields should be one or multiple uris separated by ','.
 * Required property.
 *
 * @schema ShovelSpecUriSecret
 */
export interface ShovelSpecUriSecret {
  /**
   * Name of the referent.
   * This field is effectively required, but due to backwards compatibility is
   * allowed to be empty. Instances of this type with an empty value here are
   * almost certainly wrong.
   * TODO: Add other useful fields. apiVersion, kind, uid?
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
   *
   * @schema ShovelSpecUriSecret#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'ShovelSpecUriSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ShovelSpecUriSecret(obj: ShovelSpecUriSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Secret contains the http management uri for the RabbitMQ cluster.
 * The Secret must contain the key `uri`, `username` and `password` or operator will error.
 * Have to set either name or connectionSecret, but not both.
 *
 * @schema ShovelSpecRabbitmqClusterReferenceConnectionSecret
 */
export interface ShovelSpecRabbitmqClusterReferenceConnectionSecret {
  /**
   * Name of the referent.
   * This field is effectively required, but due to backwards compatibility is
   * allowed to be empty. Instances of this type with an empty value here are
   * almost certainly wrong.
   * TODO: Add other useful fields. apiVersion, kind, uid?
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
   *
   * @schema ShovelSpecRabbitmqClusterReferenceConnectionSecret#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'ShovelSpecRabbitmqClusterReferenceConnectionSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ShovelSpecRabbitmqClusterReferenceConnectionSecret(obj: ShovelSpecRabbitmqClusterReferenceConnectionSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * SuperStream is the Schema for the queues API
 *
 * @schema SuperStream
 */
export class SuperStream extends ApiObject {
  /**
   * Returns the apiVersion and kind for "SuperStream"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'rabbitmq.com/v1alpha1',
    kind: 'SuperStream',
  }

  /**
   * Renders a Kubernetes manifest for "SuperStream".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: SuperStreamProps = {}): any {
    return {
      ...SuperStream.GVK,
      ...toJson_SuperStreamProps(props),
    };
  }

  /**
   * Defines a "SuperStream" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: SuperStreamProps = {}) {
    super(scope, id, {
      ...SuperStream.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...SuperStream.GVK,
      ...toJson_SuperStreamProps(resolved),
    };
  }
}

/**
 * SuperStream is the Schema for the queues API
 *
 * @schema SuperStream
 */
export interface SuperStreamProps {
  /**
   * @schema SuperStream#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * SuperStreamSpec defines the desired state of SuperStream
   *
   * @schema SuperStream#spec
   */
  readonly spec?: SuperStreamSpec;

}

/**
 * Converts an object of type 'SuperStreamProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SuperStreamProps(obj: SuperStreamProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_SuperStreamSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SuperStreamSpec defines the desired state of SuperStream
 *
 * @schema SuperStreamSpec
 */
export interface SuperStreamSpec {
  /**
   * Name of the queue; required property.
   *
   * @schema SuperStreamSpec#name
   */
  readonly name: string;

  /**
   * Number of partitions to create within this super stream.
   * Defaults to '3'.
   *
   * @default 3'.
   * @schema SuperStreamSpec#partitions
   */
  readonly partitions?: number;

  /**
   * Reference to the RabbitmqCluster that the SuperStream will be created in.
   * Required property.
   *
   * @schema SuperStreamSpec#rabbitmqClusterReference
   */
  readonly rabbitmqClusterReference: SuperStreamSpecRabbitmqClusterReference;

  /**
   * Routing keys to use for each of the partitions in the SuperStream
   * If unset, the routing keys for the partitions will be set to the index of the partitions
   *
   * @schema SuperStreamSpec#routingKeys
   */
  readonly routingKeys?: string[];

  /**
   * Default to vhost '/'; cannot be updated
   *
   * @default vhost '/'; cannot be updated
   * @schema SuperStreamSpec#vhost
   */
  readonly vhost?: string;

}

/**
 * Converts an object of type 'SuperStreamSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SuperStreamSpec(obj: SuperStreamSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'partitions': obj.partitions,
    'rabbitmqClusterReference': toJson_SuperStreamSpecRabbitmqClusterReference(obj.rabbitmqClusterReference),
    'routingKeys': obj.routingKeys?.map(y => y),
    'vhost': obj.vhost,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to the RabbitmqCluster that the SuperStream will be created in.
 * Required property.
 *
 * @schema SuperStreamSpecRabbitmqClusterReference
 */
export interface SuperStreamSpecRabbitmqClusterReference {
  /**
   * Secret contains the http management uri for the RabbitMQ cluster.
   * The Secret must contain the key `uri`, `username` and `password` or operator will error.
   * Have to set either name or connectionSecret, but not both.
   *
   * @schema SuperStreamSpecRabbitmqClusterReference#connectionSecret
   */
  readonly connectionSecret?: SuperStreamSpecRabbitmqClusterReferenceConnectionSecret;

  /**
   * The name of the RabbitMQ cluster to reference.
   * Have to set either name or connectionSecret, but not both.
   *
   * @schema SuperStreamSpecRabbitmqClusterReference#name
   */
  readonly name?: string;

  /**
   * The namespace of the RabbitMQ cluster to reference.
   * Defaults to the namespace of the requested resource if omitted.
   *
   * @default the namespace of the requested resource if omitted.
   * @schema SuperStreamSpecRabbitmqClusterReference#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'SuperStreamSpecRabbitmqClusterReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SuperStreamSpecRabbitmqClusterReference(obj: SuperStreamSpecRabbitmqClusterReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectionSecret': toJson_SuperStreamSpecRabbitmqClusterReferenceConnectionSecret(obj.connectionSecret),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Secret contains the http management uri for the RabbitMQ cluster.
 * The Secret must contain the key `uri`, `username` and `password` or operator will error.
 * Have to set either name or connectionSecret, but not both.
 *
 * @schema SuperStreamSpecRabbitmqClusterReferenceConnectionSecret
 */
export interface SuperStreamSpecRabbitmqClusterReferenceConnectionSecret {
  /**
   * Name of the referent.
   * This field is effectively required, but due to backwards compatibility is
   * allowed to be empty. Instances of this type with an empty value here are
   * almost certainly wrong.
   * TODO: Add other useful fields. apiVersion, kind, uid?
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
   *
   * @schema SuperStreamSpecRabbitmqClusterReferenceConnectionSecret#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'SuperStreamSpecRabbitmqClusterReferenceConnectionSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SuperStreamSpecRabbitmqClusterReferenceConnectionSecret(obj: SuperStreamSpecRabbitmqClusterReferenceConnectionSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * TopicPermission is the Schema for the topicpermissions API
 *
 * @schema TopicPermission
 */
export class TopicPermission extends ApiObject {
  /**
   * Returns the apiVersion and kind for "TopicPermission"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'rabbitmq.com/v1beta1',
    kind: 'TopicPermission',
  }

  /**
   * Renders a Kubernetes manifest for "TopicPermission".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: TopicPermissionProps = {}): any {
    return {
      ...TopicPermission.GVK,
      ...toJson_TopicPermissionProps(props),
    };
  }

  /**
   * Defines a "TopicPermission" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: TopicPermissionProps = {}) {
    super(scope, id, {
      ...TopicPermission.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...TopicPermission.GVK,
      ...toJson_TopicPermissionProps(resolved),
    };
  }
}

/**
 * TopicPermission is the Schema for the topicpermissions API
 *
 * @schema TopicPermission
 */
export interface TopicPermissionProps {
  /**
   * @schema TopicPermission#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * TopicPermissionSpec defines the desired state of TopicPermission
   *
   * @schema TopicPermission#spec
   */
  readonly spec?: TopicPermissionSpec;

}

/**
 * Converts an object of type 'TopicPermissionProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TopicPermissionProps(obj: TopicPermissionProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_TopicPermissionSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TopicPermissionSpec defines the desired state of TopicPermission
 *
 * @schema TopicPermissionSpec
 */
export interface TopicPermissionSpec {
  /**
   * Permissions to grant to the user to a topic exchange; required property.
   *
   * @schema TopicPermissionSpec#permissions
   */
  readonly permissions: TopicPermissionSpecPermissions;

  /**
   * Reference to the RabbitmqCluster that both the provided user and vhost are.
   * Required property.
   *
   * @schema TopicPermissionSpec#rabbitmqClusterReference
   */
  readonly rabbitmqClusterReference: TopicPermissionSpecRabbitmqClusterReference;

  /**
   * Name of an existing user; must provide user or userReference, else create/update will fail; cannot be updated.
   *
   * @schema TopicPermissionSpec#user
   */
  readonly user?: string;

  /**
   * Reference to an existing user.rabbitmq.com object; must provide user or userReference, else create/update will fail; cannot be updated.
   *
   * @schema TopicPermissionSpec#userReference
   */
  readonly userReference?: TopicPermissionSpecUserReference;

  /**
   * Name of an existing vhost; required property; cannot be updated.
   *
   * @schema TopicPermissionSpec#vhost
   */
  readonly vhost: string;

}

/**
 * Converts an object of type 'TopicPermissionSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TopicPermissionSpec(obj: TopicPermissionSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'permissions': toJson_TopicPermissionSpecPermissions(obj.permissions),
    'rabbitmqClusterReference': toJson_TopicPermissionSpecRabbitmqClusterReference(obj.rabbitmqClusterReference),
    'user': obj.user,
    'userReference': toJson_TopicPermissionSpecUserReference(obj.userReference),
    'vhost': obj.vhost,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Permissions to grant to the user to a topic exchange; required property.
 *
 * @schema TopicPermissionSpecPermissions
 */
export interface TopicPermissionSpecPermissions {
  /**
   * Name of a topic exchange; required property; cannot be updated.
   *
   * @schema TopicPermissionSpecPermissions#exchange
   */
  readonly exchange?: string;

  /**
   * @schema TopicPermissionSpecPermissions#read
   */
  readonly read?: string;

  /**
   * @schema TopicPermissionSpecPermissions#write
   */
  readonly write?: string;

}

/**
 * Converts an object of type 'TopicPermissionSpecPermissions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TopicPermissionSpecPermissions(obj: TopicPermissionSpecPermissions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exchange': obj.exchange,
    'read': obj.read,
    'write': obj.write,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to the RabbitmqCluster that both the provided user and vhost are.
 * Required property.
 *
 * @schema TopicPermissionSpecRabbitmqClusterReference
 */
export interface TopicPermissionSpecRabbitmqClusterReference {
  /**
   * Secret contains the http management uri for the RabbitMQ cluster.
   * The Secret must contain the key `uri`, `username` and `password` or operator will error.
   * Have to set either name or connectionSecret, but not both.
   *
   * @schema TopicPermissionSpecRabbitmqClusterReference#connectionSecret
   */
  readonly connectionSecret?: TopicPermissionSpecRabbitmqClusterReferenceConnectionSecret;

  /**
   * The name of the RabbitMQ cluster to reference.
   * Have to set either name or connectionSecret, but not both.
   *
   * @schema TopicPermissionSpecRabbitmqClusterReference#name
   */
  readonly name?: string;

  /**
   * The namespace of the RabbitMQ cluster to reference.
   * Defaults to the namespace of the requested resource if omitted.
   *
   * @default the namespace of the requested resource if omitted.
   * @schema TopicPermissionSpecRabbitmqClusterReference#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'TopicPermissionSpecRabbitmqClusterReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TopicPermissionSpecRabbitmqClusterReference(obj: TopicPermissionSpecRabbitmqClusterReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectionSecret': toJson_TopicPermissionSpecRabbitmqClusterReferenceConnectionSecret(obj.connectionSecret),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to an existing user.rabbitmq.com object; must provide user or userReference, else create/update will fail; cannot be updated.
 *
 * @schema TopicPermissionSpecUserReference
 */
export interface TopicPermissionSpecUserReference {
  /**
   * Name of the referent.
   * This field is effectively required, but due to backwards compatibility is
   * allowed to be empty. Instances of this type with an empty value here are
   * almost certainly wrong.
   * TODO: Add other useful fields. apiVersion, kind, uid?
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
   *
   * @schema TopicPermissionSpecUserReference#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'TopicPermissionSpecUserReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TopicPermissionSpecUserReference(obj: TopicPermissionSpecUserReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Secret contains the http management uri for the RabbitMQ cluster.
 * The Secret must contain the key `uri`, `username` and `password` or operator will error.
 * Have to set either name or connectionSecret, but not both.
 *
 * @schema TopicPermissionSpecRabbitmqClusterReferenceConnectionSecret
 */
export interface TopicPermissionSpecRabbitmqClusterReferenceConnectionSecret {
  /**
   * Name of the referent.
   * This field is effectively required, but due to backwards compatibility is
   * allowed to be empty. Instances of this type with an empty value here are
   * almost certainly wrong.
   * TODO: Add other useful fields. apiVersion, kind, uid?
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
   *
   * @schema TopicPermissionSpecRabbitmqClusterReferenceConnectionSecret#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'TopicPermissionSpecRabbitmqClusterReferenceConnectionSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TopicPermissionSpecRabbitmqClusterReferenceConnectionSecret(obj: TopicPermissionSpecRabbitmqClusterReferenceConnectionSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * User is the Schema for the users API.
 *
 * @schema User
 */
export class User extends ApiObject {
  /**
   * Returns the apiVersion and kind for "User"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'rabbitmq.com/v1beta1',
    kind: 'User',
  }

  /**
   * Renders a Kubernetes manifest for "User".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: UserProps = {}): any {
    return {
      ...User.GVK,
      ...toJson_UserProps(props),
    };
  }

  /**
   * Defines a "User" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: UserProps = {}) {
    super(scope, id, {
      ...User.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...User.GVK,
      ...toJson_UserProps(resolved),
    };
  }
}

/**
 * User is the Schema for the users API.
 *
 * @schema User
 */
export interface UserProps {
  /**
   * @schema User#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Spec configures the desired state of the User object.
   *
   * @schema User#spec
   */
  readonly spec?: UserSpec;

}

/**
 * Converts an object of type 'UserProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_UserProps(obj: UserProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_UserSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Spec configures the desired state of the User object.
 *
 * @schema UserSpec
 */
export interface UserSpec {
  /**
   * Defines a Secret containing the credentials for the User. If this field is omitted, random a username and
   * password will be generated. The Secret must have the following keys in its Data field:
   *
   *
   * * `username` – Must be present or the import will fail.
   * * `passwordHash` – The SHA-512 hash of the password. If the hash is an empty string, a passwordless user
   * will be created. For more information, see https://www.rabbitmq.com/docs/passwords.
   * * `password` – Plain-text password. Will be used only if the `passwordHash` key is missing.
   *
   *
   * Note that this import only occurs at creation time, and is ignored once a password has been set on a User.
   *
   * @schema UserSpec#importCredentialsSecret
   */
  readonly importCredentialsSecret?: UserSpecImportCredentialsSecret;

  /**
   * Reference to the RabbitmqCluster that the user will be created for. This cluster must
   * exist for the User object to be created.
   *
   * @schema UserSpec#rabbitmqClusterReference
   */
  readonly rabbitmqClusterReference: UserSpecRabbitmqClusterReference;

  /**
   * List of permissions tags to associate with the user. This determines the level of
   * access to the RabbitMQ management UI granted to the user. Omitting this field will
   * lead to a user than can still connect to the cluster through messaging protocols,
   * but cannot perform any management actions.
   * For more information, see https://www.rabbitmq.com/management.html#permissions.
   *
   * @schema UserSpec#tags
   */
  readonly tags?: UserSpecTags[];

}

/**
 * Converts an object of type 'UserSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_UserSpec(obj: UserSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'importCredentialsSecret': toJson_UserSpecImportCredentialsSecret(obj.importCredentialsSecret),
    'rabbitmqClusterReference': toJson_UserSpecRabbitmqClusterReference(obj.rabbitmqClusterReference),
    'tags': obj.tags?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Defines a Secret containing the credentials for the User. If this field is omitted, random a username and
 * password will be generated. The Secret must have the following keys in its Data field:
 *
 *
 * * `username` – Must be present or the import will fail.
 * * `passwordHash` – The SHA-512 hash of the password. If the hash is an empty string, a passwordless user
 * will be created. For more information, see https://www.rabbitmq.com/docs/passwords.
 * * `password` – Plain-text password. Will be used only if the `passwordHash` key is missing.
 *
 *
 * Note that this import only occurs at creation time, and is ignored once a password has been set on a User.
 *
 * @schema UserSpecImportCredentialsSecret
 */
export interface UserSpecImportCredentialsSecret {
  /**
   * Name of the referent.
   * This field is effectively required, but due to backwards compatibility is
   * allowed to be empty. Instances of this type with an empty value here are
   * almost certainly wrong.
   * TODO: Add other useful fields. apiVersion, kind, uid?
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
   *
   * @schema UserSpecImportCredentialsSecret#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'UserSpecImportCredentialsSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_UserSpecImportCredentialsSecret(obj: UserSpecImportCredentialsSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to the RabbitmqCluster that the user will be created for. This cluster must
 * exist for the User object to be created.
 *
 * @schema UserSpecRabbitmqClusterReference
 */
export interface UserSpecRabbitmqClusterReference {
  /**
   * Secret contains the http management uri for the RabbitMQ cluster.
   * The Secret must contain the key `uri`, `username` and `password` or operator will error.
   * Have to set either name or connectionSecret, but not both.
   *
   * @schema UserSpecRabbitmqClusterReference#connectionSecret
   */
  readonly connectionSecret?: UserSpecRabbitmqClusterReferenceConnectionSecret;

  /**
   * The name of the RabbitMQ cluster to reference.
   * Have to set either name or connectionSecret, but not both.
   *
   * @schema UserSpecRabbitmqClusterReference#name
   */
  readonly name?: string;

  /**
   * The namespace of the RabbitMQ cluster to reference.
   * Defaults to the namespace of the requested resource if omitted.
   *
   * @default the namespace of the requested resource if omitted.
   * @schema UserSpecRabbitmqClusterReference#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'UserSpecRabbitmqClusterReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_UserSpecRabbitmqClusterReference(obj: UserSpecRabbitmqClusterReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectionSecret': toJson_UserSpecRabbitmqClusterReferenceConnectionSecret(obj.connectionSecret),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * UserTag defines the level of access to the management UI allocated to the user.
 * For more information, see https://www.rabbitmq.com/management.html#permissions.
 *
 * @schema UserSpecTags
 */
export enum UserSpecTags {
  /** management */
  MANAGEMENT = "management",
  /** policymaker */
  POLICYMAKER = "policymaker",
  /** monitoring */
  MONITORING = "monitoring",
  /** administrator */
  ADMINISTRATOR = "administrator",
}

/**
 * Secret contains the http management uri for the RabbitMQ cluster.
 * The Secret must contain the key `uri`, `username` and `password` or operator will error.
 * Have to set either name or connectionSecret, but not both.
 *
 * @schema UserSpecRabbitmqClusterReferenceConnectionSecret
 */
export interface UserSpecRabbitmqClusterReferenceConnectionSecret {
  /**
   * Name of the referent.
   * This field is effectively required, but due to backwards compatibility is
   * allowed to be empty. Instances of this type with an empty value here are
   * almost certainly wrong.
   * TODO: Add other useful fields. apiVersion, kind, uid?
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
   *
   * @schema UserSpecRabbitmqClusterReferenceConnectionSecret#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'UserSpecRabbitmqClusterReferenceConnectionSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_UserSpecRabbitmqClusterReferenceConnectionSecret(obj: UserSpecRabbitmqClusterReferenceConnectionSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * Vhost is the Schema for the vhosts API
 *
 * @schema Vhost
 */
export class Vhost extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Vhost"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'rabbitmq.com/v1beta1',
    kind: 'Vhost',
  }

  /**
   * Renders a Kubernetes manifest for "Vhost".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: VhostProps = {}): any {
    return {
      ...Vhost.GVK,
      ...toJson_VhostProps(props),
    };
  }

  /**
   * Defines a "Vhost" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: VhostProps = {}) {
    super(scope, id, {
      ...Vhost.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Vhost.GVK,
      ...toJson_VhostProps(resolved),
    };
  }
}

/**
 * Vhost is the Schema for the vhosts API
 *
 * @schema Vhost
 */
export interface VhostProps {
  /**
   * @schema Vhost#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * VhostSpec defines the desired state of Vhost
   *
   * @schema Vhost#spec
   */
  readonly spec?: VhostSpec;

}

/**
 * Converts an object of type 'VhostProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VhostProps(obj: VhostProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_VhostSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * VhostSpec defines the desired state of Vhost
 *
 * @schema VhostSpec
 */
export interface VhostSpec {
  /**
   * Default queue type for this vhost; can be set to quorum, classic or stream.
   * Supported in RabbitMQ 3.11.12 or above.
   *
   * @schema VhostSpec#defaultQueueType
   */
  readonly defaultQueueType?: VhostSpecDefaultQueueType;

  /**
   * Name of the vhost; see https://www.rabbitmq.com/vhosts.html.
   *
   * @schema VhostSpec#name
   */
  readonly name: string;

  /**
   * Reference to the RabbitmqCluster that the vhost will be created in.
   * Required property.
   *
   * @schema VhostSpec#rabbitmqClusterReference
   */
  readonly rabbitmqClusterReference: VhostSpecRabbitmqClusterReference;

  /**
   * @schema VhostSpec#tags
   */
  readonly tags?: string[];

  /**
   * @schema VhostSpec#tracing
   */
  readonly tracing?: boolean;

}

/**
 * Converts an object of type 'VhostSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VhostSpec(obj: VhostSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'defaultQueueType': obj.defaultQueueType,
    'name': obj.name,
    'rabbitmqClusterReference': toJson_VhostSpecRabbitmqClusterReference(obj.rabbitmqClusterReference),
    'tags': obj.tags?.map(y => y),
    'tracing': obj.tracing,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Default queue type for this vhost; can be set to quorum, classic or stream.
 * Supported in RabbitMQ 3.11.12 or above.
 *
 * @schema VhostSpecDefaultQueueType
 */
export enum VhostSpecDefaultQueueType {
  /** quorum */
  QUORUM = "quorum",
  /** classic */
  CLASSIC = "classic",
  /** stream */
  STREAM = "stream",
}

/**
 * Reference to the RabbitmqCluster that the vhost will be created in.
 * Required property.
 *
 * @schema VhostSpecRabbitmqClusterReference
 */
export interface VhostSpecRabbitmqClusterReference {
  /**
   * Secret contains the http management uri for the RabbitMQ cluster.
   * The Secret must contain the key `uri`, `username` and `password` or operator will error.
   * Have to set either name or connectionSecret, but not both.
   *
   * @schema VhostSpecRabbitmqClusterReference#connectionSecret
   */
  readonly connectionSecret?: VhostSpecRabbitmqClusterReferenceConnectionSecret;

  /**
   * The name of the RabbitMQ cluster to reference.
   * Have to set either name or connectionSecret, but not both.
   *
   * @schema VhostSpecRabbitmqClusterReference#name
   */
  readonly name?: string;

  /**
   * The namespace of the RabbitMQ cluster to reference.
   * Defaults to the namespace of the requested resource if omitted.
   *
   * @default the namespace of the requested resource if omitted.
   * @schema VhostSpecRabbitmqClusterReference#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'VhostSpecRabbitmqClusterReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VhostSpecRabbitmqClusterReference(obj: VhostSpecRabbitmqClusterReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectionSecret': toJson_VhostSpecRabbitmqClusterReferenceConnectionSecret(obj.connectionSecret),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Secret contains the http management uri for the RabbitMQ cluster.
 * The Secret must contain the key `uri`, `username` and `password` or operator will error.
 * Have to set either name or connectionSecret, but not both.
 *
 * @schema VhostSpecRabbitmqClusterReferenceConnectionSecret
 */
export interface VhostSpecRabbitmqClusterReferenceConnectionSecret {
  /**
   * Name of the referent.
   * This field is effectively required, but due to backwards compatibility is
   * allowed to be empty. Instances of this type with an empty value here are
   * almost certainly wrong.
   * TODO: Add other useful fields. apiVersion, kind, uid?
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
   *
   * @schema VhostSpecRabbitmqClusterReferenceConnectionSecret#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'VhostSpecRabbitmqClusterReferenceConnectionSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VhostSpecRabbitmqClusterReferenceConnectionSecret(obj: VhostSpecRabbitmqClusterReferenceConnectionSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

