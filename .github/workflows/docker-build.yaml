name: docker-build
run-name: Build ${{ inputs.application }}@${{ inputs.version }}
on:
  workflow_dispatch:
    inputs:
      application:
        description: Application to build
        type: string
        required: true
      image:
        description: Container image registry
        type: string
        required: true
      version:
        description: Version number used to tag images
        type: string
        required: true
jobs:
  docker-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      - name: 'Generate docker metadata (tags, labels)'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.image }}
          tags: |
            type=semver,pattern={{version}},value=${{ inputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ inputs.version }}
            type=semver,pattern={{major}},value=${{ inputs.version }}
            type=sha
      - name: 'Set up QEMU'
        uses: docker/setup-qemu-action@v3
      - name: 'Set up buildx'
        uses: docker/setup-buildx-action@v3
      - name: 'Login to container registry'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Prevent image rebuild'
        id: image-exists
        uses: ./.github/actions/docker-image-exists
        with:
          image: ${{ inputs.image }}
          tag: ${{ inputs.version }}
      - name: 'Build and push'
        if: ${{ steps.image-exists.outputs.exists == 'false' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./dockerfile
          build-args: |
            BUILDER_IMAGE=node:22-slim
            RUNNER_IMAGE=gcr.io/distroless/nodejs22-debian12
            TURBO_VERSION=2.3.1
            NPM_REGISTRY_TOKEN=${{ secrets.GITHUB_TOKEN }}
            APPLICATION_NAME=${{ inputs.application }}
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ inputs.application }}:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ inputs.application }}:buildcache,mode=max
      - name: 'Deploy on development environment'
        run: |
          git tag -f deploy/development/${{ inputs.application }}
          git push -f origin deploy/development/${{ inputs.application }}